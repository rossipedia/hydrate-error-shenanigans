diff --git a/dist/router.cjs.js b/dist/router.cjs.js
index 0530a635727c39f3cc010dcf781240abbb103178..747b46c9e821e9de65286f8596adcccf4092e6ae 100644
--- a/dist/router.cjs.js
+++ b/dist/router.cjs.js
@@ -4388,10 +4388,17 @@ function getMatchesToLoad(history, state, matches, submission, location, isIniti
   // `shouldRevalidate` via `actionResult`
   let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;
   let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;
+  let sawError = false;
   let navigationMatches = boundaryMatches.filter((match, index) => {
     let {
       route
     } = match;
+
+    // Track when we've encountered an error opn initial load so we don't try
+    // to run any loaders below that
+    if (isInitialLoad && state.errors && state.errors[route.id] !== undefined) {
+      sawError = true;
+    }
     if (route.lazy) {
       // We haven't loaded this route yet so we don't know if it's got a loader!
       return true;
@@ -4400,6 +4407,9 @@ function getMatchesToLoad(history, state, matches, submission, location, isIniti
       return false;
     }
     if (isInitialLoad) {
+      if (sawError && state.loaderData[route.id] === undefined) {
+        return false;
+      }
       if (typeof route.loader !== "function" || route.loader.hydrate) {
         return true;
       }
diff --git a/dist/router.cjs.js.map b/dist/router.cjs.js.map
index 67c01dd3f73ba8a02651ab66da71ad856fc2b081..63c54c147a40059673a0ec154a16bf586e8e0fb9 100644
--- a/dist/router.cjs.js.map
+++ b/dist/router.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"router.cjs.js","sources":["../history.ts","../utils.ts","../router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => DataFunctionReturnValue\n  ) => Promise<DataStrategyResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n  fetcherKey: string | null;\n}\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface DataStrategyResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData, DataWithResponseInit\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<Record<string, DataStrategyResult>>;\n}\n\nexport interface AgnosticPatchRoutesOnNavigationFunction<\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> {\n  (opts: {\n    path: string;\n    matches: M[];\n    patch: (routeId: string | null, children: AgnosticRouteObject[]) => void;\n  }): void | Promise<void>;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: string[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nexport function matchRoutesImpl<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename: string,\n  allowPartial: boolean\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string,\n  allowPartial = false\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    let route = meta.route;\n\n    if (\n      !match &&\n      end &&\n      allowPartial &&\n      !routesMeta[routesMeta.length - 1].route.index\n    ) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false,\n        },\n        remainingPathname\n      );\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nexport function decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DataWithResponseInit<D> {\n  type: string = \"DataWithResponseInit\";\n  data: D;\n  init: ResponseInit | null;\n\n  constructor(data: D, init?: ResponseInit) {\n    this.data = data;\n    this.init = init || null;\n  }\n}\n\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nexport function data<D>(data: D, init?: number | ResponseInit) {\n  return new DataWithResponseInit(\n    data,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const replace: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  DataStrategyResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n  AgnosticPatchRoutesOnNavigationFunction,\n  DataWithResponseInit,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  matchRoutesImpl,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE DO NOT USE\n   *\n   * Patch additional children routes into an existing parent route\n   * @param routeId The parent route id or a callback function accepting `patch`\n   *                to perform batch patching\n   * @param children The additional children routes\n   */\n  patchRoutes(routeId: string | null, children: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  v7_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  unstable_patchRoutesOnNavigation?: AgnosticPatchRoutesOnNavigationFunction;\n  unstable_dataStrategy?: DataStrategyFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.unstable_patchRoutesOnNavigation;\n\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // FIFO queue of previously discovered routes to prevent re-calling on\n  // subsequent navigations to the same path\n  let discoveredRoutesMaxSize = 1000;\n  let discoveredRoutes = new Set<string>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(\n      initialMatches,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized: boolean;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(\n        null,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some((m) => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some((m) => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (\n        typeof m.route.loader === \"function\" &&\n        m.route.loader.hydrate === true\n      ) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: Set<string> = new Set();\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map<\n    string,\n    ReturnType<AgnosticPatchRoutesOnNavigationFunction>\n  >();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate: (() => void) | undefined = undefined;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (unblockBlockerHistoryUpdate) {\n          unblockBlockerHistoryUpdate();\n          unblockBlockerHistoryUpdate = undefined;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          let nextHistoryUpdatePromise = new Promise<void>((resolve) => {\n            unblockBlockerHistoryUpdate = resolve;\n          });\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked, after the url\n              // restoration is also complete.  See:\n              // https://github.com/remix-run/react-router/issues/11613\n              nextHistoryUpdatePromise.then(() => init.history.go(delta));\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      {\n        overrideNavigation: state.navigation,\n        // Proxy through any rending view transition\n        enableViewTransition: pendingViewTransitionEnabled === true,\n      }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        fogOfWar.active,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (\n          isErrorResult(result) &&\n          isRouteErrorResponse(result.error) &&\n          result.error.status === 404\n        ) {\n          pendingNavigationController = null;\n\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error,\n            },\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors,\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        state,\n        request,\n        [actionMatch],\n        matches,\n        null\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState =\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration);\n\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...(actionData !== undefined ? { actionData } : {}),\n          },\n          {\n            flushSync,\n          }\n        );\n      }\n\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: error,\n          },\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates: Partial<RouterState> = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getUpdatedActionData(\n    pendingActionResult: PendingActionResult | undefined\n  ): Record<string, RouteData> | null | undefined {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data as any,\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(\n    revalidatingFetchers: RevalidatingFetcher[]\n  ) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        undefined,\n        fetcher ? fetcher.data : undefined\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        fogOfWar.active,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      fogOfWar.active,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m: AgnosticDataRouteMatch) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId,\n        });\n        setFetcherError(key, routeId, error, { flushSync });\n        return true;\n      }\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      state,\n      fetchRequest,\n      [match],\n      requestMatches,\n      key\n    );\n    let actionResult = actionResults[match.route.id];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      state,\n      fetchRequest,\n      [match],\n      matches,\n      key\n    );\n    let result = results[match.route.id];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    isNavigation: boolean,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true || redirect.response.headers.has(\"X-Remix-Replace\")\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    state: RouterState,\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    fetcherKey: string | null\n  ): Promise<Record<string, DataResult>> {\n    let results: Record<string, DataStrategyResult>;\n    let dataResults: Record<string, DataResult> = {};\n    try {\n      results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        state,\n        request,\n        matchesToLoad,\n        matches,\n        fetcherKey,\n        manifest,\n        mapRouteProperties\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach((m) => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e,\n        };\n      });\n      return dataResults;\n    }\n\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result as Response;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            routeId,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          ),\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(\n          result\n        );\n      }\n    }\n\n    return dataResults;\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    state: RouterState,\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let currentMatches = state.matches;\n\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\n      \"loader\",\n      state,\n      request,\n      matchesToLoad,\n      matches,\n      null\n    );\n\n    let fetcherResultsPromise = Promise.all(\n      fetchersToLoad.map(async (f) => {\n        if (f.matches && f.match && f.controller) {\n          let results = await callDataStrategy(\n            \"loader\",\n            state,\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            [f.match],\n            f.matches,\n            f.key\n          );\n          let result = results[f.match.route.id];\n          // Fetcher results are keyed by fetcher key from here on out, not routeId\n          return { [f.key]: result };\n        } else {\n          return Promise.resolve({\n            [f.key]: {\n              type: ResultType.error,\n              error: getInternalRouterError(404, {\n                pathname: f.path,\n              }),\n            } as ErrorResult,\n          });\n        }\n      })\n    );\n\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce(\n      (acc, r) => Object.assign(acc, r),\n      {}\n    );\n\n    await Promise.all([\n      resolveNavigationDeferredResults(\n        matches,\n        loaderResults,\n        request.signal,\n        currentMatches,\n        state.loaderData\n      ),\n      resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname: string) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n\n    return { notFoundMatches: matches, route, error };\n  }\n\n  function handleDiscoverRouteError(\n    pathname: string,\n    discoverResult: DiscoverRoutesErrorResult\n  ) {\n    return {\n      boundaryId: findNearestBoundary(discoverResult.partialMatches).route.id,\n      error: getInternalRouterError(400, {\n        type: \"route-discovery\",\n        pathname,\n        message:\n          discoverResult.error != null && \"message\" in discoverResult.error\n            ? discoverResult.error\n            : String(discoverResult.error),\n      }),\n    };\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function checkFogOfWar(\n    matches: AgnosticDataRouteMatch[] | null,\n    routesToUse: AgnosticDataRouteObject[],\n    pathname: string\n  ): { active: boolean; matches: AgnosticDataRouteMatch[] | null } {\n    if (patchRoutesOnNavigationImpl) {\n      // Don't bother re-calling patchRouteOnMiss for a path we've already\n      // processed.  the last execution would have patched the route tree\n      // accordingly so `matches` here are already accurate.\n      if (discoveredRoutes.has(pathname)) {\n        return { active: false, matches };\n      }\n\n      if (!matches) {\n        let fogMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n\n    return { active: false, matches: null };\n  }\n\n  type DiscoverRoutesSuccessResult = {\n    type: \"success\";\n    matches: AgnosticDataRouteMatch[] | null;\n  };\n  type DiscoverRoutesErrorResult = {\n    type: \"error\";\n    error: any;\n    partialMatches: AgnosticDataRouteMatch[];\n  };\n  type DiscoverRoutesAbortedResult = { type: \"aborted\" };\n  type DiscoverRoutesResult =\n    | DiscoverRoutesSuccessResult\n    | DiscoverRoutesErrorResult\n    | DiscoverRoutesAbortedResult;\n\n  async function discoverRoutes(\n    matches: AgnosticDataRouteMatch[],\n    pathname: string,\n    signal: AbortSignal\n  ): Promise<DiscoverRoutesResult> {\n    let partialMatches: AgnosticDataRouteMatch[] | null = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      try {\n        await loadLazyRouteChildren(\n          patchRoutesOnNavigationImpl!,\n          pathname,\n          partialMatches,\n          routesToUse,\n          manifest,\n          mapRouteProperties,\n          pendingPatchRoutes,\n          signal\n        );\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: newMatches };\n      }\n\n      let newPartialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n\n      // Avoid loops if the second pass results in the same partial matches\n      if (\n        !newPartialMatches ||\n        (partialMatches.length === newPartialMatches.length &&\n          partialMatches.every(\n            (m, i) => m.route.id === newPartialMatches![i].route.id\n          ))\n      ) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: null };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function addToFifoQueue(path: string, queue: Set<string>) {\n    if (queue.size >= discoveredRoutesMaxSize) {\n      let first = queue.values().next().value;\n      queue.delete(first);\n    }\n    queue.add(path);\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  function patchRoutes(\n    routeId: string | null,\n    children: AgnosticRouteObject[]\n  ): void {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties\n    );\n\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          unstable_dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        unstable_dataStrategy\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      unstable_dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      unstable_dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null\n  ): Promise<Record<string, DataResult>> {\n    let results = await callDataStrategyImpl(\n      unstable_dataStrategy || defaultDataStrategy,\n      type,\n      null,\n      request,\n      matchesToLoad,\n      matches,\n      null,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    let dataResults: Record<string, DataResult> = {};\n    await Promise.all(\n      matches.map(async (match) => {\n        if (!(match.route.id in results)) {\n          return;\n        }\n        let result = results[match.route.id];\n        if (isRedirectDataStrategyResultResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            match.route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        dataResults[match.route.id] =\n          await convertDataStrategyResultToDataResult(result);\n      })\n    );\n    return dataResults;\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: Set<string>,\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[0]\n      : undefined;\n  let boundaryMatches = boundaryId\n    ? getLoaderMatchesUntilBoundary(matches, boundaryId)\n    : matches;\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Idempotent utility to execute patchRoutesOnNavigation() to lazily load route\n * definitions and update the routes/routeManifest\n */\nasync function loadLazyRouteChildren(\n  patchRoutesOnNavigationImpl: AgnosticPatchRoutesOnNavigationFunction,\n  path: string,\n  matches: AgnosticDataRouteMatch[],\n  routes: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  pendingRouteChildren: Map<\n    string,\n    ReturnType<typeof patchRoutesOnNavigationImpl>\n  >,\n  signal: AbortSignal\n) {\n  let key = [path, ...matches.map((m) => m.route.id)].join(\"-\");\n  try {\n    let pending = pendingRouteChildren.get(key);\n    if (!pending) {\n      pending = patchRoutesOnNavigationImpl({\n        path,\n        matches,\n        patch: (routeId, children) => {\n          if (!signal.aborted) {\n            patchRoutesImpl(\n              routeId,\n              children,\n              routes,\n              manifest,\n              mapRouteProperties\n            );\n          }\n        },\n      });\n      pendingRouteChildren.set(key, pending);\n    }\n\n    if (pending && isPromise<AgnosticRouteObject[]>(pending)) {\n      await pending;\n    }\n  } finally {\n    pendingRouteChildren.delete(key);\n  }\n}\n\nfunction patchRoutesImpl(\n  routeId: string | null,\n  children: AgnosticRouteObject[],\n  routesToUse: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction\n) {\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [routeId, \"patch\", String(route.children?.length || \"0\")],\n      manifest\n    );\n    if (route.children) {\n      route.children.push(...dataChildren);\n    } else {\n      route.children = dataChildren;\n    }\n  } else {\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [\"patch\", String(routesToUse.length || \"0\")],\n      manifest\n    );\n    routesToUse.push(...dataChildren);\n  }\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy({\n  matches,\n}: DataStrategyFunctionArgs): ReturnType<DataStrategyFunction> {\n  let matchesToLoad = matches.filter((m) => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map((m) => m.resolve()));\n  return results.reduce(\n    (acc, result, i) =>\n      Object.assign(acc, { [matchesToLoad[i].route.id]: result }),\n    {}\n  );\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  state: RouterState | null,\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  fetcherKey: string | null,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<Record<string, DataStrategyResult>> {\n  let loadRouteDefinitionsPromises = matches.map((m) =>\n    m.route.lazy\n      ? loadLazyRouteModule(m.route, mapRouteProperties, manifest)\n      : undefined\n  );\n\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some((m) => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve: DataStrategyMatch[\"resolve\"] = async (handlerOverride) => {\n      if (\n        handlerOverride &&\n        request.method === \"GET\" &&\n        (match.route.lazy || match.route.loader)\n      ) {\n        shouldLoad = true;\n      }\n      return shouldLoad\n        ? callLoaderOrAction(\n            type,\n            request,\n            match,\n            loadRoutePromise,\n            handlerOverride,\n            requestContext\n          )\n        : Promise.resolve({ type: ResultType.data, result: undefined });\n    };\n\n    return {\n      ...match,\n      shouldLoad,\n      resolve,\n    };\n  });\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext,\n  });\n\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n\n  return results;\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  loadRoutePromise: Promise<void> | undefined,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<DataStrategyResult> {\n  let result: DataStrategyResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<DataStrategyResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<DataStrategyResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<DataStrategyResult> = (async () => {\n      try {\n        let val = await (handlerOverride\n          ? handlerOverride((ctx: unknown) => actualHandler(ctx))\n          : actualHandler());\n        return { type: \"data\", result: val };\n      } catch (e) {\n        return { type: \"error\", result: e };\n      }\n    })();\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadRoutePromise,\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertDataStrategyResultToDataResult(\n  dataStrategyResult: DataStrategyResult\n): Promise<DataResult> {\n  let { result, type } = dataStrategyResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: result.init?.status,\n        };\n      }\n\n      // Convert thrown unstable_data() to ErrorResponse instances\n      result = new ErrorResponseImpl(\n        result.init?.status || 500,\n        undefined,\n        result.data\n      );\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers\n        ? new Headers(result.init.headers)\n        : undefined,\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach((match) => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: Record<string, DataResult>,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach((rf) => {\n    let { key, match, controller } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\" | \"route-discovery\";\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (type === \"route-discovery\") {\n      errorMessage =\n        `Unable to match URL \"${pathname}\" - the \\`unstable_patchRoutesOnNavigation()\\` ` +\n        `function threw the following error:\\n${message}`;\n    } else if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: Record<string, DataResult>\n): { key: string; result: RedirectResult } | undefined {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return { key, result };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isPromise<T = unknown>(val: unknown): val is Promise<T> {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\n\nfunction isDataStrategyResult(result: unknown): result is DataStrategyResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectDataStrategyResultResult(result: DataStrategyResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDataWithResponseInit(\n  value: any\n): value is DataWithResponseInit<unknown> {\n  return (\n    typeof value === \"object\" &&\n    value != null &&\n    \"type\" in value &&\n    \"data\" in value &&\n    \"init\" in value &&\n    value.type === \"DataWithResponseInit\"\n  );\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveNavigationDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  signal: AbortSignal,\n  currentMatches: AgnosticDataRouteMatch[],\n  currentLoaderData: RouteData\n) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then((result) => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveFetcherDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  revalidatingFetchers: RevalidatingFetcher[]\n) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, routeId, controller } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(\n        controller,\n        \"Expected an AbortController for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, controller.signal, true).then(\n        (result) => {\n          if (result) {\n            results[key] = result;\n          }\n        }\n      );\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n//#endregion\n"],"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_extends","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","assign","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","String","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","captureGroups","memo","paramName","splatValue","regexpSource","_","RegExp","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","DataWithResponseInit","constructor","type","AbortedDeferredError","DeferredData","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","cancel","abort","k","resolveData","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","dataStrategyImpl","unstable_dataStrategy","defaultDataStrategy","patchRoutesOnNavigationImpl","unstable_patchRoutesOnNavigation","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","v7_skipActionErrorRevalidation","unlistenHistory","discoveredRoutesMaxSize","discoveredRoutes","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","fogOfWar","checkFogOfWar","active","initialized","m","lazy","loader","errors","isRouteInitialized","hydrate","findIndex","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","pendingPatchRoutes","unblockBlockerHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","nextHistoryUpdatePromise","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","completeNavigation","_temp","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","enableViewTransition","unstable_viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","handleNavigational404","isHashChangeOnly","request","createClientSideRequest","pendingActionResult","findNearestBoundary","actionResult","handleAction","shortCircuited","routeId","isErrorResult","getLoadingNavigation","updatedMatches","handleLoaders","fetcherSubmission","getActionDataForCommit","isFogOfWar","getSubmittingNavigation","discoverResult","discoverRoutes","boundaryId","handleDiscoverRouteError","partialMatches","actionMatch","getTargetMatch","method","results","callDataStrategy","isRedirectResult","normalizeRedirectLocation","startRedirectNavigation","isDeferredResult","boundaryMatch","activeSubmission","getSubmissionFromNavigation","shouldUpdateNavigationState","getUpdatedActionData","matchesToLoad","revalidatingFetchers","getMatchesToLoad","cancelActiveDeferreds","updatedFetchers","markFetchRedirectsDone","updates","getUpdatedRevalidatingFetchers","rf","abortFetcher","abortPendingFetchRevalidations","f","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","revalidatingFetcher","getLoadingFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","detectAndHandle405Error","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResults","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","isNavigation","_temp2","redirectLocation","isDocumentReload","redirectHistoryAction","fetcherKey","dataResults","callDataStrategyImpl","isRedirectDataStrategyResultResult","normalizeRelativeRoutingRedirectResponse","convertDataStrategyResultToDataResult","fetchersToLoad","currentMatches","loaderResultsPromise","fetcherResultsPromise","all","resolveNavigationDeferredResults","resolveFetcherDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","_ref4","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","fogMatches","isNonHMR","loadLazyRouteChildren","newMatches","addToFifoQueue","newPartialMatches","queue","values","next","_internalSetRoutes","newRoutes","patchRoutes","patchRoutesImpl","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","v7_throwAbortReason","query","_temp3","requestContext","skipLoaderErrorBubbling","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp4","find","_result$activeDeferre","routeMatch","submit","loadRouteData","isDataStrategyResult","isRedirectResponse","isRouteRequest","throwStaticHandlerAbortedError","Location","loaderRequest","Request","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","reason","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","_ref5","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryMatches","isInitialLoad","skipActionErrorRevalidation","currentUrl","nextUrl","actionStatus","shouldSkipRevalidation","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","pendingRouteChildren","pending","patch","isPromise","_route$children","dataChildren","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","_ref6","shouldLoad","loadRouteDefinitionsPromises","dsMatches","loadRoutePromise","handlerOverride","callLoaderOrAction","staticContext","onReject","runHandler","handler","actualHandler","ctx","handlerPromise","val","handlerError","dataStrategyResult","contentType","isDataWithResponseInit","_result$init2","_result$init","isDeferredData","_result$init3","_result$init4","deferred","_result$init5","_result$init6","trimmedMatches","normalizedLocation","protocol","isSameBasename","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","_temp5","errorMessage","isRevalidatingLoader","unwrap","getAll","_window","transitions","sessionPositions","sessionStorage","getItem","setItem"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"router.cjs.js","sources":["../history.ts","../utils.ts","../router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => DataFunctionReturnValue\n  ) => Promise<DataStrategyResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n  fetcherKey: string | null;\n}\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface DataStrategyResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData, DataWithResponseInit\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<Record<string, DataStrategyResult>>;\n}\n\nexport interface AgnosticPatchRoutesOnNavigationFunction<\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> {\n  (opts: {\n    path: string;\n    matches: M[];\n    patch: (routeId: string | null, children: AgnosticRouteObject[]) => void;\n  }): void | Promise<void>;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: string[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nexport function matchRoutesImpl<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename: string,\n  allowPartial: boolean\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string,\n  allowPartial = false\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    let route = meta.route;\n\n    if (\n      !match &&\n      end &&\n      allowPartial &&\n      !routesMeta[routesMeta.length - 1].route.index\n    ) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false,\n        },\n        remainingPathname\n      );\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nexport function decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DataWithResponseInit<D> {\n  type: string = \"DataWithResponseInit\";\n  data: D;\n  init: ResponseInit | null;\n\n  constructor(data: D, init?: ResponseInit) {\n    this.data = data;\n    this.init = init || null;\n  }\n}\n\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nexport function data<D>(data: D, init?: number | ResponseInit) {\n  return new DataWithResponseInit(\n    data,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const replace: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  DataStrategyResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n  AgnosticPatchRoutesOnNavigationFunction,\n  DataWithResponseInit,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  matchRoutesImpl,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE DO NOT USE\n   *\n   * Patch additional children routes into an existing parent route\n   * @param routeId The parent route id or a callback function accepting `patch`\n   *                to perform batch patching\n   * @param children The additional children routes\n   */\n  patchRoutes(routeId: string | null, children: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  v7_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  unstable_patchRoutesOnNavigation?: AgnosticPatchRoutesOnNavigationFunction;\n  unstable_dataStrategy?: DataStrategyFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.unstable_patchRoutesOnNavigation;\n\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // FIFO queue of previously discovered routes to prevent re-calling on\n  // subsequent navigations to the same path\n  let discoveredRoutesMaxSize = 1000;\n  let discoveredRoutes = new Set<string>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(\n      initialMatches,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized: boolean;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(\n        null,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some((m) => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some((m) => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (\n        typeof m.route.loader === \"function\" &&\n        m.route.loader.hydrate === true\n      ) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: Set<string> = new Set();\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map<\n    string,\n    ReturnType<AgnosticPatchRoutesOnNavigationFunction>\n  >();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate: (() => void) | undefined = undefined;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (unblockBlockerHistoryUpdate) {\n          unblockBlockerHistoryUpdate();\n          unblockBlockerHistoryUpdate = undefined;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          let nextHistoryUpdatePromise = new Promise<void>((resolve) => {\n            unblockBlockerHistoryUpdate = resolve;\n          });\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked, after the url\n              // restoration is also complete.  See:\n              // https://github.com/remix-run/react-router/issues/11613\n              nextHistoryUpdatePromise.then(() => init.history.go(delta));\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      {\n        overrideNavigation: state.navigation,\n        // Proxy through any rending view transition\n        enableViewTransition: pendingViewTransitionEnabled === true,\n      }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        fogOfWar.active,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (\n          isErrorResult(result) &&\n          isRouteErrorResponse(result.error) &&\n          result.error.status === 404\n        ) {\n          pendingNavigationController = null;\n\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error,\n            },\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors,\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        state,\n        request,\n        [actionMatch],\n        matches,\n        null\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState =\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration);\n\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...(actionData !== undefined ? { actionData } : {}),\n          },\n          {\n            flushSync,\n          }\n        );\n      }\n\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: error,\n          },\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates: Partial<RouterState> = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getUpdatedActionData(\n    pendingActionResult: PendingActionResult | undefined\n  ): Record<string, RouteData> | null | undefined {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data as any,\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(\n    revalidatingFetchers: RevalidatingFetcher[]\n  ) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        undefined,\n        fetcher ? fetcher.data : undefined\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        fogOfWar.active,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      fogOfWar.active,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m: AgnosticDataRouteMatch) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId,\n        });\n        setFetcherError(key, routeId, error, { flushSync });\n        return true;\n      }\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      state,\n      fetchRequest,\n      [match],\n      requestMatches,\n      key\n    );\n    let actionResult = actionResults[match.route.id];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      state,\n      fetchRequest,\n      [match],\n      matches,\n      key\n    );\n    let result = results[match.route.id];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    isNavigation: boolean,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true || redirect.response.headers.has(\"X-Remix-Replace\")\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    state: RouterState,\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    fetcherKey: string | null\n  ): Promise<Record<string, DataResult>> {\n    let results: Record<string, DataStrategyResult>;\n    let dataResults: Record<string, DataResult> = {};\n    try {\n      results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        state,\n        request,\n        matchesToLoad,\n        matches,\n        fetcherKey,\n        manifest,\n        mapRouteProperties\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach((m) => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e,\n        };\n      });\n      return dataResults;\n    }\n\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result as Response;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            routeId,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          ),\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(\n          result\n        );\n      }\n    }\n\n    return dataResults;\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    state: RouterState,\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let currentMatches = state.matches;\n\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\n      \"loader\",\n      state,\n      request,\n      matchesToLoad,\n      matches,\n      null\n    );\n\n    let fetcherResultsPromise = Promise.all(\n      fetchersToLoad.map(async (f) => {\n        if (f.matches && f.match && f.controller) {\n          let results = await callDataStrategy(\n            \"loader\",\n            state,\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            [f.match],\n            f.matches,\n            f.key\n          );\n          let result = results[f.match.route.id];\n          // Fetcher results are keyed by fetcher key from here on out, not routeId\n          return { [f.key]: result };\n        } else {\n          return Promise.resolve({\n            [f.key]: {\n              type: ResultType.error,\n              error: getInternalRouterError(404, {\n                pathname: f.path,\n              }),\n            } as ErrorResult,\n          });\n        }\n      })\n    );\n\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce(\n      (acc, r) => Object.assign(acc, r),\n      {}\n    );\n\n    await Promise.all([\n      resolveNavigationDeferredResults(\n        matches,\n        loaderResults,\n        request.signal,\n        currentMatches,\n        state.loaderData\n      ),\n      resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname: string) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n\n    return { notFoundMatches: matches, route, error };\n  }\n\n  function handleDiscoverRouteError(\n    pathname: string,\n    discoverResult: DiscoverRoutesErrorResult\n  ) {\n    return {\n      boundaryId: findNearestBoundary(discoverResult.partialMatches).route.id,\n      error: getInternalRouterError(400, {\n        type: \"route-discovery\",\n        pathname,\n        message:\n          discoverResult.error != null && \"message\" in discoverResult.error\n            ? discoverResult.error\n            : String(discoverResult.error),\n      }),\n    };\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function checkFogOfWar(\n    matches: AgnosticDataRouteMatch[] | null,\n    routesToUse: AgnosticDataRouteObject[],\n    pathname: string\n  ): { active: boolean; matches: AgnosticDataRouteMatch[] | null } {\n    if (patchRoutesOnNavigationImpl) {\n      // Don't bother re-calling patchRouteOnMiss for a path we've already\n      // processed.  the last execution would have patched the route tree\n      // accordingly so `matches` here are already accurate.\n      if (discoveredRoutes.has(pathname)) {\n        return { active: false, matches };\n      }\n\n      if (!matches) {\n        let fogMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n\n    return { active: false, matches: null };\n  }\n\n  type DiscoverRoutesSuccessResult = {\n    type: \"success\";\n    matches: AgnosticDataRouteMatch[] | null;\n  };\n  type DiscoverRoutesErrorResult = {\n    type: \"error\";\n    error: any;\n    partialMatches: AgnosticDataRouteMatch[];\n  };\n  type DiscoverRoutesAbortedResult = { type: \"aborted\" };\n  type DiscoverRoutesResult =\n    | DiscoverRoutesSuccessResult\n    | DiscoverRoutesErrorResult\n    | DiscoverRoutesAbortedResult;\n\n  async function discoverRoutes(\n    matches: AgnosticDataRouteMatch[],\n    pathname: string,\n    signal: AbortSignal\n  ): Promise<DiscoverRoutesResult> {\n    let partialMatches: AgnosticDataRouteMatch[] | null = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      try {\n        await loadLazyRouteChildren(\n          patchRoutesOnNavigationImpl!,\n          pathname,\n          partialMatches,\n          routesToUse,\n          manifest,\n          mapRouteProperties,\n          pendingPatchRoutes,\n          signal\n        );\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: newMatches };\n      }\n\n      let newPartialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n\n      // Avoid loops if the second pass results in the same partial matches\n      if (\n        !newPartialMatches ||\n        (partialMatches.length === newPartialMatches.length &&\n          partialMatches.every(\n            (m, i) => m.route.id === newPartialMatches![i].route.id\n          ))\n      ) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: null };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function addToFifoQueue(path: string, queue: Set<string>) {\n    if (queue.size >= discoveredRoutesMaxSize) {\n      let first = queue.values().next().value;\n      queue.delete(first);\n    }\n    queue.add(path);\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  function patchRoutes(\n    routeId: string | null,\n    children: AgnosticRouteObject[]\n  ): void {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties\n    );\n\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          unstable_dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        unstable_dataStrategy\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      unstable_dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      unstable_dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null\n  ): Promise<Record<string, DataResult>> {\n    let results = await callDataStrategyImpl(\n      unstable_dataStrategy || defaultDataStrategy,\n      type,\n      null,\n      request,\n      matchesToLoad,\n      matches,\n      null,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    let dataResults: Record<string, DataResult> = {};\n    await Promise.all(\n      matches.map(async (match) => {\n        if (!(match.route.id in results)) {\n          return;\n        }\n        let result = results[match.route.id];\n        if (isRedirectDataStrategyResultResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            match.route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        dataResults[match.route.id] =\n          await convertDataStrategyResultToDataResult(result);\n      })\n    );\n    return dataResults;\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: Set<string>,\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[0]\n      : undefined;\n  let boundaryMatches = boundaryId\n    ? getLoaderMatchesUntilBoundary(matches, boundaryId)\n    : matches;\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let sawError = false;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n\n    // Track when we've encountered an error opn initial load so we don't try\n    // to run any loaders below that\n    if (isInitialLoad && state.errors && state.errors[route.id] !== undefined) {\n      sawError = true;\n    }\n\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (sawError && state.loaderData[route.id] === undefined) {\n        return false;\n      }\n\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Idempotent utility to execute patchRoutesOnNavigation() to lazily load route\n * definitions and update the routes/routeManifest\n */\nasync function loadLazyRouteChildren(\n  patchRoutesOnNavigationImpl: AgnosticPatchRoutesOnNavigationFunction,\n  path: string,\n  matches: AgnosticDataRouteMatch[],\n  routes: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  pendingRouteChildren: Map<\n    string,\n    ReturnType<typeof patchRoutesOnNavigationImpl>\n  >,\n  signal: AbortSignal\n) {\n  let key = [path, ...matches.map((m) => m.route.id)].join(\"-\");\n  try {\n    let pending = pendingRouteChildren.get(key);\n    if (!pending) {\n      pending = patchRoutesOnNavigationImpl({\n        path,\n        matches,\n        patch: (routeId, children) => {\n          if (!signal.aborted) {\n            patchRoutesImpl(\n              routeId,\n              children,\n              routes,\n              manifest,\n              mapRouteProperties\n            );\n          }\n        },\n      });\n      pendingRouteChildren.set(key, pending);\n    }\n\n    if (pending && isPromise<AgnosticRouteObject[]>(pending)) {\n      await pending;\n    }\n  } finally {\n    pendingRouteChildren.delete(key);\n  }\n}\n\nfunction patchRoutesImpl(\n  routeId: string | null,\n  children: AgnosticRouteObject[],\n  routesToUse: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction\n) {\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [routeId, \"patch\", String(route.children?.length || \"0\")],\n      manifest\n    );\n    if (route.children) {\n      route.children.push(...dataChildren);\n    } else {\n      route.children = dataChildren;\n    }\n  } else {\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [\"patch\", String(routesToUse.length || \"0\")],\n      manifest\n    );\n    routesToUse.push(...dataChildren);\n  }\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy({\n  matches,\n}: DataStrategyFunctionArgs): ReturnType<DataStrategyFunction> {\n  let matchesToLoad = matches.filter((m) => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map((m) => m.resolve()));\n  return results.reduce(\n    (acc, result, i) =>\n      Object.assign(acc, { [matchesToLoad[i].route.id]: result }),\n    {}\n  );\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  state: RouterState | null,\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  fetcherKey: string | null,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<Record<string, DataStrategyResult>> {\n  let loadRouteDefinitionsPromises = matches.map((m) =>\n    m.route.lazy\n      ? loadLazyRouteModule(m.route, mapRouteProperties, manifest)\n      : undefined\n  );\n\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some((m) => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve: DataStrategyMatch[\"resolve\"] = async (handlerOverride) => {\n      if (\n        handlerOverride &&\n        request.method === \"GET\" &&\n        (match.route.lazy || match.route.loader)\n      ) {\n        shouldLoad = true;\n      }\n      return shouldLoad\n        ? callLoaderOrAction(\n            type,\n            request,\n            match,\n            loadRoutePromise,\n            handlerOverride,\n            requestContext\n          )\n        : Promise.resolve({ type: ResultType.data, result: undefined });\n    };\n\n    return {\n      ...match,\n      shouldLoad,\n      resolve,\n    };\n  });\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext,\n  });\n\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n\n  return results;\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  loadRoutePromise: Promise<void> | undefined,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<DataStrategyResult> {\n  let result: DataStrategyResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<DataStrategyResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<DataStrategyResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<DataStrategyResult> = (async () => {\n      try {\n        let val = await (handlerOverride\n          ? handlerOverride((ctx: unknown) => actualHandler(ctx))\n          : actualHandler());\n        return { type: \"data\", result: val };\n      } catch (e) {\n        return { type: \"error\", result: e };\n      }\n    })();\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadRoutePromise,\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertDataStrategyResultToDataResult(\n  dataStrategyResult: DataStrategyResult\n): Promise<DataResult> {\n  let { result, type } = dataStrategyResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: result.init?.status,\n        };\n      }\n\n      // Convert thrown unstable_data() to ErrorResponse instances\n      result = new ErrorResponseImpl(\n        result.init?.status || 500,\n        undefined,\n        result.data\n      );\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers\n        ? new Headers(result.init.headers)\n        : undefined,\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach((match) => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: Record<string, DataResult>,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach((rf) => {\n    let { key, match, controller } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\" | \"route-discovery\";\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (type === \"route-discovery\") {\n      errorMessage =\n        `Unable to match URL \"${pathname}\" - the \\`unstable_patchRoutesOnNavigation()\\` ` +\n        `function threw the following error:\\n${message}`;\n    } else if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: Record<string, DataResult>\n): { key: string; result: RedirectResult } | undefined {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return { key, result };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isPromise<T = unknown>(val: unknown): val is Promise<T> {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\n\nfunction isDataStrategyResult(result: unknown): result is DataStrategyResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectDataStrategyResultResult(result: DataStrategyResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDataWithResponseInit(\n  value: any\n): value is DataWithResponseInit<unknown> {\n  return (\n    typeof value === \"object\" &&\n    value != null &&\n    \"type\" in value &&\n    \"data\" in value &&\n    \"init\" in value &&\n    value.type === \"DataWithResponseInit\"\n  );\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveNavigationDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  signal: AbortSignal,\n  currentMatches: AgnosticDataRouteMatch[],\n  currentLoaderData: RouteData\n) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then((result) => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveFetcherDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  revalidatingFetchers: RevalidatingFetcher[]\n) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, routeId, controller } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(\n        controller,\n        \"Expected an AbortController for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, controller.signal, true).then(\n        (result) => {\n          if (result) {\n            results[key] = result;\n          }\n        }\n      );\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n//#endregion\n"],"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_extends","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","assign","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","String","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","captureGroups","memo","paramName","splatValue","regexpSource","_","RegExp","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","DataWithResponseInit","constructor","type","AbortedDeferredError","DeferredData","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","cancel","abort","k","resolveData","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","dataStrategyImpl","unstable_dataStrategy","defaultDataStrategy","patchRoutesOnNavigationImpl","unstable_patchRoutesOnNavigation","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","v7_skipActionErrorRevalidation","unlistenHistory","discoveredRoutesMaxSize","discoveredRoutes","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","fogOfWar","checkFogOfWar","active","initialized","m","lazy","loader","errors","isRouteInitialized","hydrate","findIndex","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","pendingPatchRoutes","unblockBlockerHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","nextHistoryUpdatePromise","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","completeNavigation","_temp","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","enableViewTransition","unstable_viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","handleNavigational404","isHashChangeOnly","request","createClientSideRequest","pendingActionResult","findNearestBoundary","actionResult","handleAction","shortCircuited","routeId","isErrorResult","getLoadingNavigation","updatedMatches","handleLoaders","fetcherSubmission","getActionDataForCommit","isFogOfWar","getSubmittingNavigation","discoverResult","discoverRoutes","boundaryId","handleDiscoverRouteError","partialMatches","actionMatch","getTargetMatch","method","results","callDataStrategy","isRedirectResult","normalizeRedirectLocation","startRedirectNavigation","isDeferredResult","boundaryMatch","activeSubmission","getSubmissionFromNavigation","shouldUpdateNavigationState","getUpdatedActionData","matchesToLoad","revalidatingFetchers","getMatchesToLoad","cancelActiveDeferreds","updatedFetchers","markFetchRedirectsDone","updates","getUpdatedRevalidatingFetchers","rf","abortFetcher","abortPendingFetchRevalidations","f","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","revalidatingFetcher","getLoadingFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","detectAndHandle405Error","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResults","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","isNavigation","_temp2","redirectLocation","isDocumentReload","redirectHistoryAction","fetcherKey","dataResults","callDataStrategyImpl","isRedirectDataStrategyResultResult","normalizeRelativeRoutingRedirectResponse","convertDataStrategyResultToDataResult","fetchersToLoad","currentMatches","loaderResultsPromise","fetcherResultsPromise","all","resolveNavigationDeferredResults","resolveFetcherDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","_ref4","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","fogMatches","isNonHMR","loadLazyRouteChildren","newMatches","addToFifoQueue","newPartialMatches","queue","values","next","_internalSetRoutes","newRoutes","patchRoutes","patchRoutesImpl","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","v7_throwAbortReason","query","_temp3","requestContext","skipLoaderErrorBubbling","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp4","find","_result$activeDeferre","routeMatch","submit","loadRouteData","isDataStrategyResult","isRedirectResponse","isRouteRequest","throwStaticHandlerAbortedError","Location","loaderRequest","Request","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","reason","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","_ref5","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryMatches","isInitialLoad","skipActionErrorRevalidation","currentUrl","nextUrl","actionStatus","shouldSkipRevalidation","sawError","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","pendingRouteChildren","pending","patch","isPromise","_route$children","dataChildren","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","_ref6","shouldLoad","loadRouteDefinitionsPromises","dsMatches","loadRoutePromise","handlerOverride","callLoaderOrAction","staticContext","onReject","runHandler","handler","actualHandler","ctx","handlerPromise","val","handlerError","dataStrategyResult","contentType","isDataWithResponseInit","_result$init2","_result$init","isDeferredData","_result$init3","_result$init4","deferred","_result$init5","_result$init6","trimmedMatches","normalizedLocation","protocol","isSameBasename","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","_temp5","errorMessage","isRevalidatingLoader","unwrap","getAll","_window","transitions","sessionPositions","sessionStorage","getItem","setItem"],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/router.js b/dist/router.js
index 1f408d1e2a9ea2eaf147164175dc4f3912020742..37f91815eb7108fda6dfc7f05d9e3fad775f117f 100644
--- a/dist/router.js
+++ b/dist/router.js
@@ -3895,10 +3895,16 @@ function getMatchesToLoad(history, state, matches, submission, location, isIniti
   // `shouldRevalidate` via `actionResult`
   let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;
   let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;
+  let sawError = false;
   let navigationMatches = boundaryMatches.filter((match, index) => {
     let {
       route
     } = match;
+    // Track when we've encountered an error opn initial load so we don't try
+    // to run any loaders below that
+    if (isInitialLoad && state.errors && state.errors[route.id] !== undefined) {
+      sawError = true;
+    }
     if (route.lazy) {
       // We haven't loaded this route yet so we don't know if it's got a loader!
       return true;
@@ -3907,6 +3913,9 @@ function getMatchesToLoad(history, state, matches, submission, location, isIniti
       return false;
     }
     if (isInitialLoad) {
+      if (sawError && state.loaderData[route.id] === undefined) {
+        return false;
+      }
       if (typeof route.loader !== "function" || route.loader.hydrate) {
         return true;
       }
diff --git a/dist/router.js.map b/dist/router.js.map
index 2756a825ac37f2f8053838cf2f4e57ec75b20856..4a03bf2c663a8295f91f36f592dcc870034f593a 100644
--- a/dist/router.js.map
+++ b/dist/router.js.map
@@ -1 +1 @@
-{"version":3,"file":"router.js","sources":["../history.ts","../utils.ts","../router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => DataFunctionReturnValue\n  ) => Promise<DataStrategyResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n  fetcherKey: string | null;\n}\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface DataStrategyResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData, DataWithResponseInit\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<Record<string, DataStrategyResult>>;\n}\n\nexport interface AgnosticPatchRoutesOnNavigationFunction<\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> {\n  (opts: {\n    path: string;\n    matches: M[];\n    patch: (routeId: string | null, children: AgnosticRouteObject[]) => void;\n  }): void | Promise<void>;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: string[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nexport function matchRoutesImpl<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename: string,\n  allowPartial: boolean\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string,\n  allowPartial = false\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    let route = meta.route;\n\n    if (\n      !match &&\n      end &&\n      allowPartial &&\n      !routesMeta[routesMeta.length - 1].route.index\n    ) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false,\n        },\n        remainingPathname\n      );\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nexport function decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DataWithResponseInit<D> {\n  type: string = \"DataWithResponseInit\";\n  data: D;\n  init: ResponseInit | null;\n\n  constructor(data: D, init?: ResponseInit) {\n    this.data = data;\n    this.init = init || null;\n  }\n}\n\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nexport function data<D>(data: D, init?: number | ResponseInit) {\n  return new DataWithResponseInit(\n    data,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const replace: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  DataStrategyResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n  AgnosticPatchRoutesOnNavigationFunction,\n  DataWithResponseInit,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  matchRoutesImpl,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE DO NOT USE\n   *\n   * Patch additional children routes into an existing parent route\n   * @param routeId The parent route id or a callback function accepting `patch`\n   *                to perform batch patching\n   * @param children The additional children routes\n   */\n  patchRoutes(routeId: string | null, children: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  v7_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  unstable_patchRoutesOnNavigation?: AgnosticPatchRoutesOnNavigationFunction;\n  unstable_dataStrategy?: DataStrategyFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.unstable_patchRoutesOnNavigation;\n\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // FIFO queue of previously discovered routes to prevent re-calling on\n  // subsequent navigations to the same path\n  let discoveredRoutesMaxSize = 1000;\n  let discoveredRoutes = new Set<string>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(\n      initialMatches,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized: boolean;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(\n        null,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some((m) => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some((m) => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (\n        typeof m.route.loader === \"function\" &&\n        m.route.loader.hydrate === true\n      ) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: Set<string> = new Set();\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map<\n    string,\n    ReturnType<AgnosticPatchRoutesOnNavigationFunction>\n  >();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate: (() => void) | undefined = undefined;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (unblockBlockerHistoryUpdate) {\n          unblockBlockerHistoryUpdate();\n          unblockBlockerHistoryUpdate = undefined;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          let nextHistoryUpdatePromise = new Promise<void>((resolve) => {\n            unblockBlockerHistoryUpdate = resolve;\n          });\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked, after the url\n              // restoration is also complete.  See:\n              // https://github.com/remix-run/react-router/issues/11613\n              nextHistoryUpdatePromise.then(() => init.history.go(delta));\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      {\n        overrideNavigation: state.navigation,\n        // Proxy through any rending view transition\n        enableViewTransition: pendingViewTransitionEnabled === true,\n      }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        fogOfWar.active,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (\n          isErrorResult(result) &&\n          isRouteErrorResponse(result.error) &&\n          result.error.status === 404\n        ) {\n          pendingNavigationController = null;\n\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error,\n            },\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors,\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        state,\n        request,\n        [actionMatch],\n        matches,\n        null\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState =\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration);\n\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...(actionData !== undefined ? { actionData } : {}),\n          },\n          {\n            flushSync,\n          }\n        );\n      }\n\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: error,\n          },\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates: Partial<RouterState> = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getUpdatedActionData(\n    pendingActionResult: PendingActionResult | undefined\n  ): Record<string, RouteData> | null | undefined {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data as any,\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(\n    revalidatingFetchers: RevalidatingFetcher[]\n  ) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        undefined,\n        fetcher ? fetcher.data : undefined\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        fogOfWar.active,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      fogOfWar.active,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m: AgnosticDataRouteMatch) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId,\n        });\n        setFetcherError(key, routeId, error, { flushSync });\n        return true;\n      }\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      state,\n      fetchRequest,\n      [match],\n      requestMatches,\n      key\n    );\n    let actionResult = actionResults[match.route.id];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      state,\n      fetchRequest,\n      [match],\n      matches,\n      key\n    );\n    let result = results[match.route.id];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    isNavigation: boolean,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true || redirect.response.headers.has(\"X-Remix-Replace\")\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    state: RouterState,\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    fetcherKey: string | null\n  ): Promise<Record<string, DataResult>> {\n    let results: Record<string, DataStrategyResult>;\n    let dataResults: Record<string, DataResult> = {};\n    try {\n      results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        state,\n        request,\n        matchesToLoad,\n        matches,\n        fetcherKey,\n        manifest,\n        mapRouteProperties\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach((m) => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e,\n        };\n      });\n      return dataResults;\n    }\n\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result as Response;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            routeId,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          ),\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(\n          result\n        );\n      }\n    }\n\n    return dataResults;\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    state: RouterState,\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let currentMatches = state.matches;\n\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\n      \"loader\",\n      state,\n      request,\n      matchesToLoad,\n      matches,\n      null\n    );\n\n    let fetcherResultsPromise = Promise.all(\n      fetchersToLoad.map(async (f) => {\n        if (f.matches && f.match && f.controller) {\n          let results = await callDataStrategy(\n            \"loader\",\n            state,\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            [f.match],\n            f.matches,\n            f.key\n          );\n          let result = results[f.match.route.id];\n          // Fetcher results are keyed by fetcher key from here on out, not routeId\n          return { [f.key]: result };\n        } else {\n          return Promise.resolve({\n            [f.key]: {\n              type: ResultType.error,\n              error: getInternalRouterError(404, {\n                pathname: f.path,\n              }),\n            } as ErrorResult,\n          });\n        }\n      })\n    );\n\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce(\n      (acc, r) => Object.assign(acc, r),\n      {}\n    );\n\n    await Promise.all([\n      resolveNavigationDeferredResults(\n        matches,\n        loaderResults,\n        request.signal,\n        currentMatches,\n        state.loaderData\n      ),\n      resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname: string) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n\n    return { notFoundMatches: matches, route, error };\n  }\n\n  function handleDiscoverRouteError(\n    pathname: string,\n    discoverResult: DiscoverRoutesErrorResult\n  ) {\n    return {\n      boundaryId: findNearestBoundary(discoverResult.partialMatches).route.id,\n      error: getInternalRouterError(400, {\n        type: \"route-discovery\",\n        pathname,\n        message:\n          discoverResult.error != null && \"message\" in discoverResult.error\n            ? discoverResult.error\n            : String(discoverResult.error),\n      }),\n    };\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function checkFogOfWar(\n    matches: AgnosticDataRouteMatch[] | null,\n    routesToUse: AgnosticDataRouteObject[],\n    pathname: string\n  ): { active: boolean; matches: AgnosticDataRouteMatch[] | null } {\n    if (patchRoutesOnNavigationImpl) {\n      // Don't bother re-calling patchRouteOnMiss for a path we've already\n      // processed.  the last execution would have patched the route tree\n      // accordingly so `matches` here are already accurate.\n      if (discoveredRoutes.has(pathname)) {\n        return { active: false, matches };\n      }\n\n      if (!matches) {\n        let fogMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n\n    return { active: false, matches: null };\n  }\n\n  type DiscoverRoutesSuccessResult = {\n    type: \"success\";\n    matches: AgnosticDataRouteMatch[] | null;\n  };\n  type DiscoverRoutesErrorResult = {\n    type: \"error\";\n    error: any;\n    partialMatches: AgnosticDataRouteMatch[];\n  };\n  type DiscoverRoutesAbortedResult = { type: \"aborted\" };\n  type DiscoverRoutesResult =\n    | DiscoverRoutesSuccessResult\n    | DiscoverRoutesErrorResult\n    | DiscoverRoutesAbortedResult;\n\n  async function discoverRoutes(\n    matches: AgnosticDataRouteMatch[],\n    pathname: string,\n    signal: AbortSignal\n  ): Promise<DiscoverRoutesResult> {\n    let partialMatches: AgnosticDataRouteMatch[] | null = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      try {\n        await loadLazyRouteChildren(\n          patchRoutesOnNavigationImpl!,\n          pathname,\n          partialMatches,\n          routesToUse,\n          manifest,\n          mapRouteProperties,\n          pendingPatchRoutes,\n          signal\n        );\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: newMatches };\n      }\n\n      let newPartialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n\n      // Avoid loops if the second pass results in the same partial matches\n      if (\n        !newPartialMatches ||\n        (partialMatches.length === newPartialMatches.length &&\n          partialMatches.every(\n            (m, i) => m.route.id === newPartialMatches![i].route.id\n          ))\n      ) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: null };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function addToFifoQueue(path: string, queue: Set<string>) {\n    if (queue.size >= discoveredRoutesMaxSize) {\n      let first = queue.values().next().value;\n      queue.delete(first);\n    }\n    queue.add(path);\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  function patchRoutes(\n    routeId: string | null,\n    children: AgnosticRouteObject[]\n  ): void {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties\n    );\n\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          unstable_dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        unstable_dataStrategy\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      unstable_dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      unstable_dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null\n  ): Promise<Record<string, DataResult>> {\n    let results = await callDataStrategyImpl(\n      unstable_dataStrategy || defaultDataStrategy,\n      type,\n      null,\n      request,\n      matchesToLoad,\n      matches,\n      null,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    let dataResults: Record<string, DataResult> = {};\n    await Promise.all(\n      matches.map(async (match) => {\n        if (!(match.route.id in results)) {\n          return;\n        }\n        let result = results[match.route.id];\n        if (isRedirectDataStrategyResultResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            match.route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        dataResults[match.route.id] =\n          await convertDataStrategyResultToDataResult(result);\n      })\n    );\n    return dataResults;\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: Set<string>,\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[0]\n      : undefined;\n  let boundaryMatches = boundaryId\n    ? getLoaderMatchesUntilBoundary(matches, boundaryId)\n    : matches;\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Idempotent utility to execute patchRoutesOnNavigation() to lazily load route\n * definitions and update the routes/routeManifest\n */\nasync function loadLazyRouteChildren(\n  patchRoutesOnNavigationImpl: AgnosticPatchRoutesOnNavigationFunction,\n  path: string,\n  matches: AgnosticDataRouteMatch[],\n  routes: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  pendingRouteChildren: Map<\n    string,\n    ReturnType<typeof patchRoutesOnNavigationImpl>\n  >,\n  signal: AbortSignal\n) {\n  let key = [path, ...matches.map((m) => m.route.id)].join(\"-\");\n  try {\n    let pending = pendingRouteChildren.get(key);\n    if (!pending) {\n      pending = patchRoutesOnNavigationImpl({\n        path,\n        matches,\n        patch: (routeId, children) => {\n          if (!signal.aborted) {\n            patchRoutesImpl(\n              routeId,\n              children,\n              routes,\n              manifest,\n              mapRouteProperties\n            );\n          }\n        },\n      });\n      pendingRouteChildren.set(key, pending);\n    }\n\n    if (pending && isPromise<AgnosticRouteObject[]>(pending)) {\n      await pending;\n    }\n  } finally {\n    pendingRouteChildren.delete(key);\n  }\n}\n\nfunction patchRoutesImpl(\n  routeId: string | null,\n  children: AgnosticRouteObject[],\n  routesToUse: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction\n) {\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [routeId, \"patch\", String(route.children?.length || \"0\")],\n      manifest\n    );\n    if (route.children) {\n      route.children.push(...dataChildren);\n    } else {\n      route.children = dataChildren;\n    }\n  } else {\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [\"patch\", String(routesToUse.length || \"0\")],\n      manifest\n    );\n    routesToUse.push(...dataChildren);\n  }\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy({\n  matches,\n}: DataStrategyFunctionArgs): ReturnType<DataStrategyFunction> {\n  let matchesToLoad = matches.filter((m) => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map((m) => m.resolve()));\n  return results.reduce(\n    (acc, result, i) =>\n      Object.assign(acc, { [matchesToLoad[i].route.id]: result }),\n    {}\n  );\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  state: RouterState | null,\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  fetcherKey: string | null,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<Record<string, DataStrategyResult>> {\n  let loadRouteDefinitionsPromises = matches.map((m) =>\n    m.route.lazy\n      ? loadLazyRouteModule(m.route, mapRouteProperties, manifest)\n      : undefined\n  );\n\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some((m) => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve: DataStrategyMatch[\"resolve\"] = async (handlerOverride) => {\n      if (\n        handlerOverride &&\n        request.method === \"GET\" &&\n        (match.route.lazy || match.route.loader)\n      ) {\n        shouldLoad = true;\n      }\n      return shouldLoad\n        ? callLoaderOrAction(\n            type,\n            request,\n            match,\n            loadRoutePromise,\n            handlerOverride,\n            requestContext\n          )\n        : Promise.resolve({ type: ResultType.data, result: undefined });\n    };\n\n    return {\n      ...match,\n      shouldLoad,\n      resolve,\n    };\n  });\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext,\n  });\n\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n\n  return results;\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  loadRoutePromise: Promise<void> | undefined,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<DataStrategyResult> {\n  let result: DataStrategyResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<DataStrategyResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<DataStrategyResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<DataStrategyResult> = (async () => {\n      try {\n        let val = await (handlerOverride\n          ? handlerOverride((ctx: unknown) => actualHandler(ctx))\n          : actualHandler());\n        return { type: \"data\", result: val };\n      } catch (e) {\n        return { type: \"error\", result: e };\n      }\n    })();\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadRoutePromise,\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertDataStrategyResultToDataResult(\n  dataStrategyResult: DataStrategyResult\n): Promise<DataResult> {\n  let { result, type } = dataStrategyResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: result.init?.status,\n        };\n      }\n\n      // Convert thrown unstable_data() to ErrorResponse instances\n      result = new ErrorResponseImpl(\n        result.init?.status || 500,\n        undefined,\n        result.data\n      );\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers\n        ? new Headers(result.init.headers)\n        : undefined,\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach((match) => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: Record<string, DataResult>,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach((rf) => {\n    let { key, match, controller } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\" | \"route-discovery\";\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (type === \"route-discovery\") {\n      errorMessage =\n        `Unable to match URL \"${pathname}\" - the \\`unstable_patchRoutesOnNavigation()\\` ` +\n        `function threw the following error:\\n${message}`;\n    } else if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: Record<string, DataResult>\n): { key: string; result: RedirectResult } | undefined {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return { key, result };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isPromise<T = unknown>(val: unknown): val is Promise<T> {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\n\nfunction isDataStrategyResult(result: unknown): result is DataStrategyResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectDataStrategyResultResult(result: DataStrategyResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDataWithResponseInit(\n  value: any\n): value is DataWithResponseInit<unknown> {\n  return (\n    typeof value === \"object\" &&\n    value != null &&\n    \"type\" in value &&\n    \"data\" in value &&\n    \"init\" in value &&\n    value.type === \"DataWithResponseInit\"\n  );\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveNavigationDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  signal: AbortSignal,\n  currentMatches: AgnosticDataRouteMatch[],\n  currentLoaderData: RouteData\n) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then((result) => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveFetcherDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  revalidatingFetchers: RevalidatingFetcher[]\n) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, routeId, controller } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(\n        controller,\n        \"Expected an AbortController for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, controller.signal, true).then(\n        (result) => {\n          if (result) {\n            results[key] = result;\n          }\n        }\n      );\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n//#endregion\n"],"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_extends","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","assign","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","String","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","captureGroups","memo","paramName","splatValue","regexpSource","_","RegExp","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","DataWithResponseInit","constructor","type","AbortedDeferredError","DeferredData","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","cancel","abort","k","resolveData","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","dataStrategyImpl","unstable_dataStrategy","defaultDataStrategy","patchRoutesOnNavigationImpl","unstable_patchRoutesOnNavigation","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","v7_skipActionErrorRevalidation","unlistenHistory","discoveredRoutesMaxSize","discoveredRoutes","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","fogOfWar","checkFogOfWar","active","initialized","m","lazy","loader","errors","isRouteInitialized","hydrate","findIndex","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","pendingPatchRoutes","unblockBlockerHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","nextHistoryUpdatePromise","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","completeNavigation","_temp","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","enableViewTransition","unstable_viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","handleNavigational404","isHashChangeOnly","request","createClientSideRequest","pendingActionResult","findNearestBoundary","actionResult","handleAction","shortCircuited","routeId","isErrorResult","getLoadingNavigation","updatedMatches","handleLoaders","fetcherSubmission","getActionDataForCommit","isFogOfWar","getSubmittingNavigation","discoverResult","discoverRoutes","boundaryId","handleDiscoverRouteError","partialMatches","actionMatch","getTargetMatch","method","results","callDataStrategy","isRedirectResult","normalizeRedirectLocation","startRedirectNavigation","isDeferredResult","boundaryMatch","activeSubmission","getSubmissionFromNavigation","shouldUpdateNavigationState","getUpdatedActionData","matchesToLoad","revalidatingFetchers","getMatchesToLoad","cancelActiveDeferreds","updatedFetchers","markFetchRedirectsDone","updates","getUpdatedRevalidatingFetchers","rf","abortFetcher","abortPendingFetchRevalidations","f","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","revalidatingFetcher","getLoadingFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","detectAndHandle405Error","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResults","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","isNavigation","_temp2","redirectLocation","isDocumentReload","redirectHistoryAction","fetcherKey","dataResults","callDataStrategyImpl","isRedirectDataStrategyResultResult","normalizeRelativeRoutingRedirectResponse","convertDataStrategyResultToDataResult","fetchersToLoad","currentMatches","loaderResultsPromise","fetcherResultsPromise","all","resolveNavigationDeferredResults","resolveFetcherDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","_ref4","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","fogMatches","isNonHMR","loadLazyRouteChildren","newMatches","addToFifoQueue","newPartialMatches","queue","values","next","_internalSetRoutes","newRoutes","patchRoutes","patchRoutesImpl","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","v7_throwAbortReason","query","_temp3","requestContext","skipLoaderErrorBubbling","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp4","find","_result$activeDeferre","routeMatch","submit","loadRouteData","isDataStrategyResult","isRedirectResponse","isRouteRequest","throwStaticHandlerAbortedError","Location","loaderRequest","Request","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","reason","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","_ref5","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryMatches","isInitialLoad","skipActionErrorRevalidation","currentUrl","nextUrl","actionStatus","shouldSkipRevalidation","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","pendingRouteChildren","pending","patch","isPromise","_route$children","dataChildren","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","_ref6","shouldLoad","loadRouteDefinitionsPromises","dsMatches","loadRoutePromise","handlerOverride","callLoaderOrAction","staticContext","onReject","runHandler","handler","actualHandler","ctx","handlerPromise","val","handlerError","dataStrategyResult","contentType","isDataWithResponseInit","_result$init2","_result$init","isDeferredData","_result$init3","_result$init4","deferred","_result$init5","_result$init6","trimmedMatches","normalizedLocation","protocol","isSameBasename","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","_temp5","errorMessage","isRevalidatingLoader","unwrap","getAll","_window","transitions","sessionPositions","sessionStorage","getItem","setItem"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"router.js","sources":["../history.ts","../utils.ts","../router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => DataFunctionReturnValue\n  ) => Promise<DataStrategyResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n  fetcherKey: string | null;\n}\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface DataStrategyResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData, DataWithResponseInit\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<Record<string, DataStrategyResult>>;\n}\n\nexport interface AgnosticPatchRoutesOnNavigationFunction<\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> {\n  (opts: {\n    path: string;\n    matches: M[];\n    patch: (routeId: string | null, children: AgnosticRouteObject[]) => void;\n  }): void | Promise<void>;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: string[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nexport function matchRoutesImpl<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename: string,\n  allowPartial: boolean\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string,\n  allowPartial = false\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    let route = meta.route;\n\n    if (\n      !match &&\n      end &&\n      allowPartial &&\n      !routesMeta[routesMeta.length - 1].route.index\n    ) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false,\n        },\n        remainingPathname\n      );\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nexport function decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DataWithResponseInit<D> {\n  type: string = \"DataWithResponseInit\";\n  data: D;\n  init: ResponseInit | null;\n\n  constructor(data: D, init?: ResponseInit) {\n    this.data = data;\n    this.init = init || null;\n  }\n}\n\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nexport function data<D>(data: D, init?: number | ResponseInit) {\n  return new DataWithResponseInit(\n    data,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const replace: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  DataStrategyResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n  AgnosticPatchRoutesOnNavigationFunction,\n  DataWithResponseInit,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  matchRoutesImpl,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE DO NOT USE\n   *\n   * Patch additional children routes into an existing parent route\n   * @param routeId The parent route id or a callback function accepting `patch`\n   *                to perform batch patching\n   * @param children The additional children routes\n   */\n  patchRoutes(routeId: string | null, children: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  v7_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  unstable_patchRoutesOnNavigation?: AgnosticPatchRoutesOnNavigationFunction;\n  unstable_dataStrategy?: DataStrategyFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.unstable_patchRoutesOnNavigation;\n\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // FIFO queue of previously discovered routes to prevent re-calling on\n  // subsequent navigations to the same path\n  let discoveredRoutesMaxSize = 1000;\n  let discoveredRoutes = new Set<string>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(\n      initialMatches,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized: boolean;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(\n        null,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some((m) => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some((m) => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (\n        typeof m.route.loader === \"function\" &&\n        m.route.loader.hydrate === true\n      ) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: Set<string> = new Set();\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map<\n    string,\n    ReturnType<AgnosticPatchRoutesOnNavigationFunction>\n  >();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate: (() => void) | undefined = undefined;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (unblockBlockerHistoryUpdate) {\n          unblockBlockerHistoryUpdate();\n          unblockBlockerHistoryUpdate = undefined;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          let nextHistoryUpdatePromise = new Promise<void>((resolve) => {\n            unblockBlockerHistoryUpdate = resolve;\n          });\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked, after the url\n              // restoration is also complete.  See:\n              // https://github.com/remix-run/react-router/issues/11613\n              nextHistoryUpdatePromise.then(() => init.history.go(delta));\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      {\n        overrideNavigation: state.navigation,\n        // Proxy through any rending view transition\n        enableViewTransition: pendingViewTransitionEnabled === true,\n      }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        fogOfWar.active,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (\n          isErrorResult(result) &&\n          isRouteErrorResponse(result.error) &&\n          result.error.status === 404\n        ) {\n          pendingNavigationController = null;\n\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error,\n            },\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors,\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        state,\n        request,\n        [actionMatch],\n        matches,\n        null\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState =\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration);\n\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...(actionData !== undefined ? { actionData } : {}),\n          },\n          {\n            flushSync,\n          }\n        );\n      }\n\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: error,\n          },\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates: Partial<RouterState> = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getUpdatedActionData(\n    pendingActionResult: PendingActionResult | undefined\n  ): Record<string, RouteData> | null | undefined {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data as any,\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(\n    revalidatingFetchers: RevalidatingFetcher[]\n  ) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        undefined,\n        fetcher ? fetcher.data : undefined\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        fogOfWar.active,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      fogOfWar.active,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m: AgnosticDataRouteMatch) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId,\n        });\n        setFetcherError(key, routeId, error, { flushSync });\n        return true;\n      }\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      state,\n      fetchRequest,\n      [match],\n      requestMatches,\n      key\n    );\n    let actionResult = actionResults[match.route.id];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      state,\n      fetchRequest,\n      [match],\n      matches,\n      key\n    );\n    let result = results[match.route.id];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    isNavigation: boolean,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true || redirect.response.headers.has(\"X-Remix-Replace\")\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    state: RouterState,\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    fetcherKey: string | null\n  ): Promise<Record<string, DataResult>> {\n    let results: Record<string, DataStrategyResult>;\n    let dataResults: Record<string, DataResult> = {};\n    try {\n      results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        state,\n        request,\n        matchesToLoad,\n        matches,\n        fetcherKey,\n        manifest,\n        mapRouteProperties\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach((m) => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e,\n        };\n      });\n      return dataResults;\n    }\n\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result as Response;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            routeId,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          ),\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(\n          result\n        );\n      }\n    }\n\n    return dataResults;\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    state: RouterState,\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let currentMatches = state.matches;\n\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\n      \"loader\",\n      state,\n      request,\n      matchesToLoad,\n      matches,\n      null\n    );\n\n    let fetcherResultsPromise = Promise.all(\n      fetchersToLoad.map(async (f) => {\n        if (f.matches && f.match && f.controller) {\n          let results = await callDataStrategy(\n            \"loader\",\n            state,\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            [f.match],\n            f.matches,\n            f.key\n          );\n          let result = results[f.match.route.id];\n          // Fetcher results are keyed by fetcher key from here on out, not routeId\n          return { [f.key]: result };\n        } else {\n          return Promise.resolve({\n            [f.key]: {\n              type: ResultType.error,\n              error: getInternalRouterError(404, {\n                pathname: f.path,\n              }),\n            } as ErrorResult,\n          });\n        }\n      })\n    );\n\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce(\n      (acc, r) => Object.assign(acc, r),\n      {}\n    );\n\n    await Promise.all([\n      resolveNavigationDeferredResults(\n        matches,\n        loaderResults,\n        request.signal,\n        currentMatches,\n        state.loaderData\n      ),\n      resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname: string) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n\n    return { notFoundMatches: matches, route, error };\n  }\n\n  function handleDiscoverRouteError(\n    pathname: string,\n    discoverResult: DiscoverRoutesErrorResult\n  ) {\n    return {\n      boundaryId: findNearestBoundary(discoverResult.partialMatches).route.id,\n      error: getInternalRouterError(400, {\n        type: \"route-discovery\",\n        pathname,\n        message:\n          discoverResult.error != null && \"message\" in discoverResult.error\n            ? discoverResult.error\n            : String(discoverResult.error),\n      }),\n    };\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function checkFogOfWar(\n    matches: AgnosticDataRouteMatch[] | null,\n    routesToUse: AgnosticDataRouteObject[],\n    pathname: string\n  ): { active: boolean; matches: AgnosticDataRouteMatch[] | null } {\n    if (patchRoutesOnNavigationImpl) {\n      // Don't bother re-calling patchRouteOnMiss for a path we've already\n      // processed.  the last execution would have patched the route tree\n      // accordingly so `matches` here are already accurate.\n      if (discoveredRoutes.has(pathname)) {\n        return { active: false, matches };\n      }\n\n      if (!matches) {\n        let fogMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n\n    return { active: false, matches: null };\n  }\n\n  type DiscoverRoutesSuccessResult = {\n    type: \"success\";\n    matches: AgnosticDataRouteMatch[] | null;\n  };\n  type DiscoverRoutesErrorResult = {\n    type: \"error\";\n    error: any;\n    partialMatches: AgnosticDataRouteMatch[];\n  };\n  type DiscoverRoutesAbortedResult = { type: \"aborted\" };\n  type DiscoverRoutesResult =\n    | DiscoverRoutesSuccessResult\n    | DiscoverRoutesErrorResult\n    | DiscoverRoutesAbortedResult;\n\n  async function discoverRoutes(\n    matches: AgnosticDataRouteMatch[],\n    pathname: string,\n    signal: AbortSignal\n  ): Promise<DiscoverRoutesResult> {\n    let partialMatches: AgnosticDataRouteMatch[] | null = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      try {\n        await loadLazyRouteChildren(\n          patchRoutesOnNavigationImpl!,\n          pathname,\n          partialMatches,\n          routesToUse,\n          manifest,\n          mapRouteProperties,\n          pendingPatchRoutes,\n          signal\n        );\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: newMatches };\n      }\n\n      let newPartialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n\n      // Avoid loops if the second pass results in the same partial matches\n      if (\n        !newPartialMatches ||\n        (partialMatches.length === newPartialMatches.length &&\n          partialMatches.every(\n            (m, i) => m.route.id === newPartialMatches![i].route.id\n          ))\n      ) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: null };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function addToFifoQueue(path: string, queue: Set<string>) {\n    if (queue.size >= discoveredRoutesMaxSize) {\n      let first = queue.values().next().value;\n      queue.delete(first);\n    }\n    queue.add(path);\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  function patchRoutes(\n    routeId: string | null,\n    children: AgnosticRouteObject[]\n  ): void {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties\n    );\n\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          unstable_dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        unstable_dataStrategy\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      unstable_dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      unstable_dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null\n  ): Promise<Record<string, DataResult>> {\n    let results = await callDataStrategyImpl(\n      unstable_dataStrategy || defaultDataStrategy,\n      type,\n      null,\n      request,\n      matchesToLoad,\n      matches,\n      null,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    let dataResults: Record<string, DataResult> = {};\n    await Promise.all(\n      matches.map(async (match) => {\n        if (!(match.route.id in results)) {\n          return;\n        }\n        let result = results[match.route.id];\n        if (isRedirectDataStrategyResultResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            match.route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        dataResults[match.route.id] =\n          await convertDataStrategyResultToDataResult(result);\n      })\n    );\n    return dataResults;\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: Set<string>,\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[0]\n      : undefined;\n  let boundaryMatches = boundaryId\n    ? getLoaderMatchesUntilBoundary(matches, boundaryId)\n    : matches;\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let sawError = false;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n\n    // Track when we've encountered an error opn initial load so we don't try\n    // to run any loaders below that\n    if (isInitialLoad && state.errors && state.errors[route.id] !== undefined) {\n      sawError = true;\n    }\n\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (sawError && state.loaderData[route.id] === undefined) {\n        return false;\n      }\n\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Idempotent utility to execute patchRoutesOnNavigation() to lazily load route\n * definitions and update the routes/routeManifest\n */\nasync function loadLazyRouteChildren(\n  patchRoutesOnNavigationImpl: AgnosticPatchRoutesOnNavigationFunction,\n  path: string,\n  matches: AgnosticDataRouteMatch[],\n  routes: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  pendingRouteChildren: Map<\n    string,\n    ReturnType<typeof patchRoutesOnNavigationImpl>\n  >,\n  signal: AbortSignal\n) {\n  let key = [path, ...matches.map((m) => m.route.id)].join(\"-\");\n  try {\n    let pending = pendingRouteChildren.get(key);\n    if (!pending) {\n      pending = patchRoutesOnNavigationImpl({\n        path,\n        matches,\n        patch: (routeId, children) => {\n          if (!signal.aborted) {\n            patchRoutesImpl(\n              routeId,\n              children,\n              routes,\n              manifest,\n              mapRouteProperties\n            );\n          }\n        },\n      });\n      pendingRouteChildren.set(key, pending);\n    }\n\n    if (pending && isPromise<AgnosticRouteObject[]>(pending)) {\n      await pending;\n    }\n  } finally {\n    pendingRouteChildren.delete(key);\n  }\n}\n\nfunction patchRoutesImpl(\n  routeId: string | null,\n  children: AgnosticRouteObject[],\n  routesToUse: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction\n) {\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [routeId, \"patch\", String(route.children?.length || \"0\")],\n      manifest\n    );\n    if (route.children) {\n      route.children.push(...dataChildren);\n    } else {\n      route.children = dataChildren;\n    }\n  } else {\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [\"patch\", String(routesToUse.length || \"0\")],\n      manifest\n    );\n    routesToUse.push(...dataChildren);\n  }\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy({\n  matches,\n}: DataStrategyFunctionArgs): ReturnType<DataStrategyFunction> {\n  let matchesToLoad = matches.filter((m) => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map((m) => m.resolve()));\n  return results.reduce(\n    (acc, result, i) =>\n      Object.assign(acc, { [matchesToLoad[i].route.id]: result }),\n    {}\n  );\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  state: RouterState | null,\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  fetcherKey: string | null,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<Record<string, DataStrategyResult>> {\n  let loadRouteDefinitionsPromises = matches.map((m) =>\n    m.route.lazy\n      ? loadLazyRouteModule(m.route, mapRouteProperties, manifest)\n      : undefined\n  );\n\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some((m) => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve: DataStrategyMatch[\"resolve\"] = async (handlerOverride) => {\n      if (\n        handlerOverride &&\n        request.method === \"GET\" &&\n        (match.route.lazy || match.route.loader)\n      ) {\n        shouldLoad = true;\n      }\n      return shouldLoad\n        ? callLoaderOrAction(\n            type,\n            request,\n            match,\n            loadRoutePromise,\n            handlerOverride,\n            requestContext\n          )\n        : Promise.resolve({ type: ResultType.data, result: undefined });\n    };\n\n    return {\n      ...match,\n      shouldLoad,\n      resolve,\n    };\n  });\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext,\n  });\n\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n\n  return results;\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  loadRoutePromise: Promise<void> | undefined,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<DataStrategyResult> {\n  let result: DataStrategyResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<DataStrategyResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<DataStrategyResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<DataStrategyResult> = (async () => {\n      try {\n        let val = await (handlerOverride\n          ? handlerOverride((ctx: unknown) => actualHandler(ctx))\n          : actualHandler());\n        return { type: \"data\", result: val };\n      } catch (e) {\n        return { type: \"error\", result: e };\n      }\n    })();\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadRoutePromise,\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertDataStrategyResultToDataResult(\n  dataStrategyResult: DataStrategyResult\n): Promise<DataResult> {\n  let { result, type } = dataStrategyResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: result.init?.status,\n        };\n      }\n\n      // Convert thrown unstable_data() to ErrorResponse instances\n      result = new ErrorResponseImpl(\n        result.init?.status || 500,\n        undefined,\n        result.data\n      );\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers\n        ? new Headers(result.init.headers)\n        : undefined,\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach((match) => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: Record<string, DataResult>,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach((rf) => {\n    let { key, match, controller } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\" | \"route-discovery\";\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (type === \"route-discovery\") {\n      errorMessage =\n        `Unable to match URL \"${pathname}\" - the \\`unstable_patchRoutesOnNavigation()\\` ` +\n        `function threw the following error:\\n${message}`;\n    } else if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: Record<string, DataResult>\n): { key: string; result: RedirectResult } | undefined {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return { key, result };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isPromise<T = unknown>(val: unknown): val is Promise<T> {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\n\nfunction isDataStrategyResult(result: unknown): result is DataStrategyResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectDataStrategyResultResult(result: DataStrategyResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDataWithResponseInit(\n  value: any\n): value is DataWithResponseInit<unknown> {\n  return (\n    typeof value === \"object\" &&\n    value != null &&\n    \"type\" in value &&\n    \"data\" in value &&\n    \"init\" in value &&\n    value.type === \"DataWithResponseInit\"\n  );\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveNavigationDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  signal: AbortSignal,\n  currentMatches: AgnosticDataRouteMatch[],\n  currentLoaderData: RouteData\n) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then((result) => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveFetcherDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  revalidatingFetchers: RevalidatingFetcher[]\n) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, routeId, controller } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(\n        controller,\n        \"Expected an AbortController for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, controller.signal, true).then(\n        (result) => {\n          if (result) {\n            results[key] = result;\n          }\n        }\n      );\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n//#endregion\n"],"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_extends","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","assign","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","String","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","captureGroups","memo","paramName","splatValue","regexpSource","_","RegExp","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","DataWithResponseInit","constructor","type","AbortedDeferredError","DeferredData","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","cancel","abort","k","resolveData","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","dataStrategyImpl","unstable_dataStrategy","defaultDataStrategy","patchRoutesOnNavigationImpl","unstable_patchRoutesOnNavigation","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","v7_skipActionErrorRevalidation","unlistenHistory","discoveredRoutesMaxSize","discoveredRoutes","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","fogOfWar","checkFogOfWar","active","initialized","m","lazy","loader","errors","isRouteInitialized","hydrate","findIndex","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","pendingPatchRoutes","unblockBlockerHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","nextHistoryUpdatePromise","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","completeNavigation","_temp","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","enableViewTransition","unstable_viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","handleNavigational404","isHashChangeOnly","request","createClientSideRequest","pendingActionResult","findNearestBoundary","actionResult","handleAction","shortCircuited","routeId","isErrorResult","getLoadingNavigation","updatedMatches","handleLoaders","fetcherSubmission","getActionDataForCommit","isFogOfWar","getSubmittingNavigation","discoverResult","discoverRoutes","boundaryId","handleDiscoverRouteError","partialMatches","actionMatch","getTargetMatch","method","results","callDataStrategy","isRedirectResult","normalizeRedirectLocation","startRedirectNavigation","isDeferredResult","boundaryMatch","activeSubmission","getSubmissionFromNavigation","shouldUpdateNavigationState","getUpdatedActionData","matchesToLoad","revalidatingFetchers","getMatchesToLoad","cancelActiveDeferreds","updatedFetchers","markFetchRedirectsDone","updates","getUpdatedRevalidatingFetchers","rf","abortFetcher","abortPendingFetchRevalidations","f","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","revalidatingFetcher","getLoadingFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","detectAndHandle405Error","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResults","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","isNavigation","_temp2","redirectLocation","isDocumentReload","redirectHistoryAction","fetcherKey","dataResults","callDataStrategyImpl","isRedirectDataStrategyResultResult","normalizeRelativeRoutingRedirectResponse","convertDataStrategyResultToDataResult","fetchersToLoad","currentMatches","loaderResultsPromise","fetcherResultsPromise","all","resolveNavigationDeferredResults","resolveFetcherDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","_ref4","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","fogMatches","isNonHMR","loadLazyRouteChildren","newMatches","addToFifoQueue","newPartialMatches","queue","values","next","_internalSetRoutes","newRoutes","patchRoutes","patchRoutesImpl","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","v7_throwAbortReason","query","_temp3","requestContext","skipLoaderErrorBubbling","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp4","find","_result$activeDeferre","routeMatch","submit","loadRouteData","isDataStrategyResult","isRedirectResponse","isRouteRequest","throwStaticHandlerAbortedError","Location","loaderRequest","Request","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","reason","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","_ref5","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryMatches","isInitialLoad","skipActionErrorRevalidation","currentUrl","nextUrl","actionStatus","shouldSkipRevalidation","sawError","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","pendingRouteChildren","pending","patch","isPromise","_route$children","dataChildren","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","_ref6","shouldLoad","loadRouteDefinitionsPromises","dsMatches","loadRoutePromise","handlerOverride","callLoaderOrAction","staticContext","onReject","runHandler","handler","actualHandler","ctx","handlerPromise","val","handlerError","dataStrategyResult","contentType","isDataWithResponseInit","_result$init2","_result$init","isDeferredData","_result$init3","_result$init4","deferred","_result$init5","_result$init6","trimmedMatches","normalizedLocation","protocol","isSameBasename","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","_temp5","errorMessage","isRevalidatingLoader","unwrap","getAll","_window","transitions","sessionPositions","sessionStorage","getItem","setItem"],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/router.umd.js b/dist/router.umd.js
index 484c71ce04141fdbcb410e95a8ab81949d5577cc..34fd523c539a5c496aef6d7273326af9de5cef13 100644
--- a/dist/router.umd.js
+++ b/dist/router.umd.js
@@ -4390,10 +4390,17 @@
     // `shouldRevalidate` via `actionResult`
     let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;
     let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;
+    let sawError = false;
     let navigationMatches = boundaryMatches.filter((match, index) => {
       let {
         route
       } = match;
+
+      // Track when we've encountered an error opn initial load so we don't try
+      // to run any loaders below that
+      if (isInitialLoad && state.errors && state.errors[route.id] !== undefined) {
+        sawError = true;
+      }
       if (route.lazy) {
         // We haven't loaded this route yet so we don't know if it's got a loader!
         return true;
@@ -4402,6 +4409,9 @@
         return false;
       }
       if (isInitialLoad) {
+        if (sawError && state.loaderData[route.id] === undefined) {
+          return false;
+        }
         if (typeof route.loader !== "function" || route.loader.hydrate) {
           return true;
         }
diff --git a/dist/router.umd.js.map b/dist/router.umd.js.map
index 52710dde99badb8fb0bd07130112f8dddb9a0120..722925a291a4b82cb1cd44fe9bdfacc14831b453 100644
--- a/dist/router.umd.js.map
+++ b/dist/router.umd.js.map
@@ -1 +1 @@
-{"version":3,"file":"router.umd.js","sources":["../history.ts","../utils.ts","../router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => DataFunctionReturnValue\n  ) => Promise<DataStrategyResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n  fetcherKey: string | null;\n}\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface DataStrategyResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData, DataWithResponseInit\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<Record<string, DataStrategyResult>>;\n}\n\nexport interface AgnosticPatchRoutesOnNavigationFunction<\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> {\n  (opts: {\n    path: string;\n    matches: M[];\n    patch: (routeId: string | null, children: AgnosticRouteObject[]) => void;\n  }): void | Promise<void>;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: string[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nexport function matchRoutesImpl<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename: string,\n  allowPartial: boolean\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string,\n  allowPartial = false\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    let route = meta.route;\n\n    if (\n      !match &&\n      end &&\n      allowPartial &&\n      !routesMeta[routesMeta.length - 1].route.index\n    ) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false,\n        },\n        remainingPathname\n      );\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nexport function decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DataWithResponseInit<D> {\n  type: string = \"DataWithResponseInit\";\n  data: D;\n  init: ResponseInit | null;\n\n  constructor(data: D, init?: ResponseInit) {\n    this.data = data;\n    this.init = init || null;\n  }\n}\n\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nexport function data<D>(data: D, init?: number | ResponseInit) {\n  return new DataWithResponseInit(\n    data,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const replace: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  DataStrategyResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n  AgnosticPatchRoutesOnNavigationFunction,\n  DataWithResponseInit,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  matchRoutesImpl,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE DO NOT USE\n   *\n   * Patch additional children routes into an existing parent route\n   * @param routeId The parent route id or a callback function accepting `patch`\n   *                to perform batch patching\n   * @param children The additional children routes\n   */\n  patchRoutes(routeId: string | null, children: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  v7_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  unstable_patchRoutesOnNavigation?: AgnosticPatchRoutesOnNavigationFunction;\n  unstable_dataStrategy?: DataStrategyFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.unstable_patchRoutesOnNavigation;\n\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // FIFO queue of previously discovered routes to prevent re-calling on\n  // subsequent navigations to the same path\n  let discoveredRoutesMaxSize = 1000;\n  let discoveredRoutes = new Set<string>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(\n      initialMatches,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized: boolean;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(\n        null,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some((m) => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some((m) => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (\n        typeof m.route.loader === \"function\" &&\n        m.route.loader.hydrate === true\n      ) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: Set<string> = new Set();\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map<\n    string,\n    ReturnType<AgnosticPatchRoutesOnNavigationFunction>\n  >();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate: (() => void) | undefined = undefined;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (unblockBlockerHistoryUpdate) {\n          unblockBlockerHistoryUpdate();\n          unblockBlockerHistoryUpdate = undefined;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          let nextHistoryUpdatePromise = new Promise<void>((resolve) => {\n            unblockBlockerHistoryUpdate = resolve;\n          });\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked, after the url\n              // restoration is also complete.  See:\n              // https://github.com/remix-run/react-router/issues/11613\n              nextHistoryUpdatePromise.then(() => init.history.go(delta));\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      {\n        overrideNavigation: state.navigation,\n        // Proxy through any rending view transition\n        enableViewTransition: pendingViewTransitionEnabled === true,\n      }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        fogOfWar.active,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (\n          isErrorResult(result) &&\n          isRouteErrorResponse(result.error) &&\n          result.error.status === 404\n        ) {\n          pendingNavigationController = null;\n\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error,\n            },\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors,\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        state,\n        request,\n        [actionMatch],\n        matches,\n        null\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState =\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration);\n\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...(actionData !== undefined ? { actionData } : {}),\n          },\n          {\n            flushSync,\n          }\n        );\n      }\n\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: error,\n          },\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates: Partial<RouterState> = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getUpdatedActionData(\n    pendingActionResult: PendingActionResult | undefined\n  ): Record<string, RouteData> | null | undefined {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data as any,\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(\n    revalidatingFetchers: RevalidatingFetcher[]\n  ) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        undefined,\n        fetcher ? fetcher.data : undefined\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        fogOfWar.active,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      fogOfWar.active,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m: AgnosticDataRouteMatch) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId,\n        });\n        setFetcherError(key, routeId, error, { flushSync });\n        return true;\n      }\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      state,\n      fetchRequest,\n      [match],\n      requestMatches,\n      key\n    );\n    let actionResult = actionResults[match.route.id];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      state,\n      fetchRequest,\n      [match],\n      matches,\n      key\n    );\n    let result = results[match.route.id];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    isNavigation: boolean,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true || redirect.response.headers.has(\"X-Remix-Replace\")\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    state: RouterState,\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    fetcherKey: string | null\n  ): Promise<Record<string, DataResult>> {\n    let results: Record<string, DataStrategyResult>;\n    let dataResults: Record<string, DataResult> = {};\n    try {\n      results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        state,\n        request,\n        matchesToLoad,\n        matches,\n        fetcherKey,\n        manifest,\n        mapRouteProperties\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach((m) => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e,\n        };\n      });\n      return dataResults;\n    }\n\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result as Response;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            routeId,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          ),\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(\n          result\n        );\n      }\n    }\n\n    return dataResults;\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    state: RouterState,\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let currentMatches = state.matches;\n\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\n      \"loader\",\n      state,\n      request,\n      matchesToLoad,\n      matches,\n      null\n    );\n\n    let fetcherResultsPromise = Promise.all(\n      fetchersToLoad.map(async (f) => {\n        if (f.matches && f.match && f.controller) {\n          let results = await callDataStrategy(\n            \"loader\",\n            state,\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            [f.match],\n            f.matches,\n            f.key\n          );\n          let result = results[f.match.route.id];\n          // Fetcher results are keyed by fetcher key from here on out, not routeId\n          return { [f.key]: result };\n        } else {\n          return Promise.resolve({\n            [f.key]: {\n              type: ResultType.error,\n              error: getInternalRouterError(404, {\n                pathname: f.path,\n              }),\n            } as ErrorResult,\n          });\n        }\n      })\n    );\n\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce(\n      (acc, r) => Object.assign(acc, r),\n      {}\n    );\n\n    await Promise.all([\n      resolveNavigationDeferredResults(\n        matches,\n        loaderResults,\n        request.signal,\n        currentMatches,\n        state.loaderData\n      ),\n      resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname: string) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n\n    return { notFoundMatches: matches, route, error };\n  }\n\n  function handleDiscoverRouteError(\n    pathname: string,\n    discoverResult: DiscoverRoutesErrorResult\n  ) {\n    return {\n      boundaryId: findNearestBoundary(discoverResult.partialMatches).route.id,\n      error: getInternalRouterError(400, {\n        type: \"route-discovery\",\n        pathname,\n        message:\n          discoverResult.error != null && \"message\" in discoverResult.error\n            ? discoverResult.error\n            : String(discoverResult.error),\n      }),\n    };\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function checkFogOfWar(\n    matches: AgnosticDataRouteMatch[] | null,\n    routesToUse: AgnosticDataRouteObject[],\n    pathname: string\n  ): { active: boolean; matches: AgnosticDataRouteMatch[] | null } {\n    if (patchRoutesOnNavigationImpl) {\n      // Don't bother re-calling patchRouteOnMiss for a path we've already\n      // processed.  the last execution would have patched the route tree\n      // accordingly so `matches` here are already accurate.\n      if (discoveredRoutes.has(pathname)) {\n        return { active: false, matches };\n      }\n\n      if (!matches) {\n        let fogMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n\n    return { active: false, matches: null };\n  }\n\n  type DiscoverRoutesSuccessResult = {\n    type: \"success\";\n    matches: AgnosticDataRouteMatch[] | null;\n  };\n  type DiscoverRoutesErrorResult = {\n    type: \"error\";\n    error: any;\n    partialMatches: AgnosticDataRouteMatch[];\n  };\n  type DiscoverRoutesAbortedResult = { type: \"aborted\" };\n  type DiscoverRoutesResult =\n    | DiscoverRoutesSuccessResult\n    | DiscoverRoutesErrorResult\n    | DiscoverRoutesAbortedResult;\n\n  async function discoverRoutes(\n    matches: AgnosticDataRouteMatch[],\n    pathname: string,\n    signal: AbortSignal\n  ): Promise<DiscoverRoutesResult> {\n    let partialMatches: AgnosticDataRouteMatch[] | null = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      try {\n        await loadLazyRouteChildren(\n          patchRoutesOnNavigationImpl!,\n          pathname,\n          partialMatches,\n          routesToUse,\n          manifest,\n          mapRouteProperties,\n          pendingPatchRoutes,\n          signal\n        );\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: newMatches };\n      }\n\n      let newPartialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n\n      // Avoid loops if the second pass results in the same partial matches\n      if (\n        !newPartialMatches ||\n        (partialMatches.length === newPartialMatches.length &&\n          partialMatches.every(\n            (m, i) => m.route.id === newPartialMatches![i].route.id\n          ))\n      ) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: null };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function addToFifoQueue(path: string, queue: Set<string>) {\n    if (queue.size >= discoveredRoutesMaxSize) {\n      let first = queue.values().next().value;\n      queue.delete(first);\n    }\n    queue.add(path);\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  function patchRoutes(\n    routeId: string | null,\n    children: AgnosticRouteObject[]\n  ): void {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties\n    );\n\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          unstable_dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        unstable_dataStrategy\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      unstable_dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      unstable_dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null\n  ): Promise<Record<string, DataResult>> {\n    let results = await callDataStrategyImpl(\n      unstable_dataStrategy || defaultDataStrategy,\n      type,\n      null,\n      request,\n      matchesToLoad,\n      matches,\n      null,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    let dataResults: Record<string, DataResult> = {};\n    await Promise.all(\n      matches.map(async (match) => {\n        if (!(match.route.id in results)) {\n          return;\n        }\n        let result = results[match.route.id];\n        if (isRedirectDataStrategyResultResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            match.route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        dataResults[match.route.id] =\n          await convertDataStrategyResultToDataResult(result);\n      })\n    );\n    return dataResults;\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: Set<string>,\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[0]\n      : undefined;\n  let boundaryMatches = boundaryId\n    ? getLoaderMatchesUntilBoundary(matches, boundaryId)\n    : matches;\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Idempotent utility to execute patchRoutesOnNavigation() to lazily load route\n * definitions and update the routes/routeManifest\n */\nasync function loadLazyRouteChildren(\n  patchRoutesOnNavigationImpl: AgnosticPatchRoutesOnNavigationFunction,\n  path: string,\n  matches: AgnosticDataRouteMatch[],\n  routes: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  pendingRouteChildren: Map<\n    string,\n    ReturnType<typeof patchRoutesOnNavigationImpl>\n  >,\n  signal: AbortSignal\n) {\n  let key = [path, ...matches.map((m) => m.route.id)].join(\"-\");\n  try {\n    let pending = pendingRouteChildren.get(key);\n    if (!pending) {\n      pending = patchRoutesOnNavigationImpl({\n        path,\n        matches,\n        patch: (routeId, children) => {\n          if (!signal.aborted) {\n            patchRoutesImpl(\n              routeId,\n              children,\n              routes,\n              manifest,\n              mapRouteProperties\n            );\n          }\n        },\n      });\n      pendingRouteChildren.set(key, pending);\n    }\n\n    if (pending && isPromise<AgnosticRouteObject[]>(pending)) {\n      await pending;\n    }\n  } finally {\n    pendingRouteChildren.delete(key);\n  }\n}\n\nfunction patchRoutesImpl(\n  routeId: string | null,\n  children: AgnosticRouteObject[],\n  routesToUse: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction\n) {\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [routeId, \"patch\", String(route.children?.length || \"0\")],\n      manifest\n    );\n    if (route.children) {\n      route.children.push(...dataChildren);\n    } else {\n      route.children = dataChildren;\n    }\n  } else {\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [\"patch\", String(routesToUse.length || \"0\")],\n      manifest\n    );\n    routesToUse.push(...dataChildren);\n  }\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy({\n  matches,\n}: DataStrategyFunctionArgs): ReturnType<DataStrategyFunction> {\n  let matchesToLoad = matches.filter((m) => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map((m) => m.resolve()));\n  return results.reduce(\n    (acc, result, i) =>\n      Object.assign(acc, { [matchesToLoad[i].route.id]: result }),\n    {}\n  );\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  state: RouterState | null,\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  fetcherKey: string | null,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<Record<string, DataStrategyResult>> {\n  let loadRouteDefinitionsPromises = matches.map((m) =>\n    m.route.lazy\n      ? loadLazyRouteModule(m.route, mapRouteProperties, manifest)\n      : undefined\n  );\n\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some((m) => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve: DataStrategyMatch[\"resolve\"] = async (handlerOverride) => {\n      if (\n        handlerOverride &&\n        request.method === \"GET\" &&\n        (match.route.lazy || match.route.loader)\n      ) {\n        shouldLoad = true;\n      }\n      return shouldLoad\n        ? callLoaderOrAction(\n            type,\n            request,\n            match,\n            loadRoutePromise,\n            handlerOverride,\n            requestContext\n          )\n        : Promise.resolve({ type: ResultType.data, result: undefined });\n    };\n\n    return {\n      ...match,\n      shouldLoad,\n      resolve,\n    };\n  });\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext,\n  });\n\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n\n  return results;\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  loadRoutePromise: Promise<void> | undefined,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<DataStrategyResult> {\n  let result: DataStrategyResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<DataStrategyResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<DataStrategyResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<DataStrategyResult> = (async () => {\n      try {\n        let val = await (handlerOverride\n          ? handlerOverride((ctx: unknown) => actualHandler(ctx))\n          : actualHandler());\n        return { type: \"data\", result: val };\n      } catch (e) {\n        return { type: \"error\", result: e };\n      }\n    })();\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadRoutePromise,\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertDataStrategyResultToDataResult(\n  dataStrategyResult: DataStrategyResult\n): Promise<DataResult> {\n  let { result, type } = dataStrategyResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: result.init?.status,\n        };\n      }\n\n      // Convert thrown unstable_data() to ErrorResponse instances\n      result = new ErrorResponseImpl(\n        result.init?.status || 500,\n        undefined,\n        result.data\n      );\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers\n        ? new Headers(result.init.headers)\n        : undefined,\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach((match) => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: Record<string, DataResult>,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach((rf) => {\n    let { key, match, controller } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\" | \"route-discovery\";\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (type === \"route-discovery\") {\n      errorMessage =\n        `Unable to match URL \"${pathname}\" - the \\`unstable_patchRoutesOnNavigation()\\` ` +\n        `function threw the following error:\\n${message}`;\n    } else if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: Record<string, DataResult>\n): { key: string; result: RedirectResult } | undefined {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return { key, result };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isPromise<T = unknown>(val: unknown): val is Promise<T> {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\n\nfunction isDataStrategyResult(result: unknown): result is DataStrategyResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectDataStrategyResultResult(result: DataStrategyResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDataWithResponseInit(\n  value: any\n): value is DataWithResponseInit<unknown> {\n  return (\n    typeof value === \"object\" &&\n    value != null &&\n    \"type\" in value &&\n    \"data\" in value &&\n    \"init\" in value &&\n    value.type === \"DataWithResponseInit\"\n  );\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveNavigationDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  signal: AbortSignal,\n  currentMatches: AgnosticDataRouteMatch[],\n  currentLoaderData: RouteData\n) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then((result) => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveFetcherDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  revalidatingFetchers: RevalidatingFetcher[]\n) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, routeId, controller } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(\n        controller,\n        \"Expected an AbortController for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, controller.signal, true).then(\n        (result) => {\n          if (result) {\n            results[key] = result;\n          }\n        }\n      );\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n//#endregion\n"],"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_extends","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","assign","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","String","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","captureGroups","memo","paramName","splatValue","regexpSource","_","RegExp","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","DataWithResponseInit","constructor","type","AbortedDeferredError","DeferredData","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","cancel","abort","k","resolveData","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","dataStrategyImpl","unstable_dataStrategy","defaultDataStrategy","patchRoutesOnNavigationImpl","unstable_patchRoutesOnNavigation","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","v7_skipActionErrorRevalidation","unlistenHistory","discoveredRoutesMaxSize","discoveredRoutes","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","fogOfWar","checkFogOfWar","active","initialized","m","lazy","loader","errors","isRouteInitialized","hydrate","findIndex","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","pendingPatchRoutes","unblockBlockerHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","nextHistoryUpdatePromise","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","completeNavigation","_temp","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","enableViewTransition","unstable_viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","handleNavigational404","isHashChangeOnly","request","createClientSideRequest","pendingActionResult","findNearestBoundary","actionResult","handleAction","shortCircuited","routeId","isErrorResult","getLoadingNavigation","updatedMatches","handleLoaders","fetcherSubmission","getActionDataForCommit","isFogOfWar","getSubmittingNavigation","discoverResult","discoverRoutes","boundaryId","handleDiscoverRouteError","partialMatches","actionMatch","getTargetMatch","method","results","callDataStrategy","isRedirectResult","normalizeRedirectLocation","startRedirectNavigation","isDeferredResult","boundaryMatch","activeSubmission","getSubmissionFromNavigation","shouldUpdateNavigationState","getUpdatedActionData","matchesToLoad","revalidatingFetchers","getMatchesToLoad","cancelActiveDeferreds","updatedFetchers","markFetchRedirectsDone","updates","getUpdatedRevalidatingFetchers","rf","abortFetcher","abortPendingFetchRevalidations","f","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","revalidatingFetcher","getLoadingFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","detectAndHandle405Error","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResults","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","isNavigation","_temp2","redirectLocation","isDocumentReload","redirectHistoryAction","fetcherKey","dataResults","callDataStrategyImpl","isRedirectDataStrategyResultResult","normalizeRelativeRoutingRedirectResponse","convertDataStrategyResultToDataResult","fetchersToLoad","currentMatches","loaderResultsPromise","fetcherResultsPromise","all","resolveNavigationDeferredResults","resolveFetcherDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","_ref4","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","fogMatches","isNonHMR","loadLazyRouteChildren","newMatches","addToFifoQueue","newPartialMatches","queue","values","next","_internalSetRoutes","newRoutes","patchRoutes","patchRoutesImpl","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","v7_throwAbortReason","query","_temp3","requestContext","skipLoaderErrorBubbling","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp4","find","_result$activeDeferre","routeMatch","submit","loadRouteData","isDataStrategyResult","isRedirectResponse","isRouteRequest","throwStaticHandlerAbortedError","Location","loaderRequest","Request","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","reason","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","_ref5","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryMatches","isInitialLoad","skipActionErrorRevalidation","currentUrl","nextUrl","actionStatus","shouldSkipRevalidation","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","pendingRouteChildren","pending","patch","isPromise","_route$children","dataChildren","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","_ref6","shouldLoad","loadRouteDefinitionsPromises","dsMatches","loadRoutePromise","handlerOverride","callLoaderOrAction","staticContext","onReject","runHandler","handler","actualHandler","ctx","handlerPromise","val","handlerError","dataStrategyResult","contentType","isDataWithResponseInit","_result$init2","_result$init","isDeferredData","_result$init3","_result$init4","deferred","_result$init5","_result$init6","trimmedMatches","normalizedLocation","protocol","isSameBasename","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","_temp5","errorMessage","isRevalidatingLoader","unwrap","getAll","_window","transitions","sessionPositions","sessionStorage","getItem","setItem"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"router.umd.js","sources":["../history.ts","../utils.ts","../router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => DataFunctionReturnValue\n  ) => Promise<DataStrategyResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n  fetcherKey: string | null;\n}\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface DataStrategyResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData, DataWithResponseInit\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<Record<string, DataStrategyResult>>;\n}\n\nexport interface AgnosticPatchRoutesOnNavigationFunction<\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> {\n  (opts: {\n    path: string;\n    matches: M[];\n    patch: (routeId: string | null, children: AgnosticRouteObject[]) => void;\n  }): void | Promise<void>;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: string[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nexport function matchRoutesImpl<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename: string,\n  allowPartial: boolean\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string,\n  allowPartial = false\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    let route = meta.route;\n\n    if (\n      !match &&\n      end &&\n      allowPartial &&\n      !routesMeta[routesMeta.length - 1].route.index\n    ) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false,\n        },\n        remainingPathname\n      );\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nexport function decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DataWithResponseInit<D> {\n  type: string = \"DataWithResponseInit\";\n  data: D;\n  init: ResponseInit | null;\n\n  constructor(data: D, init?: ResponseInit) {\n    this.data = data;\n    this.init = init || null;\n  }\n}\n\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nexport function data<D>(data: D, init?: number | ResponseInit) {\n  return new DataWithResponseInit(\n    data,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const replace: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  DataStrategyResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n  AgnosticPatchRoutesOnNavigationFunction,\n  DataWithResponseInit,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  matchRoutesImpl,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE DO NOT USE\n   *\n   * Patch additional children routes into an existing parent route\n   * @param routeId The parent route id or a callback function accepting `patch`\n   *                to perform batch patching\n   * @param children The additional children routes\n   */\n  patchRoutes(routeId: string | null, children: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  v7_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  unstable_patchRoutesOnNavigation?: AgnosticPatchRoutesOnNavigationFunction;\n  unstable_dataStrategy?: DataStrategyFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.unstable_patchRoutesOnNavigation;\n\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // FIFO queue of previously discovered routes to prevent re-calling on\n  // subsequent navigations to the same path\n  let discoveredRoutesMaxSize = 1000;\n  let discoveredRoutes = new Set<string>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(\n      initialMatches,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized: boolean;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(\n        null,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some((m) => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some((m) => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (\n        typeof m.route.loader === \"function\" &&\n        m.route.loader.hydrate === true\n      ) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: Set<string> = new Set();\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map<\n    string,\n    ReturnType<AgnosticPatchRoutesOnNavigationFunction>\n  >();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate: (() => void) | undefined = undefined;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (unblockBlockerHistoryUpdate) {\n          unblockBlockerHistoryUpdate();\n          unblockBlockerHistoryUpdate = undefined;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          let nextHistoryUpdatePromise = new Promise<void>((resolve) => {\n            unblockBlockerHistoryUpdate = resolve;\n          });\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked, after the url\n              // restoration is also complete.  See:\n              // https://github.com/remix-run/react-router/issues/11613\n              nextHistoryUpdatePromise.then(() => init.history.go(delta));\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      {\n        overrideNavigation: state.navigation,\n        // Proxy through any rending view transition\n        enableViewTransition: pendingViewTransitionEnabled === true,\n      }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        fogOfWar.active,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (\n          isErrorResult(result) &&\n          isRouteErrorResponse(result.error) &&\n          result.error.status === 404\n        ) {\n          pendingNavigationController = null;\n\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error,\n            },\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors,\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        state,\n        request,\n        [actionMatch],\n        matches,\n        null\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState =\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration);\n\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...(actionData !== undefined ? { actionData } : {}),\n          },\n          {\n            flushSync,\n          }\n        );\n      }\n\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: error,\n          },\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates: Partial<RouterState> = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getUpdatedActionData(\n    pendingActionResult: PendingActionResult | undefined\n  ): Record<string, RouteData> | null | undefined {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data as any,\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(\n    revalidatingFetchers: RevalidatingFetcher[]\n  ) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        undefined,\n        fetcher ? fetcher.data : undefined\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        fogOfWar.active,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      fogOfWar.active,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m: AgnosticDataRouteMatch) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId,\n        });\n        setFetcherError(key, routeId, error, { flushSync });\n        return true;\n      }\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      state,\n      fetchRequest,\n      [match],\n      requestMatches,\n      key\n    );\n    let actionResult = actionResults[match.route.id];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      state,\n      fetchRequest,\n      [match],\n      matches,\n      key\n    );\n    let result = results[match.route.id];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    isNavigation: boolean,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true || redirect.response.headers.has(\"X-Remix-Replace\")\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    state: RouterState,\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    fetcherKey: string | null\n  ): Promise<Record<string, DataResult>> {\n    let results: Record<string, DataStrategyResult>;\n    let dataResults: Record<string, DataResult> = {};\n    try {\n      results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        state,\n        request,\n        matchesToLoad,\n        matches,\n        fetcherKey,\n        manifest,\n        mapRouteProperties\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach((m) => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e,\n        };\n      });\n      return dataResults;\n    }\n\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result as Response;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            routeId,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          ),\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(\n          result\n        );\n      }\n    }\n\n    return dataResults;\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    state: RouterState,\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let currentMatches = state.matches;\n\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\n      \"loader\",\n      state,\n      request,\n      matchesToLoad,\n      matches,\n      null\n    );\n\n    let fetcherResultsPromise = Promise.all(\n      fetchersToLoad.map(async (f) => {\n        if (f.matches && f.match && f.controller) {\n          let results = await callDataStrategy(\n            \"loader\",\n            state,\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            [f.match],\n            f.matches,\n            f.key\n          );\n          let result = results[f.match.route.id];\n          // Fetcher results are keyed by fetcher key from here on out, not routeId\n          return { [f.key]: result };\n        } else {\n          return Promise.resolve({\n            [f.key]: {\n              type: ResultType.error,\n              error: getInternalRouterError(404, {\n                pathname: f.path,\n              }),\n            } as ErrorResult,\n          });\n        }\n      })\n    );\n\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce(\n      (acc, r) => Object.assign(acc, r),\n      {}\n    );\n\n    await Promise.all([\n      resolveNavigationDeferredResults(\n        matches,\n        loaderResults,\n        request.signal,\n        currentMatches,\n        state.loaderData\n      ),\n      resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname: string) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n\n    return { notFoundMatches: matches, route, error };\n  }\n\n  function handleDiscoverRouteError(\n    pathname: string,\n    discoverResult: DiscoverRoutesErrorResult\n  ) {\n    return {\n      boundaryId: findNearestBoundary(discoverResult.partialMatches).route.id,\n      error: getInternalRouterError(400, {\n        type: \"route-discovery\",\n        pathname,\n        message:\n          discoverResult.error != null && \"message\" in discoverResult.error\n            ? discoverResult.error\n            : String(discoverResult.error),\n      }),\n    };\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function checkFogOfWar(\n    matches: AgnosticDataRouteMatch[] | null,\n    routesToUse: AgnosticDataRouteObject[],\n    pathname: string\n  ): { active: boolean; matches: AgnosticDataRouteMatch[] | null } {\n    if (patchRoutesOnNavigationImpl) {\n      // Don't bother re-calling patchRouteOnMiss for a path we've already\n      // processed.  the last execution would have patched the route tree\n      // accordingly so `matches` here are already accurate.\n      if (discoveredRoutes.has(pathname)) {\n        return { active: false, matches };\n      }\n\n      if (!matches) {\n        let fogMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n\n    return { active: false, matches: null };\n  }\n\n  type DiscoverRoutesSuccessResult = {\n    type: \"success\";\n    matches: AgnosticDataRouteMatch[] | null;\n  };\n  type DiscoverRoutesErrorResult = {\n    type: \"error\";\n    error: any;\n    partialMatches: AgnosticDataRouteMatch[];\n  };\n  type DiscoverRoutesAbortedResult = { type: \"aborted\" };\n  type DiscoverRoutesResult =\n    | DiscoverRoutesSuccessResult\n    | DiscoverRoutesErrorResult\n    | DiscoverRoutesAbortedResult;\n\n  async function discoverRoutes(\n    matches: AgnosticDataRouteMatch[],\n    pathname: string,\n    signal: AbortSignal\n  ): Promise<DiscoverRoutesResult> {\n    let partialMatches: AgnosticDataRouteMatch[] | null = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      try {\n        await loadLazyRouteChildren(\n          patchRoutesOnNavigationImpl!,\n          pathname,\n          partialMatches,\n          routesToUse,\n          manifest,\n          mapRouteProperties,\n          pendingPatchRoutes,\n          signal\n        );\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: newMatches };\n      }\n\n      let newPartialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n\n      // Avoid loops if the second pass results in the same partial matches\n      if (\n        !newPartialMatches ||\n        (partialMatches.length === newPartialMatches.length &&\n          partialMatches.every(\n            (m, i) => m.route.id === newPartialMatches![i].route.id\n          ))\n      ) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: null };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function addToFifoQueue(path: string, queue: Set<string>) {\n    if (queue.size >= discoveredRoutesMaxSize) {\n      let first = queue.values().next().value;\n      queue.delete(first);\n    }\n    queue.add(path);\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  function patchRoutes(\n    routeId: string | null,\n    children: AgnosticRouteObject[]\n  ): void {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties\n    );\n\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          unstable_dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        unstable_dataStrategy\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      unstable_dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      unstable_dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null\n  ): Promise<Record<string, DataResult>> {\n    let results = await callDataStrategyImpl(\n      unstable_dataStrategy || defaultDataStrategy,\n      type,\n      null,\n      request,\n      matchesToLoad,\n      matches,\n      null,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    let dataResults: Record<string, DataResult> = {};\n    await Promise.all(\n      matches.map(async (match) => {\n        if (!(match.route.id in results)) {\n          return;\n        }\n        let result = results[match.route.id];\n        if (isRedirectDataStrategyResultResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            match.route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        dataResults[match.route.id] =\n          await convertDataStrategyResultToDataResult(result);\n      })\n    );\n    return dataResults;\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: Set<string>,\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[0]\n      : undefined;\n  let boundaryMatches = boundaryId\n    ? getLoaderMatchesUntilBoundary(matches, boundaryId)\n    : matches;\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let sawError = false;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n\n    // Track when we've encountered an error opn initial load so we don't try\n    // to run any loaders below that\n    if (isInitialLoad && state.errors && state.errors[route.id] !== undefined) {\n      sawError = true;\n    }\n\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (sawError && state.loaderData[route.id] === undefined) {\n        return false;\n      }\n\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Idempotent utility to execute patchRoutesOnNavigation() to lazily load route\n * definitions and update the routes/routeManifest\n */\nasync function loadLazyRouteChildren(\n  patchRoutesOnNavigationImpl: AgnosticPatchRoutesOnNavigationFunction,\n  path: string,\n  matches: AgnosticDataRouteMatch[],\n  routes: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  pendingRouteChildren: Map<\n    string,\n    ReturnType<typeof patchRoutesOnNavigationImpl>\n  >,\n  signal: AbortSignal\n) {\n  let key = [path, ...matches.map((m) => m.route.id)].join(\"-\");\n  try {\n    let pending = pendingRouteChildren.get(key);\n    if (!pending) {\n      pending = patchRoutesOnNavigationImpl({\n        path,\n        matches,\n        patch: (routeId, children) => {\n          if (!signal.aborted) {\n            patchRoutesImpl(\n              routeId,\n              children,\n              routes,\n              manifest,\n              mapRouteProperties\n            );\n          }\n        },\n      });\n      pendingRouteChildren.set(key, pending);\n    }\n\n    if (pending && isPromise<AgnosticRouteObject[]>(pending)) {\n      await pending;\n    }\n  } finally {\n    pendingRouteChildren.delete(key);\n  }\n}\n\nfunction patchRoutesImpl(\n  routeId: string | null,\n  children: AgnosticRouteObject[],\n  routesToUse: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction\n) {\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [routeId, \"patch\", String(route.children?.length || \"0\")],\n      manifest\n    );\n    if (route.children) {\n      route.children.push(...dataChildren);\n    } else {\n      route.children = dataChildren;\n    }\n  } else {\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [\"patch\", String(routesToUse.length || \"0\")],\n      manifest\n    );\n    routesToUse.push(...dataChildren);\n  }\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy({\n  matches,\n}: DataStrategyFunctionArgs): ReturnType<DataStrategyFunction> {\n  let matchesToLoad = matches.filter((m) => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map((m) => m.resolve()));\n  return results.reduce(\n    (acc, result, i) =>\n      Object.assign(acc, { [matchesToLoad[i].route.id]: result }),\n    {}\n  );\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  state: RouterState | null,\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  fetcherKey: string | null,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<Record<string, DataStrategyResult>> {\n  let loadRouteDefinitionsPromises = matches.map((m) =>\n    m.route.lazy\n      ? loadLazyRouteModule(m.route, mapRouteProperties, manifest)\n      : undefined\n  );\n\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some((m) => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve: DataStrategyMatch[\"resolve\"] = async (handlerOverride) => {\n      if (\n        handlerOverride &&\n        request.method === \"GET\" &&\n        (match.route.lazy || match.route.loader)\n      ) {\n        shouldLoad = true;\n      }\n      return shouldLoad\n        ? callLoaderOrAction(\n            type,\n            request,\n            match,\n            loadRoutePromise,\n            handlerOverride,\n            requestContext\n          )\n        : Promise.resolve({ type: ResultType.data, result: undefined });\n    };\n\n    return {\n      ...match,\n      shouldLoad,\n      resolve,\n    };\n  });\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext,\n  });\n\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n\n  return results;\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  loadRoutePromise: Promise<void> | undefined,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<DataStrategyResult> {\n  let result: DataStrategyResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<DataStrategyResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<DataStrategyResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<DataStrategyResult> = (async () => {\n      try {\n        let val = await (handlerOverride\n          ? handlerOverride((ctx: unknown) => actualHandler(ctx))\n          : actualHandler());\n        return { type: \"data\", result: val };\n      } catch (e) {\n        return { type: \"error\", result: e };\n      }\n    })();\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadRoutePromise,\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertDataStrategyResultToDataResult(\n  dataStrategyResult: DataStrategyResult\n): Promise<DataResult> {\n  let { result, type } = dataStrategyResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: result.init?.status,\n        };\n      }\n\n      // Convert thrown unstable_data() to ErrorResponse instances\n      result = new ErrorResponseImpl(\n        result.init?.status || 500,\n        undefined,\n        result.data\n      );\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers\n        ? new Headers(result.init.headers)\n        : undefined,\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach((match) => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: Record<string, DataResult>,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach((rf) => {\n    let { key, match, controller } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\" | \"route-discovery\";\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (type === \"route-discovery\") {\n      errorMessage =\n        `Unable to match URL \"${pathname}\" - the \\`unstable_patchRoutesOnNavigation()\\` ` +\n        `function threw the following error:\\n${message}`;\n    } else if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: Record<string, DataResult>\n): { key: string; result: RedirectResult } | undefined {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return { key, result };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isPromise<T = unknown>(val: unknown): val is Promise<T> {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\n\nfunction isDataStrategyResult(result: unknown): result is DataStrategyResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectDataStrategyResultResult(result: DataStrategyResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDataWithResponseInit(\n  value: any\n): value is DataWithResponseInit<unknown> {\n  return (\n    typeof value === \"object\" &&\n    value != null &&\n    \"type\" in value &&\n    \"data\" in value &&\n    \"init\" in value &&\n    value.type === \"DataWithResponseInit\"\n  );\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveNavigationDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  signal: AbortSignal,\n  currentMatches: AgnosticDataRouteMatch[],\n  currentLoaderData: RouteData\n) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then((result) => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveFetcherDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  revalidatingFetchers: RevalidatingFetcher[]\n) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, routeId, controller } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(\n        controller,\n        \"Expected an AbortController for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, controller.signal, true).then(\n        (result) => {\n          if (result) {\n            results[key] = result;\n          }\n        }\n      );\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n//#endregion\n"],"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_extends","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","assign","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","String","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","captureGroups","memo","paramName","splatValue","regexpSource","_","RegExp","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","DataWithResponseInit","constructor","type","AbortedDeferredError","DeferredData","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","cancel","abort","k","resolveData","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","dataStrategyImpl","unstable_dataStrategy","defaultDataStrategy","patchRoutesOnNavigationImpl","unstable_patchRoutesOnNavigation","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","v7_skipActionErrorRevalidation","unlistenHistory","discoveredRoutesMaxSize","discoveredRoutes","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","fogOfWar","checkFogOfWar","active","initialized","m","lazy","loader","errors","isRouteInitialized","hydrate","findIndex","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","pendingPatchRoutes","unblockBlockerHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","nextHistoryUpdatePromise","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","completeNavigation","_temp","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","enableViewTransition","unstable_viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","handleNavigational404","isHashChangeOnly","request","createClientSideRequest","pendingActionResult","findNearestBoundary","actionResult","handleAction","shortCircuited","routeId","isErrorResult","getLoadingNavigation","updatedMatches","handleLoaders","fetcherSubmission","getActionDataForCommit","isFogOfWar","getSubmittingNavigation","discoverResult","discoverRoutes","boundaryId","handleDiscoverRouteError","partialMatches","actionMatch","getTargetMatch","method","results","callDataStrategy","isRedirectResult","normalizeRedirectLocation","startRedirectNavigation","isDeferredResult","boundaryMatch","activeSubmission","getSubmissionFromNavigation","shouldUpdateNavigationState","getUpdatedActionData","matchesToLoad","revalidatingFetchers","getMatchesToLoad","cancelActiveDeferreds","updatedFetchers","markFetchRedirectsDone","updates","getUpdatedRevalidatingFetchers","rf","abortFetcher","abortPendingFetchRevalidations","f","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","revalidatingFetcher","getLoadingFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","detectAndHandle405Error","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResults","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","isNavigation","_temp2","redirectLocation","isDocumentReload","redirectHistoryAction","fetcherKey","dataResults","callDataStrategyImpl","isRedirectDataStrategyResultResult","normalizeRelativeRoutingRedirectResponse","convertDataStrategyResultToDataResult","fetchersToLoad","currentMatches","loaderResultsPromise","fetcherResultsPromise","all","resolveNavigationDeferredResults","resolveFetcherDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","_ref4","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","fogMatches","isNonHMR","loadLazyRouteChildren","newMatches","addToFifoQueue","newPartialMatches","queue","values","next","_internalSetRoutes","newRoutes","patchRoutes","patchRoutesImpl","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","v7_throwAbortReason","query","_temp3","requestContext","skipLoaderErrorBubbling","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp4","find","_result$activeDeferre","routeMatch","submit","loadRouteData","isDataStrategyResult","isRedirectResponse","isRouteRequest","throwStaticHandlerAbortedError","Location","loaderRequest","Request","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","reason","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","_ref5","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryMatches","isInitialLoad","skipActionErrorRevalidation","currentUrl","nextUrl","actionStatus","shouldSkipRevalidation","sawError","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","pendingRouteChildren","pending","patch","isPromise","_route$children","dataChildren","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","_ref6","shouldLoad","loadRouteDefinitionsPromises","dsMatches","loadRoutePromise","handlerOverride","callLoaderOrAction","staticContext","onReject","runHandler","handler","actualHandler","ctx","handlerPromise","val","handlerError","dataStrategyResult","contentType","isDataWithResponseInit","_result$init2","_result$init","isDeferredData","_result$init3","_result$init4","deferred","_result$init5","_result$init6","trimmedMatches","normalizedLocation","protocol","isSameBasename","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","_temp5","errorMessage","isRevalidatingLoader","unwrap","getAll","_window","transitions","sessionPositions","sessionStorage","getItem","setItem"],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/router.umd.min.js b/dist/router.umd.min.js
index 94f0ef61d2aa67eadf2ee0d49988aff4fe1d226c..bfd41fd2fefd99f42c1981612b579257b496693c 100644
--- a/dist/router.umd.min.js
+++ b/dist/router.umd.min.js
@@ -8,5 +8,5 @@
  *
  * @license MIT
  */
-!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).RemixRouter={})}(this,(function(e){"use strict";function t(){return t=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},t.apply(this,arguments)}let r=function(e){return e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE",e}({});const a="popstate";function n(e,t){if(!1===e||null==e)throw new Error(t)}function o(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function i(e,t){return{usr:e.state,key:e.key,idx:t}}function s(e,r,a,n){return void 0===a&&(a=null),t({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof r?u(r):r,{state:a,key:r&&r.key||n||Math.random().toString(36).substr(2,8)})}function l(e){let{pathname:t="/",search:r="",hash:a=""}=e;return r&&"?"!==r&&(t+="?"===r.charAt(0)?r:"?"+r),a&&"#"!==a&&(t+="#"===a.charAt(0)?a:"#"+a),t}function u(e){let t={};if(e){let r=e.indexOf("#");r>=0&&(t.hash=e.substr(r),e=e.substr(0,r));let a=e.indexOf("?");a>=0&&(t.search=e.substr(a),e=e.substr(0,a)),e&&(t.pathname=e)}return t}function c(e,o,u,c){void 0===c&&(c={});let{window:d=document.defaultView,v5Compat:h=!1}=c,f=d.history,p=r.Pop,m=null,y=v();function v(){return(f.state||{idx:null}).idx}function g(){p=r.Pop;let e=v(),t=null==e?null:e-y;y=e,m&&m({action:p,location:w.location,delta:t})}function b(e){let t="null"!==d.location.origin?d.location.origin:d.location.href,r="string"==typeof e?e:l(e);return r=r.replace(/ $/,"%20"),n(t,"No window.location.(origin|href) available to create URL for href: "+r),new URL(r,t)}null==y&&(y=0,f.replaceState(t({},f.state,{idx:y}),""));let w={get action(){return p},get location(){return e(d,f)},listen(e){if(m)throw new Error("A history only accepts one active listener");return d.addEventListener(a,g),m=e,()=>{d.removeEventListener(a,g),m=null}},createHref:e=>o(d,e),createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){p=r.Push;let a=s(w.location,e,t);u&&u(a,e),y=v()+1;let n=i(a,y),o=w.createHref(a);try{f.pushState(n,"",o)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;d.location.assign(o)}h&&m&&m({action:p,location:w.location,delta:1})},replace:function(e,t){p=r.Replace;let a=s(w.location,e,t);u&&u(a,e),y=v();let n=i(a,y),o=w.createHref(a);f.replaceState(n,"",o),h&&m&&m({action:p,location:w.location,delta:0})},go:e=>f.go(e)};return w}let d=function(e){return e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error",e}({});const h=new Set(["lazy","caseSensitive","path","id","index","children"]);function f(e,r,a,o){return void 0===a&&(a=[]),void 0===o&&(o={}),e.map(((e,i)=>{let s=[...a,String(i)],l="string"==typeof e.id?e.id:s.join("-");if(n(!0!==e.index||!e.children,"Cannot specify children on an index route"),n(!o[l],'Found a route id collision on id "'+l+"\".  Route id's must be globally unique within Data Router usages"),function(e){return!0===e.index}(e)){let a=t({},e,r(e),{id:l});return o[l]=a,a}{let a=t({},e,r(e),{id:l,children:void 0});return o[l]=a,e.children&&(a.children=f(e.children,r,s,o)),a}}))}function p(e,t,r){return void 0===r&&(r="/"),m(e,t,r,!1)}function m(e,t,r,a){let n=P(("string"==typeof t?u(t):t).pathname||"/",r);if(null==n)return null;let o=v(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,r)=>e===t[r]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e){let t=E(n);i=S(o[e],t,a)}return i}function y(e,t){let{route:r,pathname:a,params:n}=e;return{id:r.id,pathname:a,params:n,data:t[r.id],handle:r.handle}}function v(e,t,r,a){void 0===t&&(t=[]),void 0===r&&(r=[]),void 0===a&&(a="");let o=(e,o,i)=>{let s={relativePath:void 0===i?e.path||"":i,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};s.relativePath.startsWith("/")&&(n(s.relativePath.startsWith(a),'Absolute route path "'+s.relativePath+'" nested under path "'+a+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),s.relativePath=s.relativePath.slice(a.length));let l=k([a,s.relativePath]),u=r.concat(s);e.children&&e.children.length>0&&(n(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),v(e.children,t,u,l)),(null!=e.path||e.index)&&t.push({path:l,score:D(l,e.index),routesMeta:u})};return e.forEach(((e,t)=>{var r;if(""!==e.path&&null!=(r=e.path)&&r.includes("?"))for(let r of g(e.path))o(e,t,r);else o(e,t)})),t}function g(e){let t=e.split("/");if(0===t.length)return[];let[r,...a]=t,n=r.endsWith("?"),o=r.replace(/\?$/,"");if(0===a.length)return n?[o,""]:[o];let i=g(a.join("/")),s=[];return s.push(...i.map((e=>""===e?o:[o,e].join("/")))),n&&s.push(...i),s.map((t=>e.startsWith("/")&&""===t?"/":t))}const b=/^:[\w-]+$/,w=e=>"*"===e;function D(e,t){let r=e.split("/"),a=r.length;return r.some(w)&&(a+=-2),t&&(a+=2),r.filter((e=>!w(e))).reduce(((e,t)=>e+(b.test(t)?3:""===t?1:10)),a)}function S(e,t,r){void 0===r&&(r=!1);let{routesMeta:a}=e,n={},o="/",i=[];for(let e=0;e<a.length;++e){let s=a[e],l=e===a.length-1,u="/"===o?t:t.slice(o.length)||"/",c=R({path:s.relativePath,caseSensitive:s.caseSensitive,end:l},u),d=s.route;if(!c&&l&&r&&!a[a.length-1].route.index&&(c=R({path:s.relativePath,caseSensitive:s.caseSensitive,end:!1},u)),!c)return null;Object.assign(n,c.params),i.push({params:n,pathname:k([o,c.pathname]),pathnameBase:_(k([o,c.pathnameBase])),route:d}),"/"!==c.pathnameBase&&(o=k([o,c.pathnameBase]))}return i}function R(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[r,a]=function(e,t,r){void 0===t&&(t=!1);void 0===r&&(r=!0);o("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let a=[],n="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,r)=>(a.push({paramName:t,isOptional:null!=r}),r?"/?([^\\/]+)?":"/([^\\/]+)")));e.endsWith("*")?(a.push({paramName:"*"}),n+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):r?n+="\\/*$":""!==e&&"/"!==e&&(n+="(?:(?=\\/|$))");return[new RegExp(n,t?void 0:"i"),a]}(e.path,e.caseSensitive,e.end),n=t.match(r);if(!n)return null;let i=n[0],s=i.replace(/(.)\/+$/,"$1"),l=n.slice(1);return{params:a.reduce(((e,t,r)=>{let{paramName:a,isOptional:n}=t;if("*"===a){let e=l[r]||"";s=i.slice(0,i.length-e.length).replace(/(.)\/+$/,"$1")}const o=l[r];return e[a]=n&&!o?void 0:(o||"").replace(/%2F/g,"/"),e}),{}),pathname:i,pathnameBase:s,pattern:e}}function E(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return o(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function P(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let r=t.endsWith("/")?t.length-1:t.length,a=e.charAt(r);return a&&"/"!==a?null:e.slice(r)||"/"}function x(e,t){void 0===t&&(t="/");let{pathname:r,search:a="",hash:n=""}="string"==typeof e?u(e):e,o=r?r.startsWith("/")?r:function(e,t){let r=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?r.length>1&&r.pop():"."!==e&&r.push(e)})),r.length>1?r.join("/"):"/"}(r,t):t;return{pathname:o,search:C(a),hash:T(n)}}function A(e,t,r,a){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(a)+"].  Please separate it out to the `to."+r+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function L(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function M(e,t){let r=L(e);return t?r.map(((e,t)=>t===r.length-1?e.pathname:e.pathnameBase)):r.map((e=>e.pathnameBase))}function j(e,r,a,o){let i;void 0===o&&(o=!1),"string"==typeof e?i=u(e):(i=t({},e),n(!i.pathname||!i.pathname.includes("?"),A("?","pathname","search",i)),n(!i.pathname||!i.pathname.includes("#"),A("#","pathname","hash",i)),n(!i.search||!i.search.includes("#"),A("#","search","hash",i)));let s,l=""===e||""===i.pathname,c=l?"/":i.pathname;if(null==c)s=a;else{let e=r.length-1;if(!o&&c.startsWith("..")){let t=c.split("/");for(;".."===t[0];)t.shift(),e-=1;i.pathname=t.join("/")}s=e>=0?r[e]:"/"}let d=x(i,s),h=c&&"/"!==c&&c.endsWith("/"),f=(l||"."===c)&&a.endsWith("/");return d.pathname.endsWith("/")||!h&&!f||(d.pathname+="/"),d}const k=e=>e.join("/").replace(/\/\/+/g,"/"),_=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),C=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",T=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";class O{constructor(e,t){this.type="DataWithResponseInit",this.data=e,this.init=t||null}}class U extends Error{}class I{constructor(e,t){let r;this.pendingKeysSet=new Set,this.subscribers=new Set,this.deferredKeys=[],n(e&&"object"==typeof e&&!Array.isArray(e),"defer() only accepts plain objects"),this.abortPromise=new Promise(((e,t)=>r=t)),this.controller=new AbortController;let a=()=>r(new U("Deferred data aborted"));this.unlistenAbortSignal=()=>this.controller.signal.removeEventListener("abort",a),this.controller.signal.addEventListener("abort",a),this.data=Object.entries(e).reduce(((e,t)=>{let[r,a]=t;return Object.assign(e,{[r]:this.trackPromise(r,a)})}),{}),this.done&&this.unlistenAbortSignal(),this.init=t}trackPromise(e,t){if(!(t instanceof Promise))return t;this.deferredKeys.push(e),this.pendingKeysSet.add(e);let r=Promise.race([t,this.abortPromise]).then((t=>this.onSettle(r,e,void 0,t)),(t=>this.onSettle(r,e,t)));return r.catch((()=>{})),Object.defineProperty(r,"_tracked",{get:()=>!0}),r}onSettle(e,t,r,a){if(this.controller.signal.aborted&&r instanceof U)return this.unlistenAbortSignal(),Object.defineProperty(e,"_error",{get:()=>r}),Promise.reject(r);if(this.pendingKeysSet.delete(t),this.done&&this.unlistenAbortSignal(),void 0===r&&void 0===a){let r=new Error('Deferred data for key "'+t+'" resolved/rejected with `undefined`, you must resolve/reject with a value or `null`.');return Object.defineProperty(e,"_error",{get:()=>r}),this.emit(!1,t),Promise.reject(r)}return void 0===a?(Object.defineProperty(e,"_error",{get:()=>r}),this.emit(!1,t),Promise.reject(r)):(Object.defineProperty(e,"_data",{get:()=>a}),this.emit(!1,t),a)}emit(e,t){this.subscribers.forEach((r=>r(e,t)))}subscribe(e){return this.subscribers.add(e),()=>this.subscribers.delete(e)}cancel(){this.controller.abort(),this.pendingKeysSet.forEach(((e,t)=>this.pendingKeysSet.delete(t))),this.emit(!0)}async resolveData(e){let t=!1;if(!this.done){let r=()=>this.cancel();e.addEventListener("abort",r),t=await new Promise((t=>{this.subscribe((a=>{e.removeEventListener("abort",r),(a||this.done)&&t(a)}))}))}return t}get done(){return 0===this.pendingKeysSet.size}get unwrappedData(){return n(null!==this.data&&this.done,"Can only unwrap data on initialized and settled deferreds"),Object.entries(this.data).reduce(((e,t)=>{let[r,a]=t;return Object.assign(e,{[r]:H(a)})}),{})}get pendingKeys(){return Array.from(this.pendingKeysSet)}}function H(e){if(!function(e){return e instanceof Promise&&!0===e._tracked}(e))return e;if(e._error)throw e._error;return e._data}const z=function(e,r){void 0===r&&(r=302);let a=r;"number"==typeof a?a={status:a}:void 0===a.status&&(a.status=302);let n=new Headers(a.headers);return n.set("Location",e),new Response(null,t({},a,{headers:n}))};class F{constructor(e,t,r,a){void 0===a&&(a=!1),this.status=e,this.statusText=t||"",this.internal=a,r instanceof Error?(this.data=r.toString(),this.error=r):this.data=r}}function N(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}const B=["post","put","patch","delete"],W=new Set(B),$=["get",...B],q=new Set($),K=new Set([301,302,303,307,308]),Y=new Set([307,308]),J={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},V={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},X={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},G=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Q=e=>({hasErrorBoundary:Boolean(e.hasErrorBoundary)}),Z="remix-router-transitions";const ee=Symbol("deferred");function te(e,t,r){if(r.v7_throwAbortReason&&void 0!==e.signal.reason)throw e.signal.reason;throw new Error((t?"queryRoute":"query")+"() call aborted: "+e.method+" "+e.url)}function re(e,t,r,a,n,o,i,s){let u,c;if(i){u=[];for(let e of t)if(u.push(e),e.route.id===i){c=e;break}}else u=t,c=t[t.length-1];let d=j(n||".",M(u,o),P(e.pathname,r)||e.pathname,"path"===s);return null==n&&(d.search=e.search,d.hash=e.hash),null!=n&&""!==n&&"."!==n||!c||!c.route.index||ze(d.search)||(d.search=d.search?d.search.replace(/^\?/,"?index&"):"?index"),a&&"/"!==r&&(d.pathname="/"===d.pathname?r:k([r,d.pathname])),l(d)}function ae(e,t,r,a){if(!a||!function(e){return null!=e&&("formData"in e&&null!=e.formData||"body"in e&&void 0!==e.body)}(a))return{path:r};if(a.formMethod&&!Te(a.formMethod))return{path:r,error:Ee(405,{method:a.formMethod})};let o,i,s=()=>({path:r,error:Ee(400,{type:"invalid-body"})}),c=a.formMethod||"get",d=e?c.toUpperCase():c.toLowerCase(),h=xe(r);if(void 0!==a.body){if("text/plain"===a.formEncType){if(!Oe(d))return s();let e="string"==typeof a.body?a.body:a.body instanceof FormData||a.body instanceof URLSearchParams?Array.from(a.body.entries()).reduce(((e,t)=>{let[r,a]=t;return""+e+r+"="+a+"\n"}),""):String(a.body);return{path:r,submission:{formMethod:d,formAction:h,formEncType:a.formEncType,formData:void 0,json:void 0,text:e}}}if("application/json"===a.formEncType){if(!Oe(d))return s();try{let e="string"==typeof a.body?JSON.parse(a.body):a.body;return{path:r,submission:{formMethod:d,formAction:h,formEncType:a.formEncType,formData:void 0,json:e,text:void 0}}}catch(e){return s()}}}if(n("function"==typeof FormData,"FormData is not available in this environment"),a.formData)o=ye(a.formData),i=a.formData;else if(a.body instanceof FormData)o=ye(a.body),i=a.body;else if(a.body instanceof URLSearchParams)o=a.body,i=ve(o);else if(null==a.body)o=new URLSearchParams,i=new FormData;else try{o=new URLSearchParams(a.body),i=ve(o)}catch(e){return s()}let f={formMethod:d,formAction:h,formEncType:a&&a.formEncType||"application/x-www-form-urlencoded",formData:i,json:void 0,text:void 0};if(Oe(f.formMethod))return{path:r,submission:f};let p=u(r);return t&&p.search&&ze(p.search)&&o.append("index",""),p.search="?"+o,{path:l(p),submission:f}}function ne(e,t){let r=e;if(t){let a=e.findIndex((e=>e.route.id===t));a>=0&&(r=e.slice(0,a))}return r}function oe(e,r,a,n,o,i,s,l,u,c,d,h,f,m,y,v){let g=v?Me(v[1])?v[1].error:v[1].data:void 0,b=e.createURL(r.location),w=e.createURL(o),D=v&&Me(v[1])?v[0]:void 0,S=D?ne(a,D):a,R=v?v[1].statusCode:void 0,E=s&&R&&R>=400,P=S.filter(((e,a)=>{let{route:o}=e;if(o.lazy)return!0;if(null==o.loader)return!1;if(i)return!("function"==typeof o.loader&&!o.loader.hydrate)||void 0===r.loaderData[o.id]&&(!r.errors||void 0===r.errors[o.id]);if(function(e,t,r){let a=!t||r.route.id!==t.route.id,n=void 0===e[r.route.id];return a||n}(r.loaderData,r.matches[a],e)||u.some((t=>t===e.route.id)))return!0;let s=r.matches[a],c=e;return se(e,t({currentUrl:b,currentParams:s.params,nextUrl:w,nextParams:c.params},n,{actionResult:g,actionStatus:R,defaultShouldRevalidate:!E&&(l||b.pathname+b.search===w.pathname+w.search||b.search!==w.search||ie(s,c))}))})),x=[];return h.forEach(((e,o)=>{if(i||!a.some((t=>t.route.id===e.routeId))||d.has(o))return;let s=p(m,e.path,y);if(!s)return void x.push({key:o,routeId:e.routeId,path:e.path,matches:null,match:null,controller:null});let u=r.fetchers.get(o),h=Fe(s,e.path),v=!1;f.has(o)?v=!1:c.has(o)?(c.delete(o),v=!0):v=u&&"idle"!==u.state&&void 0===u.data?l:se(h,t({currentUrl:b,currentParams:r.matches[r.matches.length-1].params,nextUrl:w,nextParams:a[a.length-1].params},n,{actionResult:g,actionStatus:R,defaultShouldRevalidate:!E&&l})),v&&x.push({key:o,routeId:e.routeId,path:e.path,matches:s,match:h,controller:new AbortController})})),[P,x]}function ie(e,t){let r=e.route.path;return e.pathname!==t.pathname||null!=r&&r.endsWith("*")&&e.params["*"]!==t.params["*"]}function se(e,t){if(e.route.shouldRevalidate){let r=e.route.shouldRevalidate(t);if("boolean"==typeof r)return r}return t.defaultShouldRevalidate}async function le(e,t,r,a,n,o,i,s){let l=[t,...r.map((e=>e.route.id))].join("-");try{let c=i.get(l);c||(c=e({path:t,matches:r,patch:(e,t)=>{s.aborted||ue(e,t,a,n,o)}}),i.set(l,c)),c&&("object"==typeof(u=c)&&null!=u&&"then"in u)&&await c}finally{i.delete(l)}var u}function ue(e,t,r,a,o){if(e){var i;let r=a[e];n(r,"No route found to patch children into: routeId = "+e);let s=f(t,o,[e,"patch",String((null==(i=r.children)?void 0:i.length)||"0")],a);r.children?r.children.push(...s):r.children=s}else{let e=f(t,o,["patch",String(r.length||"0")],a);r.push(...e)}}async function ce(e){let{matches:t}=e,r=t.filter((e=>e.shouldLoad));return(await Promise.all(r.map((e=>e.resolve())))).reduce(((e,t,a)=>Object.assign(e,{[r[a].route.id]:t})),{})}async function de(e,r,a,i,s,l,u,c,f,p){let m=l.map((e=>e.route.lazy?async function(e,r,a){if(!e.lazy)return;let i=await e.lazy();if(!e.lazy)return;let s=a[e.id];n(s,"No route found in manifest");let l={};for(let e in i){let t=void 0!==s[e]&&"hasErrorBoundary"!==e;o(!t,'Route "'+s.id+'" has a static property "'+e+'" defined but its lazy function is also returning a value for this property. The lazy route property "'+e+'" will be ignored.'),t||h.has(e)||(l[e]=i[e])}Object.assign(s,l),Object.assign(s,t({},r(s),{lazy:void 0}))}(e.route,f,c):void 0)),y=l.map(((e,a)=>{let o=m[a],l=s.some((t=>t.route.id===e.route.id));return t({},e,{shouldLoad:l,resolve:async t=>(t&&"GET"===i.method&&(e.route.lazy||e.route.loader)&&(l=!0),l?async function(e,t,r,a,o,i){let s,l,u=a=>{let n,s=new Promise(((e,t)=>n=t));l=()=>n(),t.signal.addEventListener("abort",l);let u=n=>"function"!=typeof a?Promise.reject(new Error('You cannot call the handler for a route which defines a boolean "'+e+'" [routeId: '+r.route.id+"]")):a({request:t,params:r.params,context:i},...void 0!==n?[n]:[]),c=(async()=>{try{return{type:"data",result:await(o?o((e=>u(e))):u())}}catch(e){return{type:"error",result:e}}})();return Promise.race([c,s])};try{let o=r.route[e];if(a)if(o){let e,[t]=await Promise.all([u(o).catch((t=>{e=t})),a]);if(void 0!==e)throw e;s=t}else{if(await a,o=r.route[e],!o){if("action"===e){let e=new URL(t.url),a=e.pathname+e.search;throw Ee(405,{method:t.method,pathname:a,routeId:r.route.id})}return{type:d.data,result:void 0}}s=await u(o)}else{if(!o){let e=new URL(t.url);throw Ee(404,{pathname:e.pathname+e.search})}s=await u(o)}n(void 0!==s.result,"You defined "+("action"===e?"an action":"a loader")+' for route "'+r.route.id+"\" but didn't return anything from your `"+e+"` function. Please return a value or `null`.")}catch(e){return{type:d.error,result:e}}finally{l&&t.signal.removeEventListener("abort",l)}return s}(r,i,e,o,t,p):Promise.resolve({type:d.data,result:void 0}))})})),v=await e({matches:y,request:i,params:l[0].params,fetcherKey:u,context:p});try{await Promise.all(m)}catch(e){}return v}async function he(e){let{result:t,type:r}=e;if(Ce(t)){let e;try{let r=t.headers.get("Content-Type");e=r&&/\bapplication\/json\b/.test(r)?null==t.body?null:await t.json():await t.text()}catch(e){return{type:d.error,error:e}}return r===d.error?{type:d.error,error:new F(t.status,t.statusText,e),statusCode:t.status,headers:t.headers}:{type:d.data,data:e,statusCode:t.status,headers:t.headers}}if(r===d.error){if(ke(t)){var a,n;if(t.data instanceof Error)return{type:d.error,error:t.data,statusCode:null==(n=t.init)?void 0:n.status};t=new F((null==(a=t.init)?void 0:a.status)||500,void 0,t.data)}return{type:d.error,error:t,statusCode:N(t)?t.status:void 0}}var o,i,s,l;return _e(t)?{type:d.deferred,deferredData:t,statusCode:null==(o=t.init)?void 0:o.status,headers:(null==(i=t.init)?void 0:i.headers)&&new Headers(t.init.headers)}:ke(t)?{type:d.data,data:t.data,statusCode:null==(s=t.init)?void 0:s.status,headers:null!=(l=t.init)&&l.headers?new Headers(t.init.headers):void 0}:{type:d.data,data:t}}function fe(e,t,r,a,o,i){let s=e.headers.get("Location");if(n(s,"Redirects returned/thrown from loaders/actions must have a Location header"),!G.test(s)){let n=a.slice(0,a.findIndex((e=>e.route.id===r))+1);s=re(new URL(t.url),n,o,!0,s,i),e.headers.set("Location",s)}return e}function pe(e,t,r){if(G.test(e)){let a=e,n=a.startsWith("//")?new URL(t.protocol+a):new URL(a),o=null!=P(n.pathname,r);if(n.origin===t.origin&&o)return n.pathname+n.search+n.hash}return e}function me(e,t,r,a){let n=e.createURL(xe(t)).toString(),o={signal:r};if(a&&Oe(a.formMethod)){let{formMethod:e,formEncType:t}=a;o.method=e.toUpperCase(),"application/json"===t?(o.headers=new Headers({"Content-Type":t}),o.body=JSON.stringify(a.json)):"text/plain"===t?o.body=a.text:"application/x-www-form-urlencoded"===t&&a.formData?o.body=ye(a.formData):o.body=a.formData}return new Request(n,o)}function ye(e){let t=new URLSearchParams;for(let[r,a]of e.entries())t.append(r,"string"==typeof a?a:a.name);return t}function ve(e){let t=new FormData;for(let[r,a]of e.entries())t.append(r,a);return t}function ge(e,t,r,a,o){let i,s={},l=null,u=!1,c={},d=r&&Me(r[1])?r[1].error:void 0;return e.forEach((r=>{if(!(r.route.id in t))return;let h=r.route.id,f=t[h];if(n(!je(f),"Cannot handle redirect results in processLoaderData"),Me(f)){let t=f.error;if(void 0!==d&&(t=d,d=void 0),l=l||{},o)l[h]=t;else{let r=Se(e,h);null==l[r.route.id]&&(l[r.route.id]=t)}s[h]=void 0,u||(u=!0,i=N(f.error)?f.error.status:500),f.headers&&(c[h]=f.headers)}else Le(f)?(a.set(h,f.deferredData),s[h]=f.deferredData.data,null==f.statusCode||200===f.statusCode||u||(i=f.statusCode),f.headers&&(c[h]=f.headers)):(s[h]=f.data,f.statusCode&&200!==f.statusCode&&!u&&(i=f.statusCode),f.headers&&(c[h]=f.headers))})),void 0!==d&&r&&(l={[r[0]]:d},s[r[0]]=void 0),{loaderData:s,errors:l,statusCode:i||200,loaderHeaders:c}}function be(e,r,a,o,i,s,l,u){let{loaderData:c,errors:d}=ge(r,o,i,u,!1);return s.forEach((r=>{let{key:a,match:o,controller:i}=r,s=l[a];if(n(s,"Did not find corresponding fetcher result"),!i||!i.signal.aborted)if(Me(s)){let r=Se(e.matches,null==o?void 0:o.route.id);d&&d[r.route.id]||(d=t({},d,{[r.route.id]:s.error})),e.fetchers.delete(a)}else if(je(s))n(!1,"Unhandled fetcher revalidation redirect");else if(Le(s))n(!1,"Unhandled fetcher deferred data");else{let t=qe(s.data);e.fetchers.set(a,t)}})),{loaderData:c,errors:d}}function we(e,r,a,n){let o=t({},r);for(let t of a){let a=t.route.id;if(r.hasOwnProperty(a)?void 0!==r[a]&&(o[a]=r[a]):void 0!==e[a]&&t.route.loader&&(o[a]=e[a]),n&&n.hasOwnProperty(a))break}return o}function De(e){return e?Me(e[1])?{actionData:{}}:{actionData:{[e[0]]:e[1].data}}:{}}function Se(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function Re(e){let t=1===e.length?e[0]:e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function Ee(e,t){let{pathname:r,routeId:a,method:n,type:o,message:i}=void 0===t?{}:t,s="Unknown Server Error",l="Unknown @remix-run/router error";return 400===e?(s="Bad Request","route-discovery"===o?l='Unable to match URL "'+r+'" - the `unstable_patchRoutesOnNavigation()` function threw the following error:\n'+i:n&&r&&a?l="You made a "+n+' request to "'+r+'" but did not provide a `loader` for route "'+a+'", so there is no way to handle the request.':"defer-action"===o?l="defer() is not supported in actions":"invalid-body"===o&&(l="Unable to encode submission body")):403===e?(s="Forbidden",l='Route "'+a+'" does not match URL "'+r+'"'):404===e?(s="Not Found",l='No route matches URL "'+r+'"'):405===e&&(s="Method Not Allowed",n&&r&&a?l="You made a "+n.toUpperCase()+' request to "'+r+'" but did not provide an `action` for route "'+a+'", so there is no way to handle the request.':n&&(l='Invalid request method "'+n.toUpperCase()+'"')),new F(e||500,s,new Error(l),!0)}function Pe(e){let t=Object.entries(e);for(let e=t.length-1;e>=0;e--){let[r,a]=t[e];if(je(a))return{key:r,result:a}}}function xe(e){return l(t({},"string"==typeof e?u(e):e,{hash:""}))}function Ae(e){return Ce(e.result)&&K.has(e.result.status)}function Le(e){return e.type===d.deferred}function Me(e){return e.type===d.error}function je(e){return(e&&e.type)===d.redirect}function ke(e){return"object"==typeof e&&null!=e&&"type"in e&&"data"in e&&"init"in e&&"DataWithResponseInit"===e.type}function _e(e){let t=e;return t&&"object"==typeof t&&"object"==typeof t.data&&"function"==typeof t.subscribe&&"function"==typeof t.cancel&&"function"==typeof t.resolveData}function Ce(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"object"==typeof e.headers&&void 0!==e.body}function Te(e){return q.has(e.toLowerCase())}function Oe(e){return W.has(e.toLowerCase())}async function Ue(e,t,r,a,n){let o=Object.entries(t);for(let i=0;i<o.length;i++){let[s,l]=o[i],u=e.find((e=>(null==e?void 0:e.route.id)===s));if(!u)continue;let c=a.find((e=>e.route.id===u.route.id)),d=null!=c&&!ie(c,u)&&void 0!==(n&&n[u.route.id]);Le(l)&&d&&await He(l,r,!1).then((e=>{e&&(t[s]=e)}))}}async function Ie(e,t,r){for(let a=0;a<r.length;a++){let{key:o,routeId:i,controller:s}=r[a],l=t[o];e.find((e=>(null==e?void 0:e.route.id)===i))&&(Le(l)&&(n(s,"Expected an AbortController for revalidating fetcher deferred result"),await He(l,s.signal,!0).then((e=>{e&&(t[o]=e)}))))}}async function He(e,t,r){if(void 0===r&&(r=!1),!await e.deferredData.resolveData(t)){if(r)try{return{type:d.data,data:e.deferredData.unwrappedData}}catch(e){return{type:d.error,error:e}}return{type:d.data,data:e.deferredData.data}}}function ze(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function Fe(e,t){let r="string"==typeof t?u(t).search:t.search;if(e[e.length-1].route.index&&ze(r||""))return e[e.length-1];let a=L(e);return a[a.length-1]}function Ne(e){let{formMethod:t,formAction:r,formEncType:a,text:n,formData:o,json:i}=e;if(t&&r&&a)return null!=n?{formMethod:t,formAction:r,formEncType:a,formData:void 0,json:void 0,text:n}:null!=o?{formMethod:t,formAction:r,formEncType:a,formData:o,json:void 0,text:void 0}:void 0!==i?{formMethod:t,formAction:r,formEncType:a,formData:void 0,json:i,text:void 0}:void 0}function Be(e,t){if(t){return{state:"loading",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}return{state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function We(e,t){return{state:"submitting",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}function $e(e,t){if(e){return{state:"loading",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t}}return{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function qe(e){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e}}e.AbortedDeferredError=U,e.Action=r,e.IDLE_BLOCKER=X,e.IDLE_FETCHER=V,e.IDLE_NAVIGATION=J,e.UNSAFE_DEFERRED_SYMBOL=ee,e.UNSAFE_DeferredData=I,e.UNSAFE_ErrorResponseImpl=F,e.UNSAFE_convertRouteMatchToUiMatch=y,e.UNSAFE_convertRoutesToDataRoutes=f,e.UNSAFE_decodePath=E,e.UNSAFE_getResolveToMatches=M,e.UNSAFE_invariant=n,e.UNSAFE_warning=o,e.createBrowserHistory=function(e){return void 0===e&&(e={}),c((function(e,t){let{pathname:r,search:a,hash:n}=e.location;return s("",{pathname:r,search:a,hash:n},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:l(t)}),null,e)},e.createHashHistory=function(e){return void 0===e&&(e={}),c((function(e,t){let{pathname:r="/",search:a="",hash:n=""}=u(e.location.hash.substr(1));return r.startsWith("/")||r.startsWith(".")||(r="/"+r),s("",{pathname:r,search:a,hash:n},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let r=e.document.querySelector("base"),a="";if(r&&r.getAttribute("href")){let t=e.location.href,r=t.indexOf("#");a=-1===r?t:t.slice(0,r)}return a+"#"+("string"==typeof t?t:l(t))}),(function(e,t){o("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),e)},e.createMemoryHistory=function(e){void 0===e&&(e={});let t,{initialEntries:a=["/"],initialIndex:n,v5Compat:i=!1}=e;t=a.map(((e,t)=>m(e,"string"==typeof e?null:e.state,0===t?"default":void 0)));let c=f(null==n?t.length-1:n),d=r.Pop,h=null;function f(e){return Math.min(Math.max(e,0),t.length-1)}function p(){return t[c]}function m(e,r,a){void 0===r&&(r=null);let n=s(t?p().pathname:"/",e,r,a);return o("/"===n.pathname.charAt(0),"relative pathnames are not supported in memory history: "+JSON.stringify(e)),n}function y(e){return"string"==typeof e?e:l(e)}return{get index(){return c},get action(){return d},get location(){return p()},createHref:y,createURL:e=>new URL(y(e),"http://localhost"),encodeLocation(e){let t="string"==typeof e?u(e):e;return{pathname:t.pathname||"",search:t.search||"",hash:t.hash||""}},push(e,a){d=r.Push;let n=m(e,a);c+=1,t.splice(c,t.length,n),i&&h&&h({action:d,location:n,delta:1})},replace(e,a){d=r.Replace;let n=m(e,a);t[c]=n,i&&h&&h({action:d,location:n,delta:0})},go(e){d=r.Pop;let a=f(c+e),n=t[a];c=a,h&&h({action:d,location:n,delta:e})},listen:e=>(h=e,()=>{h=null})}},e.createPath=l,e.createRouter=function(e){const a=e.window?e.window:"undefined"!=typeof window?window:void 0,i=void 0!==a&&void 0!==a.document&&void 0!==a.document.createElement,l=!i;let u;if(n(e.routes.length>0,"You must provide a non-empty routes array to createRouter"),e.mapRouteProperties)u=e.mapRouteProperties;else if(e.detectErrorBoundary){let t=e.detectErrorBoundary;u=e=>({hasErrorBoundary:t(e)})}else u=Q;let c,h,v,g={},b=f(e.routes,u,void 0,g),w=e.basename||"/",D=e.unstable_dataStrategy||ce,S=e.unstable_patchRoutesOnNavigation,R=t({v7_fetcherPersist:!1,v7_normalizeFormMethod:!1,v7_partialHydration:!1,v7_prependBasename:!1,v7_relativeSplatPath:!1,v7_skipActionErrorRevalidation:!1},e.future),E=null,x=new Set,A=new Set,L=null,M=null,j=null,k=null!=e.hydrationData,_=p(b,e.history.location,w),C=null;if(null==_&&!S){let t=Ee(404,{pathname:e.history.location.pathname}),{matches:r,route:a}=Re(b);_=r,C={[a.id]:t}}if(_&&!e.hydrationData){ft(_,b,e.history.location.pathname).active&&(_=null)}if(_)if(_.some((e=>e.route.lazy)))h=!1;else if(_.some((e=>e.route.loader)))if(R.v7_partialHydration){let t=e.hydrationData?e.hydrationData.loaderData:null,r=e.hydrationData?e.hydrationData.errors:null,a=e=>!e.route.loader||("function"!=typeof e.route.loader||!0!==e.route.loader.hydrate)&&(t&&void 0!==t[e.route.id]||r&&void 0!==r[e.route.id]);if(r){let e=_.findIndex((e=>void 0!==r[e.route.id]));h=_.slice(0,e+1).every(a)}else h=_.every(a)}else h=null!=e.hydrationData;else h=!0;else if(h=!1,_=[],R.v7_partialHydration){let t=ft(null,b,e.history.location.pathname);t.active&&t.matches&&(_=t.matches)}let T,O,U={historyAction:e.history.action,location:e.history.location,matches:_,initialized:h,navigation:J,restoreScrollPosition:null==e.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||C,fetchers:new Map,blockers:new Map},I=r.Pop,H=!1,z=!1,F=new Map,B=null,W=!1,$=!1,q=[],K=new Set,ee=new Map,te=0,ne=-1,ie=new Map,se=new Set,ye=new Map,ve=new Map,ge=new Set,xe=new Map,ke=new Map,_e=new Map;function Ce(e,r){void 0===r&&(r={}),U=t({},U,e);let a=[],n=[];R.v7_fetcherPersist&&U.fetchers.forEach(((e,t)=>{"idle"===e.state&&(ge.has(t)?n.push(t):a.push(t))})),[...x].forEach((e=>e(U,{deletedFetchers:n,unstable_viewTransitionOpts:r.viewTransitionOpts,unstable_flushSync:!0===r.flushSync}))),R.v7_fetcherPersist&&(a.forEach((e=>U.fetchers.delete(e))),n.forEach((e=>et(e))))}function Te(a,n,o){var i,s;let l,{flushSync:u}=void 0===o?{}:o,d=null!=U.actionData&&null!=U.navigation.formMethod&&Oe(U.navigation.formMethod)&&"loading"===U.navigation.state&&!0!==(null==(i=a.state)?void 0:i._isRedirect);l=n.actionData?Object.keys(n.actionData).length>0?n.actionData:null:d?U.actionData:null;let h=n.loaderData?we(U.loaderData,n.loaderData,n.matches||[],n.errors):U.loaderData,f=U.blockers;f.size>0&&(f=new Map(f),f.forEach(((e,t)=>f.set(t,X))));let p,m=!0===H||null!=U.navigation.formMethod&&Oe(U.navigation.formMethod)&&!0!==(null==(s=a.state)?void 0:s._isRedirect);if(c&&(b=c,c=void 0),W||I===r.Pop||(I===r.Push?e.history.push(a,a.state):I===r.Replace&&e.history.replace(a,a.state)),I===r.Pop){let e=F.get(U.location.pathname);e&&e.has(a.pathname)?p={currentLocation:U.location,nextLocation:a}:F.has(a.pathname)&&(p={currentLocation:a,nextLocation:U.location})}else if(z){let e=F.get(U.location.pathname);e?e.add(a.pathname):(e=new Set([a.pathname]),F.set(U.location.pathname,e)),p={currentLocation:U.location,nextLocation:a}}Ce(t({},n,{actionData:l,loaderData:h,historyAction:I,location:a,initialized:!0,navigation:J,revalidation:"idle",restoreScrollPosition:ht(a,n.matches||U.matches),preventScrollReset:m,blockers:f}),{viewTransitionOpts:p,flushSync:!0===u}),I=r.Pop,H=!1,z=!1,W=!1,$=!1,q=[]}async function ze(a,n,o){T&&T.abort(),T=null,I=a,W=!0===(o&&o.startUninterruptedRevalidation),function(e,t){if(L&&j){let r=dt(e,t);L[r]=j()}}(U.location,U.matches),H=!0===(o&&o.preventScrollReset),z=!0===(o&&o.enableViewTransition);let i=c||b,s=o&&o.overrideNavigation,l=p(i,n,w),u=!0===(o&&o.flushSync),h=ft(l,i,n.pathname);if(h.active&&h.matches&&(l=h.matches),!l){let{error:e,notFoundMatches:t,route:r}=lt(n.pathname);return void Te(n,{matches:t,loaderData:{},errors:{[r.id]:e}},{flushSync:u})}if(U.initialized&&!$&&function(e,t){if(e.pathname!==t.pathname||e.search!==t.search)return!1;if(""===e.hash)return""!==t.hash;if(e.hash===t.hash)return!0;if(""!==t.hash)return!0;return!1}(U.location,n)&&!(o&&o.submission&&Oe(o.submission.formMethod)))return void Te(n,{matches:l},{flushSync:u});T=new AbortController;let f,m=me(e.history,n,T.signal,o&&o.submission);if(o&&o.pendingError)f=[Se(l).route.id,{type:d.error,error:o.pendingError}];else if(o&&o.submission&&Oe(o.submission.formMethod)){let t=await async function(e,t,a,n,o,i){void 0===i&&(i={});let s;if(Xe(),Ce({navigation:We(t,a)},{flushSync:!0===i.flushSync}),o){let r=await pt(n,t.pathname,e.signal);if("aborted"===r.type)return{shortCircuited:!0};if("error"===r.type){let{boundaryId:e,error:a}=ut(t.pathname,r);return{matches:r.partialMatches,pendingActionResult:[e,{type:d.error,error:a}]}}if(!r.matches){let{notFoundMatches:e,error:r,route:a}=lt(t.pathname);return{matches:e,pendingActionResult:[a.id,{type:d.error,error:r}]}}n=r.matches}let l=Fe(n,t);if(l.route.action||l.route.lazy){if(s=(await Je("action",U,e,[l],n,null))[l.route.id],e.signal.aborted)return{shortCircuited:!0}}else s={type:d.error,error:Ee(405,{method:e.method,pathname:t.pathname,routeId:l.route.id})};if(je(s)){let t;if(i&&null!=i.replace)t=i.replace;else{t=pe(s.response.headers.get("Location"),new URL(e.url),w)===U.location.pathname+U.location.search}return await Ye(e,s,!0,{submission:a,replace:t}),{shortCircuited:!0}}if(Le(s))throw Ee(400,{type:"defer-action"});if(Me(s)){let e=Se(n,l.route.id);return!0!==(i&&i.replace)&&(I=r.Push),{matches:n,pendingActionResult:[e.route.id,s]}}return{matches:n,pendingActionResult:[l.route.id,s]}}(m,n,o.submission,l,h.active,{replace:o.replace,flushSync:u});if(t.shortCircuited)return;if(t.pendingActionResult){let[e,r]=t.pendingActionResult;if(Me(r)&&N(r.error)&&404===r.error.status)return T=null,void Te(n,{matches:t.matches,loaderData:{},errors:{[e]:r.error}})}l=t.matches||l,f=t.pendingActionResult,s=Be(n,o.submission),u=!1,h.active=!1,m=me(e.history,m.url,m.signal)}let{shortCircuited:y,matches:v,loaderData:g,errors:D}=await async function(r,a,n,o,i,s,l,u,d,h,f){let p=i||Be(a,s),m=s||l||Ne(p),y=!(W||R.v7_partialHydration&&d);if(o){if(y){let e=Ke(f);Ce(t({navigation:p},void 0!==e?{actionData:e}:{}),{flushSync:h})}let e=await pt(n,a.pathname,r.signal);if("aborted"===e.type)return{shortCircuited:!0};if("error"===e.type){let{boundaryId:t,error:r}=ut(a.pathname,e);return{matches:e.partialMatches,loaderData:{},errors:{[t]:r}}}if(!e.matches){let{error:e,notFoundMatches:t,route:r}=lt(a.pathname);return{matches:t,loaderData:{},errors:{[r.id]:e}}}n=e.matches}let v=c||b,[g,D]=oe(e.history,U,n,m,a,R.v7_partialHydration&&!0===d,R.v7_skipActionErrorRevalidation,$,q,K,ge,ye,se,v,w,f);if(ct((e=>!(n&&n.some((t=>t.route.id===e)))||g&&g.some((t=>t.route.id===e)))),ne=++te,0===g.length&&0===D.length){let e=at();return Te(a,t({matches:n,loaderData:{},errors:f&&Me(f[1])?{[f[0]]:f[1].error}:null},De(f),e?{fetchers:new Map(U.fetchers)}:{}),{flushSync:h}),{shortCircuited:!0}}if(y){let e={};if(!o){e.navigation=p;let t=Ke(f);void 0!==t&&(e.actionData=t)}D.length>0&&(e.fetchers=function(e){return e.forEach((e=>{let t=U.fetchers.get(e.key),r=$e(void 0,t?t.data:void 0);U.fetchers.set(e.key,r)})),new Map(U.fetchers)}(D)),Ce(e,{flushSync:h})}D.forEach((e=>{ee.has(e.key)&&tt(e.key),e.controller&&ee.set(e.key,e.controller)}));let S=()=>D.forEach((e=>tt(e.key)));T&&T.signal.addEventListener("abort",S);let{loaderResults:E,fetcherResults:P}=await Ve(U,n,g,D,r);if(r.signal.aborted)return{shortCircuited:!0};T&&T.signal.removeEventListener("abort",S);D.forEach((e=>ee.delete(e.key)));let x=Pe(E);if(x)return await Ye(r,x.result,!0,{replace:u}),{shortCircuited:!0};if(x=Pe(P),x)return se.add(x.key),await Ye(r,x.result,!0,{replace:u}),{shortCircuited:!0};let{loaderData:A,errors:L}=be(U,n,g,E,f,D,P,xe);xe.forEach(((e,t)=>{e.subscribe((r=>{(r||e.done)&&xe.delete(t)}))})),R.v7_partialHydration&&d&&U.errors&&Object.entries(U.errors).filter((e=>{let[t]=e;return!g.some((e=>e.route.id===t))})).forEach((e=>{let[t,r]=e;L=Object.assign(L||{},{[t]:r})}));let M=at(),j=nt(ne),k=M||j||D.length>0;return t({matches:n,loaderData:A,errors:L},k?{fetchers:new Map(U.fetchers)}:{})}(m,n,l,h.active,s,o&&o.submission,o&&o.fetcherSubmission,o&&o.replace,o&&!0===o.initialHydration,u,f);y||(T=null,Te(n,t({matches:v||l},De(f),{loaderData:g,errors:D})))}function Ke(e){return e&&!Me(e[1])?{[e[0]]:e[1].data}:U.actionData?0===Object.keys(U.actionData).length?null:U.actionData:void 0}async function Ye(o,l,u,c){let{submission:d,fetcherSubmission:h,replace:f}=void 0===c?{}:c;l.response.headers.has("X-Remix-Revalidate")&&($=!0);let p=l.response.headers.get("Location");n(p,"Expected a Location header on the redirect Response"),p=pe(p,new URL(o.url),w);let m=s(U.location,p,{_isRedirect:!0});if(i){let t=!1;if(l.response.headers.has("X-Remix-Reload-Document"))t=!0;else if(G.test(p)){const r=e.history.createURL(p);t=r.origin!==a.location.origin||null==P(r.pathname,w)}if(t)return void(f?a.location.replace(p):a.location.assign(p))}T=null;let y=!0===f||l.response.headers.has("X-Remix-Replace")?r.Replace:r.Push,{formMethod:v,formAction:g,formEncType:b}=U.navigation;!d&&!h&&v&&g&&b&&(d=Ne(U.navigation));let D=d||h;if(Y.has(l.response.status)&&D&&Oe(D.formMethod))await ze(y,m,{submission:t({},D,{formAction:p}),preventScrollReset:H,enableViewTransition:u?z:void 0});else{let e=Be(m,d);await ze(y,m,{overrideNavigation:e,fetcherSubmission:h,preventScrollReset:H,enableViewTransition:u?z:void 0})}}async function Je(e,t,r,a,n,o){let i,s={};try{i=await de(D,e,t,r,a,n,o,g,u)}catch(e){return a.forEach((t=>{s[t.route.id]={type:d.error,error:e}})),s}for(let[e,t]of Object.entries(i))if(Ae(t)){let a=t.result;s[e]={type:d.redirect,response:fe(a,r,e,n,w,R.v7_relativeSplatPath)}}else s[e]=await he(t);return s}async function Ve(t,r,a,n,o){let i=t.matches,s=Je("loader",t,o,a,r,null),l=Promise.all(n.map((async r=>{if(r.matches&&r.match&&r.controller){let a=(await Je("loader",t,me(e.history,r.path,r.controller.signal),[r.match],r.matches,r.key))[r.match.route.id];return{[r.key]:a}}return Promise.resolve({[r.key]:{type:d.error,error:Ee(404,{pathname:r.path})}})}))),u=await s,c=(await l).reduce(((e,t)=>Object.assign(e,t)),{});return await Promise.all([Ue(r,u,o.signal,i,t.loaderData),Ie(r,c,n)]),{loaderResults:u,fetcherResults:c}}function Xe(){$=!0,q.push(...ct()),ye.forEach(((e,t)=>{ee.has(t)&&(K.add(t),tt(t))}))}function Ge(e,t,r){void 0===r&&(r={}),U.fetchers.set(e,t),Ce({fetchers:new Map(U.fetchers)},{flushSync:!0===(r&&r.flushSync)})}function Qe(e,t,r,a){void 0===a&&(a={});let n=Se(U.matches,t);et(e),Ce({errors:{[n.route.id]:r},fetchers:new Map(U.fetchers)},{flushSync:!0===(a&&a.flushSync)})}function Ze(e){return R.v7_fetcherPersist&&(ve.set(e,(ve.get(e)||0)+1),ge.has(e)&&ge.delete(e)),U.fetchers.get(e)||V}function et(e){let t=U.fetchers.get(e);!ee.has(e)||t&&"loading"===t.state&&ie.has(e)||tt(e),ye.delete(e),ie.delete(e),se.delete(e),ge.delete(e),K.delete(e),U.fetchers.delete(e)}function tt(e){let t=ee.get(e);n(t,"Expected fetch controller: "+e),t.abort(),ee.delete(e)}function rt(e){for(let t of e){let e=qe(Ze(t).data);U.fetchers.set(t,e)}}function at(){let e=[],t=!1;for(let r of se){let a=U.fetchers.get(r);n(a,"Expected fetcher: "+r),"loading"===a.state&&(se.delete(r),e.push(r),t=!0)}return rt(e),t}function nt(e){let t=[];for(let[r,a]of ie)if(a<e){let e=U.fetchers.get(r);n(e,"Expected fetcher: "+r),"loading"===e.state&&(tt(r),ie.delete(r),t.push(r))}return rt(t),t.length>0}function ot(e){U.blockers.delete(e),ke.delete(e)}function it(e,t){let r=U.blockers.get(e)||X;n("unblocked"===r.state&&"blocked"===t.state||"blocked"===r.state&&"blocked"===t.state||"blocked"===r.state&&"proceeding"===t.state||"blocked"===r.state&&"unblocked"===t.state||"proceeding"===r.state&&"unblocked"===t.state,"Invalid blocker state transition: "+r.state+" -> "+t.state);let a=new Map(U.blockers);a.set(e,t),Ce({blockers:a})}function st(e){let{currentLocation:t,nextLocation:r,historyAction:a}=e;if(0===ke.size)return;ke.size>1&&o(!1,"A router only supports one blocker at a time");let n=Array.from(ke.entries()),[i,s]=n[n.length-1],l=U.blockers.get(i);return l&&"proceeding"===l.state?void 0:s({currentLocation:t,nextLocation:r,historyAction:a})?i:void 0}function lt(e){let t=Ee(404,{pathname:e}),r=c||b,{matches:a,route:n}=Re(r);return ct(),{notFoundMatches:a,route:n,error:t}}function ut(e,t){return{boundaryId:Se(t.partialMatches).route.id,error:Ee(400,{type:"route-discovery",pathname:e,message:null!=t.error&&"message"in t.error?t.error:String(t.error)})}}function ct(e){let t=[];return xe.forEach(((r,a)=>{e&&!e(a)||(r.cancel(),t.push(a),xe.delete(a))})),t}function dt(e,t){if(M){return M(e,t.map((e=>y(e,U.loaderData))))||e.key}return e.key}function ht(e,t){if(L){let r=dt(e,t),a=L[r];if("number"==typeof a)return a}return null}function ft(e,t,r){if(S){if(A.has(r))return{active:!1,matches:e};if(!e){return{active:!0,matches:m(t,r,w,!0)||[]}}if(Object.keys(e[0].params).length>0){return{active:!0,matches:m(t,r,w,!0)}}}return{active:!1,matches:null}}async function pt(e,t,r){let a=e;for(;;){let e=null==c,n=c||b;try{await le(S,t,a,n,g,u,_e,r)}catch(e){return{type:"error",error:e,partialMatches:a}}finally{e&&(b=[...b])}if(r.aborted)return{type:"aborted"};let o=p(n,t,w);if(o)return mt(t,A),{type:"success",matches:o};let i=m(n,t,w,!0);if(!i||a.length===i.length&&a.every(((e,t)=>e.route.id===i[t].route.id)))return mt(t,A),{type:"success",matches:null};a=i}}function mt(e,t){if(t.size>=1e3){let e=t.values().next().value;t.delete(e)}t.add(e)}return v={get basename(){return w},get future(){return R},get state(){return U},get routes(){return b},get window(){return a},initialize:function(){if(E=e.history.listen((t=>{let{action:r,location:a,delta:n}=t;if(O)return O(),void(O=void 0);o(0===ke.size||null!=n,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let i=st({currentLocation:U.location,nextLocation:a,historyAction:r});if(i&&null!=n){let t=new Promise((e=>{O=e}));return e.history.go(-1*n),void it(i,{state:"blocked",location:a,proceed(){it(i,{state:"proceeding",proceed:void 0,reset:void 0,location:a}),t.then((()=>e.history.go(n)))},reset(){let e=new Map(U.blockers);e.set(i,X),Ce({blockers:e})}})}return ze(r,a)})),i){!function(e,t){try{let r=e.sessionStorage.getItem(Z);if(r){let e=JSON.parse(r);for(let[r,a]of Object.entries(e||{}))a&&Array.isArray(a)&&t.set(r,new Set(a||[]))}}catch(e){}}(a,F);let e=()=>function(e,t){if(t.size>0){let r={};for(let[e,a]of t)r[e]=[...a];try{e.sessionStorage.setItem(Z,JSON.stringify(r))}catch(e){o(!1,"Failed to save applied view transitions in sessionStorage ("+e+").")}}}(a,F);a.addEventListener("pagehide",e),B=()=>a.removeEventListener("pagehide",e)}return U.initialized||ze(r.Pop,U.location,{initialHydration:!0}),v},subscribe:function(e){return x.add(e),()=>x.delete(e)},enableScrollRestoration:function(e,t,r){if(L=e,j=t,M=r||null,!k&&U.navigation===J){k=!0;let e=ht(U.location,U.matches);null!=e&&Ce({restoreScrollPosition:e})}return()=>{L=null,j=null,M=null}},navigate:async function a(n,o){if("number"==typeof n)return void e.history.go(n);let i=re(U.location,U.matches,w,R.v7_prependBasename,n,R.v7_relativeSplatPath,null==o?void 0:o.fromRouteId,null==o?void 0:o.relative),{path:l,submission:u,error:c}=ae(R.v7_normalizeFormMethod,!1,i,o),d=U.location,h=s(U.location,l,o&&o.state);h=t({},h,e.history.encodeLocation(h));let f=o&&null!=o.replace?o.replace:void 0,p=r.Push;!0===f?p=r.Replace:!1===f||null!=u&&Oe(u.formMethod)&&u.formAction===U.location.pathname+U.location.search&&(p=r.Replace);let m=o&&"preventScrollReset"in o?!0===o.preventScrollReset:void 0,y=!0===(o&&o.unstable_flushSync),v=st({currentLocation:d,nextLocation:h,historyAction:p});if(!v)return await ze(p,h,{submission:u,pendingError:c,preventScrollReset:m,replace:o&&o.replace,enableViewTransition:o&&o.unstable_viewTransition,flushSync:y});it(v,{state:"blocked",location:h,proceed(){it(v,{state:"proceeding",proceed:void 0,reset:void 0,location:h}),a(n,o)},reset(){let e=new Map(U.blockers);e.set(v,X),Ce({blockers:e})}})},fetch:function(t,r,a,o){if(l)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");ee.has(t)&&tt(t);let i=!0===(o&&o.unstable_flushSync),s=c||b,u=re(U.location,U.matches,w,R.v7_prependBasename,a,R.v7_relativeSplatPath,r,null==o?void 0:o.relative),d=p(s,u,w),h=ft(d,s,u);if(h.active&&h.matches&&(d=h.matches),!d)return void Qe(t,r,Ee(404,{pathname:u}),{flushSync:i});let{path:f,submission:m,error:y}=ae(R.v7_normalizeFormMethod,!0,u,o);if(y)return void Qe(t,r,y,{flushSync:i});let v=Fe(d,f);H=!0===(o&&o.preventScrollReset),m&&Oe(m.formMethod)?async function(t,r,a,o,i,s,l,u){function d(e){if(!e.route.action&&!e.route.lazy){let e=Ee(405,{method:u.formMethod,pathname:a,routeId:r});return Qe(t,r,e,{flushSync:l}),!0}return!1}if(Xe(),ye.delete(t),!s&&d(o))return;let h=U.fetchers.get(t);Ge(t,function(e,t){return{state:"submitting",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t?t.data:void 0}}(u,h),{flushSync:l});let f=new AbortController,m=me(e.history,a,f.signal,u);if(s){let e=await pt(i,a,m.signal);if("aborted"===e.type)return;if("error"===e.type){let{error:n}=ut(a,e);return void Qe(t,r,n,{flushSync:l})}if(!e.matches)return void Qe(t,r,Ee(404,{pathname:a}),{flushSync:l});if(d(o=Fe(i=e.matches,a)))return}ee.set(t,f);let y=te,v=(await Je("action",U,m,[o],i,t))[o.route.id];if(m.signal.aborted)return void(ee.get(t)===f&&ee.delete(t));if(R.v7_fetcherPersist&&ge.has(t)){if(je(v)||Me(v))return void Ge(t,qe(void 0))}else{if(je(v))return ee.delete(t),ne>y?void Ge(t,qe(void 0)):(se.add(t),Ge(t,$e(u)),Ye(m,v,!1,{fetcherSubmission:u}));if(Me(v))return void Qe(t,r,v.error)}if(Le(v))throw Ee(400,{type:"defer-action"});let g=U.navigation.location||U.location,D=me(e.history,g,f.signal),S=c||b,E="idle"!==U.navigation.state?p(S,U.navigation.location,w):U.matches;n(E,"Didn't find any matches after fetcher action");let P=++te;ie.set(t,P);let x=$e(u,v.data);U.fetchers.set(t,x);let[A,L]=oe(e.history,U,E,u,g,!1,R.v7_skipActionErrorRevalidation,$,q,K,ge,ye,se,S,w,[o.route.id,v]);L.filter((e=>e.key!==t)).forEach((e=>{let t=e.key,r=U.fetchers.get(t),a=$e(void 0,r?r.data:void 0);U.fetchers.set(t,a),ee.has(t)&&tt(t),e.controller&&ee.set(t,e.controller)})),Ce({fetchers:new Map(U.fetchers)});let M=()=>L.forEach((e=>tt(e.key)));f.signal.addEventListener("abort",M);let{loaderResults:j,fetcherResults:k}=await Ve(U,E,A,L,D);if(f.signal.aborted)return;f.signal.removeEventListener("abort",M),ie.delete(t),ee.delete(t),L.forEach((e=>ee.delete(e.key)));let _=Pe(j);if(_)return Ye(D,_.result,!1);if(_=Pe(k),_)return se.add(_.key),Ye(D,_.result,!1);let{loaderData:C,errors:O}=be(U,E,A,j,void 0,L,k,xe);if(U.fetchers.has(t)){let e=qe(v.data);U.fetchers.set(t,e)}nt(P),"loading"===U.navigation.state&&P>ne?(n(I,"Expected pending action"),T&&T.abort(),Te(U.navigation.location,{matches:E,loaderData:C,errors:O,fetchers:new Map(U.fetchers)})):(Ce({errors:O,loaderData:we(U.loaderData,C,E,O),fetchers:new Map(U.fetchers)}),$=!1)}(t,r,f,v,d,h.active,i,m):(ye.set(t,{routeId:r,path:f}),async function(t,r,a,o,i,s,l,u){let c=U.fetchers.get(t);Ge(t,$e(u,c?c.data:void 0),{flushSync:l});let d=new AbortController,h=me(e.history,a,d.signal);if(s){let e=await pt(i,a,h.signal);if("aborted"===e.type)return;if("error"===e.type){let{error:n}=ut(a,e);return void Qe(t,r,n,{flushSync:l})}if(!e.matches)return void Qe(t,r,Ee(404,{pathname:a}),{flushSync:l});o=Fe(i=e.matches,a)}ee.set(t,d);let f=te,p=(await Je("loader",U,h,[o],i,t))[o.route.id];Le(p)&&(p=await He(p,h.signal,!0)||p);ee.get(t)===d&&ee.delete(t);if(h.signal.aborted)return;if(ge.has(t))return void Ge(t,qe(void 0));if(je(p))return ne>f?void Ge(t,qe(void 0)):(se.add(t),void await Ye(h,p,!1));if(Me(p))return void Qe(t,r,p.error);n(!Le(p),"Unhandled fetcher deferred data"),Ge(t,qe(p.data))}(t,r,f,v,d,h.active,i,m))},revalidate:function(){Xe(),Ce({revalidation:"loading"}),"submitting"!==U.navigation.state&&("idle"!==U.navigation.state?ze(I||U.historyAction,U.navigation.location,{overrideNavigation:U.navigation,enableViewTransition:!0===z}):ze(U.historyAction,U.location,{startUninterruptedRevalidation:!0}))},createHref:t=>e.history.createHref(t),encodeLocation:t=>e.history.encodeLocation(t),getFetcher:Ze,deleteFetcher:function(e){if(R.v7_fetcherPersist){let t=(ve.get(e)||0)-1;t<=0?(ve.delete(e),ge.add(e)):ve.set(e,t)}else et(e);Ce({fetchers:new Map(U.fetchers)})},dispose:function(){E&&E(),B&&B(),x.clear(),T&&T.abort(),U.fetchers.forEach(((e,t)=>et(t))),U.blockers.forEach(((e,t)=>ot(t)))},getBlocker:function(e,t){let r=U.blockers.get(e)||X;return ke.get(e)!==t&&ke.set(e,t),r},deleteBlocker:ot,patchRoutes:function(e,t){let r=null==c;ue(e,t,c||b,g,u),r&&(b=[...b],Ce({}))},_internalFetchControllers:ee,_internalActiveDeferreds:xe,_internalSetRoutes:function(e){g={},c=f(e,u,void 0,g)}},v},e.createStaticHandler=function(e,r){n(e.length>0,"You must provide a non-empty routes array to createStaticHandler");let a,o={},i=(r?r.basename:null)||"/";if(null!=r&&r.mapRouteProperties)a=r.mapRouteProperties;else if(null!=r&&r.detectErrorBoundary){let e=r.detectErrorBoundary;a=t=>({hasErrorBoundary:e(t)})}else a=Q;let u=t({v7_relativeSplatPath:!1,v7_throwAbortReason:!1},r?r.future:null),c=f(e,a,void 0,o);async function h(e,r,a,o,i,s,l){n(e.signal,"query()/queryRoute() requests must contain an AbortController signal");try{if(Oe(e.method.toLowerCase())){let n=await async function(e,r,a,n,o,i,s){let l;if(a.route.action||a.route.lazy){l=(await y("action",e,[a],r,s,n,o))[a.route.id],e.signal.aborted&&te(e,s,u)}else{let t=Ee(405,{method:e.method,pathname:new URL(e.url).pathname,routeId:a.route.id});if(s)throw t;l={type:d.error,error:t}}if(je(l))throw new Response(null,{status:l.response.status,headers:{Location:l.response.headers.get("Location")}});if(Le(l)){let e=Ee(400,{type:"defer-action"});if(s)throw e;l={type:d.error,error:e}}if(s){if(Me(l))throw l.error;return{matches:[a],loaderData:{},actionData:{[a.route.id]:l.data},errors:null,statusCode:200,loaderHeaders:{},actionHeaders:{},activeDeferreds:null}}let c=new Request(e.url,{headers:e.headers,redirect:e.redirect,signal:e.signal});if(Me(l)){let e=i?a:Se(r,a.route.id);return t({},await m(c,r,n,o,i,null,[e.route.id,l]),{statusCode:N(l.error)?l.error.status:null!=l.statusCode?l.statusCode:500,actionData:null,actionHeaders:t({},l.headers?{[a.route.id]:l.headers}:{})})}return t({},await m(c,r,n,o,i,null),{actionData:{[a.route.id]:l.data}},l.statusCode?{statusCode:l.statusCode}:{},{actionHeaders:l.headers?{[a.route.id]:l.headers}:{}})}(e,a,l||Fe(a,r),o,i,s,null!=l);return n}let n=await m(e,a,o,i,s,l);return Ce(n)?n:t({},n,{actionData:null,actionHeaders:{}})}catch(e){if(function(e){return null!=e&&"object"==typeof e&&"type"in e&&"result"in e&&(e.type===d.data||e.type===d.error)}(e)&&Ce(e.result)){if(e.type===d.error)throw e.result;return e.result}if(function(e){if(!Ce(e))return!1;let t=e.status,r=e.headers.get("Location");return t>=300&&t<=399&&null!=r}(e))return e;throw e}}async function m(e,r,a,n,o,i,s){let l=null!=i;if(l&&(null==i||!i.route.loader)&&(null==i||!i.route.lazy))throw Ee(400,{method:e.method,pathname:new URL(e.url).pathname,routeId:null==i?void 0:i.route.id});let c=(i?[i]:s&&Me(s[1])?ne(r,s[0]):r).filter((e=>e.route.loader||e.route.lazy));if(0===c.length)return{matches:r,loaderData:r.reduce(((e,t)=>Object.assign(e,{[t.route.id]:null})),{}),errors:s&&Me(s[1])?{[s[0]]:s[1].error}:null,statusCode:200,loaderHeaders:{},activeDeferreds:null};let d=await y("loader",e,c,r,l,a,n);e.signal.aborted&&te(e,l,u);let h=new Map,f=ge(r,d,s,h,o),p=new Set(c.map((e=>e.route.id)));return r.forEach((e=>{p.has(e.route.id)||(f.loaderData[e.route.id]=null)})),t({},f,{matches:r,activeDeferreds:h.size>0?Object.fromEntries(h.entries()):null})}async function y(e,t,r,n,s,l,c){let d=await de(c||ce,e,null,t,r,n,null,o,a,l),h={};return await Promise.all(n.map((async e=>{if(!(e.route.id in d))return;let r=d[e.route.id];if(Ae(r)){throw fe(r.result,t,e.route.id,n,i,u.v7_relativeSplatPath)}if(Ce(r.result)&&s)throw r;h[e.route.id]=await he(r)}))),h}return{dataRoutes:c,query:async function(e,r){let{requestContext:a,skipLoaderErrorBubbling:n,unstable_dataStrategy:o}=void 0===r?{}:r,u=new URL(e.url),d=e.method,f=s("",l(u),null,"default"),m=p(c,f,i);if(!Te(d)&&"HEAD"!==d){let e=Ee(405,{method:d}),{matches:t,route:r}=Re(c);return{basename:i,location:f,matches:t,loaderData:{},actionData:null,errors:{[r.id]:e},statusCode:e.status,loaderHeaders:{},actionHeaders:{},activeDeferreds:null}}if(!m){let e=Ee(404,{pathname:f.pathname}),{matches:t,route:r}=Re(c);return{basename:i,location:f,matches:t,loaderData:{},actionData:null,errors:{[r.id]:e},statusCode:e.status,loaderHeaders:{},actionHeaders:{},activeDeferreds:null}}let y=await h(e,f,m,a,o||null,!0===n,null);return Ce(y)?y:t({location:f,basename:i},y)},queryRoute:async function(e,t){let{routeId:r,requestContext:a,unstable_dataStrategy:n}=void 0===t?{}:t,o=new URL(e.url),u=e.method,d=s("",l(o),null,"default"),f=p(c,d,i);if(!Te(u)&&"HEAD"!==u&&"OPTIONS"!==u)throw Ee(405,{method:u});if(!f)throw Ee(404,{pathname:d.pathname});let m=r?f.find((e=>e.route.id===r)):Fe(f,d);if(r&&!m)throw Ee(403,{pathname:d.pathname,routeId:r});if(!m)throw Ee(404,{pathname:d.pathname});let y=await h(e,d,f,a,n||null,!1,m);if(Ce(y))return y;let v=y.errors?Object.values(y.errors)[0]:void 0;if(void 0!==v)throw v;if(y.actionData)return Object.values(y.actionData)[0];if(y.loaderData){var g;let e=Object.values(y.loaderData)[0];return null!=(g=y.activeDeferreds)&&g[m.route.id]&&(e[ee]=y.activeDeferreds[m.route.id]),e}}}},e.defer=function(e,t){return void 0===t&&(t={}),new I(e,"number"==typeof t?{status:t}:t)},e.generatePath=function(e,t){void 0===t&&(t={});let r=e;r.endsWith("*")&&"*"!==r&&!r.endsWith("/*")&&(o(!1,'Route path "'+r+'" will be treated as if it were "'+r.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+r.replace(/\*$/,"/*")+'".'),r=r.replace(/\*$/,"/*"));const a=r.startsWith("/")?"/":"",i=e=>null==e?"":"string"==typeof e?e:String(e);return a+r.split(/\/+/).map(((e,r,a)=>{if(r===a.length-1&&"*"===e){return i(t["*"])}const o=e.match(/^:([\w-]+)(\??)$/);if(o){const[,e,r]=o;let a=t[e];return n("?"===r||null!=a,'Missing ":'+e+'" param'),i(a)}return e.replace(/\?$/g,"")})).filter((e=>!!e)).join("/")},e.getStaticContextFromError=function(e,r,a){return t({},r,{statusCode:N(a)?a.status:500,errors:{[r._deepestRenderedBoundaryId||e[0].id]:a}})},e.getToPathname=function(e){return""===e||""===e.pathname?"/":"string"==typeof e?u(e).pathname:e.pathname},e.isDataWithResponseInit=ke,e.isDeferredData=_e,e.isRouteErrorResponse=N,e.joinPaths=k,e.json=function(e,r){void 0===r&&(r={});let a="number"==typeof r?{status:r}:r,n=new Headers(a.headers);return n.has("Content-Type")||n.set("Content-Type","application/json; charset=utf-8"),new Response(JSON.stringify(e),t({},a,{headers:n}))},e.matchPath=R,e.matchRoutes=p,e.normalizePathname=_,e.parsePath=u,e.redirect=z,e.redirectDocument=(e,t)=>{let r=z(e,t);return r.headers.set("X-Remix-Reload-Document","true"),r},e.replace=(e,t)=>{let r=z(e,t);return r.headers.set("X-Remix-Replace","true"),r},e.resolvePath=x,e.resolveTo=j,e.stripBasename=P,e.unstable_data=function(e,t){return new O(e,"number"==typeof t?{status:t}:t)},Object.defineProperty(e,"__esModule",{value:!0})}));
+!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).RemixRouter={})}(this,(function(e){"use strict";function t(){return t=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a])}return e},t.apply(this,arguments)}let r=function(e){return e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE",e}({});const a="popstate";function n(e,t){if(!1===e||null==e)throw new Error(t)}function o(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function i(e,t){return{usr:e.state,key:e.key,idx:t}}function s(e,r,a,n){return void 0===a&&(a=null),t({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof r?u(r):r,{state:a,key:r&&r.key||n||Math.random().toString(36).substr(2,8)})}function l(e){let{pathname:t="/",search:r="",hash:a=""}=e;return r&&"?"!==r&&(t+="?"===r.charAt(0)?r:"?"+r),a&&"#"!==a&&(t+="#"===a.charAt(0)?a:"#"+a),t}function u(e){let t={};if(e){let r=e.indexOf("#");r>=0&&(t.hash=e.substr(r),e=e.substr(0,r));let a=e.indexOf("?");a>=0&&(t.search=e.substr(a),e=e.substr(0,a)),e&&(t.pathname=e)}return t}function c(e,o,u,c){void 0===c&&(c={});let{window:d=document.defaultView,v5Compat:h=!1}=c,f=d.history,p=r.Pop,m=null,y=v();function v(){return(f.state||{idx:null}).idx}function g(){p=r.Pop;let e=v(),t=null==e?null:e-y;y=e,m&&m({action:p,location:w.location,delta:t})}function b(e){let t="null"!==d.location.origin?d.location.origin:d.location.href,r="string"==typeof e?e:l(e);return r=r.replace(/ $/,"%20"),n(t,"No window.location.(origin|href) available to create URL for href: "+r),new URL(r,t)}null==y&&(y=0,f.replaceState(t({},f.state,{idx:y}),""));let w={get action(){return p},get location(){return e(d,f)},listen(e){if(m)throw new Error("A history only accepts one active listener");return d.addEventListener(a,g),m=e,()=>{d.removeEventListener(a,g),m=null}},createHref:e=>o(d,e),createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){p=r.Push;let a=s(w.location,e,t);u&&u(a,e),y=v()+1;let n=i(a,y),o=w.createHref(a);try{f.pushState(n,"",o)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;d.location.assign(o)}h&&m&&m({action:p,location:w.location,delta:1})},replace:function(e,t){p=r.Replace;let a=s(w.location,e,t);u&&u(a,e),y=v();let n=i(a,y),o=w.createHref(a);f.replaceState(n,"",o),h&&m&&m({action:p,location:w.location,delta:0})},go:e=>f.go(e)};return w}let d=function(e){return e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error",e}({});const h=new Set(["lazy","caseSensitive","path","id","index","children"]);function f(e,r,a,o){return void 0===a&&(a=[]),void 0===o&&(o={}),e.map(((e,i)=>{let s=[...a,String(i)],l="string"==typeof e.id?e.id:s.join("-");if(n(!0!==e.index||!e.children,"Cannot specify children on an index route"),n(!o[l],'Found a route id collision on id "'+l+"\".  Route id's must be globally unique within Data Router usages"),function(e){return!0===e.index}(e)){let a=t({},e,r(e),{id:l});return o[l]=a,a}{let a=t({},e,r(e),{id:l,children:void 0});return o[l]=a,e.children&&(a.children=f(e.children,r,s,o)),a}}))}function p(e,t,r){return void 0===r&&(r="/"),m(e,t,r,!1)}function m(e,t,r,a){let n=P(("string"==typeof t?u(t):t).pathname||"/",r);if(null==n)return null;let o=v(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,r)=>e===t[r]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e){let t=E(n);i=S(o[e],t,a)}return i}function y(e,t){let{route:r,pathname:a,params:n}=e;return{id:r.id,pathname:a,params:n,data:t[r.id],handle:r.handle}}function v(e,t,r,a){void 0===t&&(t=[]),void 0===r&&(r=[]),void 0===a&&(a="");let o=(e,o,i)=>{let s={relativePath:void 0===i?e.path||"":i,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};s.relativePath.startsWith("/")&&(n(s.relativePath.startsWith(a),'Absolute route path "'+s.relativePath+'" nested under path "'+a+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),s.relativePath=s.relativePath.slice(a.length));let l=k([a,s.relativePath]),u=r.concat(s);e.children&&e.children.length>0&&(n(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),v(e.children,t,u,l)),(null!=e.path||e.index)&&t.push({path:l,score:D(l,e.index),routesMeta:u})};return e.forEach(((e,t)=>{var r;if(""!==e.path&&null!=(r=e.path)&&r.includes("?"))for(let r of g(e.path))o(e,t,r);else o(e,t)})),t}function g(e){let t=e.split("/");if(0===t.length)return[];let[r,...a]=t,n=r.endsWith("?"),o=r.replace(/\?$/,"");if(0===a.length)return n?[o,""]:[o];let i=g(a.join("/")),s=[];return s.push(...i.map((e=>""===e?o:[o,e].join("/")))),n&&s.push(...i),s.map((t=>e.startsWith("/")&&""===t?"/":t))}const b=/^:[\w-]+$/,w=e=>"*"===e;function D(e,t){let r=e.split("/"),a=r.length;return r.some(w)&&(a+=-2),t&&(a+=2),r.filter((e=>!w(e))).reduce(((e,t)=>e+(b.test(t)?3:""===t?1:10)),a)}function S(e,t,r){void 0===r&&(r=!1);let{routesMeta:a}=e,n={},o="/",i=[];for(let e=0;e<a.length;++e){let s=a[e],l=e===a.length-1,u="/"===o?t:t.slice(o.length)||"/",c=R({path:s.relativePath,caseSensitive:s.caseSensitive,end:l},u),d=s.route;if(!c&&l&&r&&!a[a.length-1].route.index&&(c=R({path:s.relativePath,caseSensitive:s.caseSensitive,end:!1},u)),!c)return null;Object.assign(n,c.params),i.push({params:n,pathname:k([o,c.pathname]),pathnameBase:_(k([o,c.pathnameBase])),route:d}),"/"!==c.pathnameBase&&(o=k([o,c.pathnameBase]))}return i}function R(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[r,a]=function(e,t,r){void 0===t&&(t=!1);void 0===r&&(r=!0);o("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let a=[],n="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,r)=>(a.push({paramName:t,isOptional:null!=r}),r?"/?([^\\/]+)?":"/([^\\/]+)")));e.endsWith("*")?(a.push({paramName:"*"}),n+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):r?n+="\\/*$":""!==e&&"/"!==e&&(n+="(?:(?=\\/|$))");return[new RegExp(n,t?void 0:"i"),a]}(e.path,e.caseSensitive,e.end),n=t.match(r);if(!n)return null;let i=n[0],s=i.replace(/(.)\/+$/,"$1"),l=n.slice(1);return{params:a.reduce(((e,t,r)=>{let{paramName:a,isOptional:n}=t;if("*"===a){let e=l[r]||"";s=i.slice(0,i.length-e.length).replace(/(.)\/+$/,"$1")}const o=l[r];return e[a]=n&&!o?void 0:(o||"").replace(/%2F/g,"/"),e}),{}),pathname:i,pathnameBase:s,pattern:e}}function E(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return o(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function P(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let r=t.endsWith("/")?t.length-1:t.length,a=e.charAt(r);return a&&"/"!==a?null:e.slice(r)||"/"}function x(e,t){void 0===t&&(t="/");let{pathname:r,search:a="",hash:n=""}="string"==typeof e?u(e):e,o=r?r.startsWith("/")?r:function(e,t){let r=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?r.length>1&&r.pop():"."!==e&&r.push(e)})),r.length>1?r.join("/"):"/"}(r,t):t;return{pathname:o,search:C(a),hash:T(n)}}function A(e,t,r,a){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(a)+"].  Please separate it out to the `to."+r+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function L(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function M(e,t){let r=L(e);return t?r.map(((e,t)=>t===r.length-1?e.pathname:e.pathnameBase)):r.map((e=>e.pathnameBase))}function j(e,r,a,o){let i;void 0===o&&(o=!1),"string"==typeof e?i=u(e):(i=t({},e),n(!i.pathname||!i.pathname.includes("?"),A("?","pathname","search",i)),n(!i.pathname||!i.pathname.includes("#"),A("#","pathname","hash",i)),n(!i.search||!i.search.includes("#"),A("#","search","hash",i)));let s,l=""===e||""===i.pathname,c=l?"/":i.pathname;if(null==c)s=a;else{let e=r.length-1;if(!o&&c.startsWith("..")){let t=c.split("/");for(;".."===t[0];)t.shift(),e-=1;i.pathname=t.join("/")}s=e>=0?r[e]:"/"}let d=x(i,s),h=c&&"/"!==c&&c.endsWith("/"),f=(l||"."===c)&&a.endsWith("/");return d.pathname.endsWith("/")||!h&&!f||(d.pathname+="/"),d}const k=e=>e.join("/").replace(/\/\/+/g,"/"),_=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),C=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",T=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";class O{constructor(e,t){this.type="DataWithResponseInit",this.data=e,this.init=t||null}}class U extends Error{}class I{constructor(e,t){let r;this.pendingKeysSet=new Set,this.subscribers=new Set,this.deferredKeys=[],n(e&&"object"==typeof e&&!Array.isArray(e),"defer() only accepts plain objects"),this.abortPromise=new Promise(((e,t)=>r=t)),this.controller=new AbortController;let a=()=>r(new U("Deferred data aborted"));this.unlistenAbortSignal=()=>this.controller.signal.removeEventListener("abort",a),this.controller.signal.addEventListener("abort",a),this.data=Object.entries(e).reduce(((e,t)=>{let[r,a]=t;return Object.assign(e,{[r]:this.trackPromise(r,a)})}),{}),this.done&&this.unlistenAbortSignal(),this.init=t}trackPromise(e,t){if(!(t instanceof Promise))return t;this.deferredKeys.push(e),this.pendingKeysSet.add(e);let r=Promise.race([t,this.abortPromise]).then((t=>this.onSettle(r,e,void 0,t)),(t=>this.onSettle(r,e,t)));return r.catch((()=>{})),Object.defineProperty(r,"_tracked",{get:()=>!0}),r}onSettle(e,t,r,a){if(this.controller.signal.aborted&&r instanceof U)return this.unlistenAbortSignal(),Object.defineProperty(e,"_error",{get:()=>r}),Promise.reject(r);if(this.pendingKeysSet.delete(t),this.done&&this.unlistenAbortSignal(),void 0===r&&void 0===a){let r=new Error('Deferred data for key "'+t+'" resolved/rejected with `undefined`, you must resolve/reject with a value or `null`.');return Object.defineProperty(e,"_error",{get:()=>r}),this.emit(!1,t),Promise.reject(r)}return void 0===a?(Object.defineProperty(e,"_error",{get:()=>r}),this.emit(!1,t),Promise.reject(r)):(Object.defineProperty(e,"_data",{get:()=>a}),this.emit(!1,t),a)}emit(e,t){this.subscribers.forEach((r=>r(e,t)))}subscribe(e){return this.subscribers.add(e),()=>this.subscribers.delete(e)}cancel(){this.controller.abort(),this.pendingKeysSet.forEach(((e,t)=>this.pendingKeysSet.delete(t))),this.emit(!0)}async resolveData(e){let t=!1;if(!this.done){let r=()=>this.cancel();e.addEventListener("abort",r),t=await new Promise((t=>{this.subscribe((a=>{e.removeEventListener("abort",r),(a||this.done)&&t(a)}))}))}return t}get done(){return 0===this.pendingKeysSet.size}get unwrappedData(){return n(null!==this.data&&this.done,"Can only unwrap data on initialized and settled deferreds"),Object.entries(this.data).reduce(((e,t)=>{let[r,a]=t;return Object.assign(e,{[r]:H(a)})}),{})}get pendingKeys(){return Array.from(this.pendingKeysSet)}}function H(e){if(!function(e){return e instanceof Promise&&!0===e._tracked}(e))return e;if(e._error)throw e._error;return e._data}const z=function(e,r){void 0===r&&(r=302);let a=r;"number"==typeof a?a={status:a}:void 0===a.status&&(a.status=302);let n=new Headers(a.headers);return n.set("Location",e),new Response(null,t({},a,{headers:n}))};class F{constructor(e,t,r,a){void 0===a&&(a=!1),this.status=e,this.statusText=t||"",this.internal=a,r instanceof Error?(this.data=r.toString(),this.error=r):this.data=r}}function N(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}const B=["post","put","patch","delete"],W=new Set(B),$=["get",...B],q=new Set($),K=new Set([301,302,303,307,308]),Y=new Set([307,308]),J={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},V={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},X={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},G=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Q=e=>({hasErrorBoundary:Boolean(e.hasErrorBoundary)}),Z="remix-router-transitions";const ee=Symbol("deferred");function te(e,t,r){if(r.v7_throwAbortReason&&void 0!==e.signal.reason)throw e.signal.reason;throw new Error((t?"queryRoute":"query")+"() call aborted: "+e.method+" "+e.url)}function re(e,t,r,a,n,o,i,s){let u,c;if(i){u=[];for(let e of t)if(u.push(e),e.route.id===i){c=e;break}}else u=t,c=t[t.length-1];let d=j(n||".",M(u,o),P(e.pathname,r)||e.pathname,"path"===s);return null==n&&(d.search=e.search,d.hash=e.hash),null!=n&&""!==n&&"."!==n||!c||!c.route.index||ze(d.search)||(d.search=d.search?d.search.replace(/^\?/,"?index&"):"?index"),a&&"/"!==r&&(d.pathname="/"===d.pathname?r:k([r,d.pathname])),l(d)}function ae(e,t,r,a){if(!a||!function(e){return null!=e&&("formData"in e&&null!=e.formData||"body"in e&&void 0!==e.body)}(a))return{path:r};if(a.formMethod&&!Te(a.formMethod))return{path:r,error:Ee(405,{method:a.formMethod})};let o,i,s=()=>({path:r,error:Ee(400,{type:"invalid-body"})}),c=a.formMethod||"get",d=e?c.toUpperCase():c.toLowerCase(),h=xe(r);if(void 0!==a.body){if("text/plain"===a.formEncType){if(!Oe(d))return s();let e="string"==typeof a.body?a.body:a.body instanceof FormData||a.body instanceof URLSearchParams?Array.from(a.body.entries()).reduce(((e,t)=>{let[r,a]=t;return""+e+r+"="+a+"\n"}),""):String(a.body);return{path:r,submission:{formMethod:d,formAction:h,formEncType:a.formEncType,formData:void 0,json:void 0,text:e}}}if("application/json"===a.formEncType){if(!Oe(d))return s();try{let e="string"==typeof a.body?JSON.parse(a.body):a.body;return{path:r,submission:{formMethod:d,formAction:h,formEncType:a.formEncType,formData:void 0,json:e,text:void 0}}}catch(e){return s()}}}if(n("function"==typeof FormData,"FormData is not available in this environment"),a.formData)o=ye(a.formData),i=a.formData;else if(a.body instanceof FormData)o=ye(a.body),i=a.body;else if(a.body instanceof URLSearchParams)o=a.body,i=ve(o);else if(null==a.body)o=new URLSearchParams,i=new FormData;else try{o=new URLSearchParams(a.body),i=ve(o)}catch(e){return s()}let f={formMethod:d,formAction:h,formEncType:a&&a.formEncType||"application/x-www-form-urlencoded",formData:i,json:void 0,text:void 0};if(Oe(f.formMethod))return{path:r,submission:f};let p=u(r);return t&&p.search&&ze(p.search)&&o.append("index",""),p.search="?"+o,{path:l(p),submission:f}}function ne(e,t){let r=e;if(t){let a=e.findIndex((e=>e.route.id===t));a>=0&&(r=e.slice(0,a))}return r}function oe(e,r,a,n,o,i,s,l,u,c,d,h,f,m,y,v){let g=v?Me(v[1])?v[1].error:v[1].data:void 0,b=e.createURL(r.location),w=e.createURL(o),D=v&&Me(v[1])?v[0]:void 0,S=D?ne(a,D):a,R=v?v[1].statusCode:void 0,E=s&&R&&R>=400,P=!1,x=S.filter(((e,a)=>{let{route:o}=e;if(i&&r.errors&&void 0!==r.errors[o.id]&&(P=!0),o.lazy)return!0;if(null==o.loader)return!1;if(i)return(!P||void 0!==r.loaderData[o.id])&&(!("function"==typeof o.loader&&!o.loader.hydrate)||void 0===r.loaderData[o.id]&&(!r.errors||void 0===r.errors[o.id]));if(function(e,t,r){let a=!t||r.route.id!==t.route.id,n=void 0===e[r.route.id];return a||n}(r.loaderData,r.matches[a],e)||u.some((t=>t===e.route.id)))return!0;let s=r.matches[a],c=e;return se(e,t({currentUrl:b,currentParams:s.params,nextUrl:w,nextParams:c.params},n,{actionResult:g,actionStatus:R,defaultShouldRevalidate:!E&&(l||b.pathname+b.search===w.pathname+w.search||b.search!==w.search||ie(s,c))}))})),A=[];return h.forEach(((e,o)=>{if(i||!a.some((t=>t.route.id===e.routeId))||d.has(o))return;let s=p(m,e.path,y);if(!s)return void A.push({key:o,routeId:e.routeId,path:e.path,matches:null,match:null,controller:null});let u=r.fetchers.get(o),h=Fe(s,e.path),v=!1;f.has(o)?v=!1:c.has(o)?(c.delete(o),v=!0):v=u&&"idle"!==u.state&&void 0===u.data?l:se(h,t({currentUrl:b,currentParams:r.matches[r.matches.length-1].params,nextUrl:w,nextParams:a[a.length-1].params},n,{actionResult:g,actionStatus:R,defaultShouldRevalidate:!E&&l})),v&&A.push({key:o,routeId:e.routeId,path:e.path,matches:s,match:h,controller:new AbortController})})),[x,A]}function ie(e,t){let r=e.route.path;return e.pathname!==t.pathname||null!=r&&r.endsWith("*")&&e.params["*"]!==t.params["*"]}function se(e,t){if(e.route.shouldRevalidate){let r=e.route.shouldRevalidate(t);if("boolean"==typeof r)return r}return t.defaultShouldRevalidate}async function le(e,t,r,a,n,o,i,s){let l=[t,...r.map((e=>e.route.id))].join("-");try{let c=i.get(l);c||(c=e({path:t,matches:r,patch:(e,t)=>{s.aborted||ue(e,t,a,n,o)}}),i.set(l,c)),c&&("object"==typeof(u=c)&&null!=u&&"then"in u)&&await c}finally{i.delete(l)}var u}function ue(e,t,r,a,o){if(e){var i;let r=a[e];n(r,"No route found to patch children into: routeId = "+e);let s=f(t,o,[e,"patch",String((null==(i=r.children)?void 0:i.length)||"0")],a);r.children?r.children.push(...s):r.children=s}else{let e=f(t,o,["patch",String(r.length||"0")],a);r.push(...e)}}async function ce(e){let{matches:t}=e,r=t.filter((e=>e.shouldLoad));return(await Promise.all(r.map((e=>e.resolve())))).reduce(((e,t,a)=>Object.assign(e,{[r[a].route.id]:t})),{})}async function de(e,r,a,i,s,l,u,c,f,p){let m=l.map((e=>e.route.lazy?async function(e,r,a){if(!e.lazy)return;let i=await e.lazy();if(!e.lazy)return;let s=a[e.id];n(s,"No route found in manifest");let l={};for(let e in i){let t=void 0!==s[e]&&"hasErrorBoundary"!==e;o(!t,'Route "'+s.id+'" has a static property "'+e+'" defined but its lazy function is also returning a value for this property. The lazy route property "'+e+'" will be ignored.'),t||h.has(e)||(l[e]=i[e])}Object.assign(s,l),Object.assign(s,t({},r(s),{lazy:void 0}))}(e.route,f,c):void 0)),y=l.map(((e,a)=>{let o=m[a],l=s.some((t=>t.route.id===e.route.id));return t({},e,{shouldLoad:l,resolve:async t=>(t&&"GET"===i.method&&(e.route.lazy||e.route.loader)&&(l=!0),l?async function(e,t,r,a,o,i){let s,l,u=a=>{let n,s=new Promise(((e,t)=>n=t));l=()=>n(),t.signal.addEventListener("abort",l);let u=n=>"function"!=typeof a?Promise.reject(new Error('You cannot call the handler for a route which defines a boolean "'+e+'" [routeId: '+r.route.id+"]")):a({request:t,params:r.params,context:i},...void 0!==n?[n]:[]),c=(async()=>{try{return{type:"data",result:await(o?o((e=>u(e))):u())}}catch(e){return{type:"error",result:e}}})();return Promise.race([c,s])};try{let o=r.route[e];if(a)if(o){let e,[t]=await Promise.all([u(o).catch((t=>{e=t})),a]);if(void 0!==e)throw e;s=t}else{if(await a,o=r.route[e],!o){if("action"===e){let e=new URL(t.url),a=e.pathname+e.search;throw Ee(405,{method:t.method,pathname:a,routeId:r.route.id})}return{type:d.data,result:void 0}}s=await u(o)}else{if(!o){let e=new URL(t.url);throw Ee(404,{pathname:e.pathname+e.search})}s=await u(o)}n(void 0!==s.result,"You defined "+("action"===e?"an action":"a loader")+' for route "'+r.route.id+"\" but didn't return anything from your `"+e+"` function. Please return a value or `null`.")}catch(e){return{type:d.error,result:e}}finally{l&&t.signal.removeEventListener("abort",l)}return s}(r,i,e,o,t,p):Promise.resolve({type:d.data,result:void 0}))})})),v=await e({matches:y,request:i,params:l[0].params,fetcherKey:u,context:p});try{await Promise.all(m)}catch(e){}return v}async function he(e){let{result:t,type:r}=e;if(Ce(t)){let e;try{let r=t.headers.get("Content-Type");e=r&&/\bapplication\/json\b/.test(r)?null==t.body?null:await t.json():await t.text()}catch(e){return{type:d.error,error:e}}return r===d.error?{type:d.error,error:new F(t.status,t.statusText,e),statusCode:t.status,headers:t.headers}:{type:d.data,data:e,statusCode:t.status,headers:t.headers}}if(r===d.error){if(ke(t)){var a,n;if(t.data instanceof Error)return{type:d.error,error:t.data,statusCode:null==(n=t.init)?void 0:n.status};t=new F((null==(a=t.init)?void 0:a.status)||500,void 0,t.data)}return{type:d.error,error:t,statusCode:N(t)?t.status:void 0}}var o,i,s,l;return _e(t)?{type:d.deferred,deferredData:t,statusCode:null==(o=t.init)?void 0:o.status,headers:(null==(i=t.init)?void 0:i.headers)&&new Headers(t.init.headers)}:ke(t)?{type:d.data,data:t.data,statusCode:null==(s=t.init)?void 0:s.status,headers:null!=(l=t.init)&&l.headers?new Headers(t.init.headers):void 0}:{type:d.data,data:t}}function fe(e,t,r,a,o,i){let s=e.headers.get("Location");if(n(s,"Redirects returned/thrown from loaders/actions must have a Location header"),!G.test(s)){let n=a.slice(0,a.findIndex((e=>e.route.id===r))+1);s=re(new URL(t.url),n,o,!0,s,i),e.headers.set("Location",s)}return e}function pe(e,t,r){if(G.test(e)){let a=e,n=a.startsWith("//")?new URL(t.protocol+a):new URL(a),o=null!=P(n.pathname,r);if(n.origin===t.origin&&o)return n.pathname+n.search+n.hash}return e}function me(e,t,r,a){let n=e.createURL(xe(t)).toString(),o={signal:r};if(a&&Oe(a.formMethod)){let{formMethod:e,formEncType:t}=a;o.method=e.toUpperCase(),"application/json"===t?(o.headers=new Headers({"Content-Type":t}),o.body=JSON.stringify(a.json)):"text/plain"===t?o.body=a.text:"application/x-www-form-urlencoded"===t&&a.formData?o.body=ye(a.formData):o.body=a.formData}return new Request(n,o)}function ye(e){let t=new URLSearchParams;for(let[r,a]of e.entries())t.append(r,"string"==typeof a?a:a.name);return t}function ve(e){let t=new FormData;for(let[r,a]of e.entries())t.append(r,a);return t}function ge(e,t,r,a,o){let i,s={},l=null,u=!1,c={},d=r&&Me(r[1])?r[1].error:void 0;return e.forEach((r=>{if(!(r.route.id in t))return;let h=r.route.id,f=t[h];if(n(!je(f),"Cannot handle redirect results in processLoaderData"),Me(f)){let t=f.error;if(void 0!==d&&(t=d,d=void 0),l=l||{},o)l[h]=t;else{let r=Se(e,h);null==l[r.route.id]&&(l[r.route.id]=t)}s[h]=void 0,u||(u=!0,i=N(f.error)?f.error.status:500),f.headers&&(c[h]=f.headers)}else Le(f)?(a.set(h,f.deferredData),s[h]=f.deferredData.data,null==f.statusCode||200===f.statusCode||u||(i=f.statusCode),f.headers&&(c[h]=f.headers)):(s[h]=f.data,f.statusCode&&200!==f.statusCode&&!u&&(i=f.statusCode),f.headers&&(c[h]=f.headers))})),void 0!==d&&r&&(l={[r[0]]:d},s[r[0]]=void 0),{loaderData:s,errors:l,statusCode:i||200,loaderHeaders:c}}function be(e,r,a,o,i,s,l,u){let{loaderData:c,errors:d}=ge(r,o,i,u,!1);return s.forEach((r=>{let{key:a,match:o,controller:i}=r,s=l[a];if(n(s,"Did not find corresponding fetcher result"),!i||!i.signal.aborted)if(Me(s)){let r=Se(e.matches,null==o?void 0:o.route.id);d&&d[r.route.id]||(d=t({},d,{[r.route.id]:s.error})),e.fetchers.delete(a)}else if(je(s))n(!1,"Unhandled fetcher revalidation redirect");else if(Le(s))n(!1,"Unhandled fetcher deferred data");else{let t=qe(s.data);e.fetchers.set(a,t)}})),{loaderData:c,errors:d}}function we(e,r,a,n){let o=t({},r);for(let t of a){let a=t.route.id;if(r.hasOwnProperty(a)?void 0!==r[a]&&(o[a]=r[a]):void 0!==e[a]&&t.route.loader&&(o[a]=e[a]),n&&n.hasOwnProperty(a))break}return o}function De(e){return e?Me(e[1])?{actionData:{}}:{actionData:{[e[0]]:e[1].data}}:{}}function Se(e,t){return(t?e.slice(0,e.findIndex((e=>e.route.id===t))+1):[...e]).reverse().find((e=>!0===e.route.hasErrorBoundary))||e[0]}function Re(e){let t=1===e.length?e[0]:e.find((e=>e.index||!e.path||"/"===e.path))||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function Ee(e,t){let{pathname:r,routeId:a,method:n,type:o,message:i}=void 0===t?{}:t,s="Unknown Server Error",l="Unknown @remix-run/router error";return 400===e?(s="Bad Request","route-discovery"===o?l='Unable to match URL "'+r+'" - the `unstable_patchRoutesOnNavigation()` function threw the following error:\n'+i:n&&r&&a?l="You made a "+n+' request to "'+r+'" but did not provide a `loader` for route "'+a+'", so there is no way to handle the request.':"defer-action"===o?l="defer() is not supported in actions":"invalid-body"===o&&(l="Unable to encode submission body")):403===e?(s="Forbidden",l='Route "'+a+'" does not match URL "'+r+'"'):404===e?(s="Not Found",l='No route matches URL "'+r+'"'):405===e&&(s="Method Not Allowed",n&&r&&a?l="You made a "+n.toUpperCase()+' request to "'+r+'" but did not provide an `action` for route "'+a+'", so there is no way to handle the request.':n&&(l='Invalid request method "'+n.toUpperCase()+'"')),new F(e||500,s,new Error(l),!0)}function Pe(e){let t=Object.entries(e);for(let e=t.length-1;e>=0;e--){let[r,a]=t[e];if(je(a))return{key:r,result:a}}}function xe(e){return l(t({},"string"==typeof e?u(e):e,{hash:""}))}function Ae(e){return Ce(e.result)&&K.has(e.result.status)}function Le(e){return e.type===d.deferred}function Me(e){return e.type===d.error}function je(e){return(e&&e.type)===d.redirect}function ke(e){return"object"==typeof e&&null!=e&&"type"in e&&"data"in e&&"init"in e&&"DataWithResponseInit"===e.type}function _e(e){let t=e;return t&&"object"==typeof t&&"object"==typeof t.data&&"function"==typeof t.subscribe&&"function"==typeof t.cancel&&"function"==typeof t.resolveData}function Ce(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"object"==typeof e.headers&&void 0!==e.body}function Te(e){return q.has(e.toLowerCase())}function Oe(e){return W.has(e.toLowerCase())}async function Ue(e,t,r,a,n){let o=Object.entries(t);for(let i=0;i<o.length;i++){let[s,l]=o[i],u=e.find((e=>(null==e?void 0:e.route.id)===s));if(!u)continue;let c=a.find((e=>e.route.id===u.route.id)),d=null!=c&&!ie(c,u)&&void 0!==(n&&n[u.route.id]);Le(l)&&d&&await He(l,r,!1).then((e=>{e&&(t[s]=e)}))}}async function Ie(e,t,r){for(let a=0;a<r.length;a++){let{key:o,routeId:i,controller:s}=r[a],l=t[o];e.find((e=>(null==e?void 0:e.route.id)===i))&&(Le(l)&&(n(s,"Expected an AbortController for revalidating fetcher deferred result"),await He(l,s.signal,!0).then((e=>{e&&(t[o]=e)}))))}}async function He(e,t,r){if(void 0===r&&(r=!1),!await e.deferredData.resolveData(t)){if(r)try{return{type:d.data,data:e.deferredData.unwrappedData}}catch(e){return{type:d.error,error:e}}return{type:d.data,data:e.deferredData.data}}}function ze(e){return new URLSearchParams(e).getAll("index").some((e=>""===e))}function Fe(e,t){let r="string"==typeof t?u(t).search:t.search;if(e[e.length-1].route.index&&ze(r||""))return e[e.length-1];let a=L(e);return a[a.length-1]}function Ne(e){let{formMethod:t,formAction:r,formEncType:a,text:n,formData:o,json:i}=e;if(t&&r&&a)return null!=n?{formMethod:t,formAction:r,formEncType:a,formData:void 0,json:void 0,text:n}:null!=o?{formMethod:t,formAction:r,formEncType:a,formData:o,json:void 0,text:void 0}:void 0!==i?{formMethod:t,formAction:r,formEncType:a,formData:void 0,json:i,text:void 0}:void 0}function Be(e,t){if(t){return{state:"loading",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}return{state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function We(e,t){return{state:"submitting",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}function $e(e,t){if(e){return{state:"loading",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t}}return{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function qe(e){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e}}e.AbortedDeferredError=U,e.Action=r,e.IDLE_BLOCKER=X,e.IDLE_FETCHER=V,e.IDLE_NAVIGATION=J,e.UNSAFE_DEFERRED_SYMBOL=ee,e.UNSAFE_DeferredData=I,e.UNSAFE_ErrorResponseImpl=F,e.UNSAFE_convertRouteMatchToUiMatch=y,e.UNSAFE_convertRoutesToDataRoutes=f,e.UNSAFE_decodePath=E,e.UNSAFE_getResolveToMatches=M,e.UNSAFE_invariant=n,e.UNSAFE_warning=o,e.createBrowserHistory=function(e){return void 0===e&&(e={}),c((function(e,t){let{pathname:r,search:a,hash:n}=e.location;return s("",{pathname:r,search:a,hash:n},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:l(t)}),null,e)},e.createHashHistory=function(e){return void 0===e&&(e={}),c((function(e,t){let{pathname:r="/",search:a="",hash:n=""}=u(e.location.hash.substr(1));return r.startsWith("/")||r.startsWith(".")||(r="/"+r),s("",{pathname:r,search:a,hash:n},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let r=e.document.querySelector("base"),a="";if(r&&r.getAttribute("href")){let t=e.location.href,r=t.indexOf("#");a=-1===r?t:t.slice(0,r)}return a+"#"+("string"==typeof t?t:l(t))}),(function(e,t){o("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),e)},e.createMemoryHistory=function(e){void 0===e&&(e={});let t,{initialEntries:a=["/"],initialIndex:n,v5Compat:i=!1}=e;t=a.map(((e,t)=>m(e,"string"==typeof e?null:e.state,0===t?"default":void 0)));let c=f(null==n?t.length-1:n),d=r.Pop,h=null;function f(e){return Math.min(Math.max(e,0),t.length-1)}function p(){return t[c]}function m(e,r,a){void 0===r&&(r=null);let n=s(t?p().pathname:"/",e,r,a);return o("/"===n.pathname.charAt(0),"relative pathnames are not supported in memory history: "+JSON.stringify(e)),n}function y(e){return"string"==typeof e?e:l(e)}return{get index(){return c},get action(){return d},get location(){return p()},createHref:y,createURL:e=>new URL(y(e),"http://localhost"),encodeLocation(e){let t="string"==typeof e?u(e):e;return{pathname:t.pathname||"",search:t.search||"",hash:t.hash||""}},push(e,a){d=r.Push;let n=m(e,a);c+=1,t.splice(c,t.length,n),i&&h&&h({action:d,location:n,delta:1})},replace(e,a){d=r.Replace;let n=m(e,a);t[c]=n,i&&h&&h({action:d,location:n,delta:0})},go(e){d=r.Pop;let a=f(c+e),n=t[a];c=a,h&&h({action:d,location:n,delta:e})},listen:e=>(h=e,()=>{h=null})}},e.createPath=l,e.createRouter=function(e){const a=e.window?e.window:"undefined"!=typeof window?window:void 0,i=void 0!==a&&void 0!==a.document&&void 0!==a.document.createElement,l=!i;let u;if(n(e.routes.length>0,"You must provide a non-empty routes array to createRouter"),e.mapRouteProperties)u=e.mapRouteProperties;else if(e.detectErrorBoundary){let t=e.detectErrorBoundary;u=e=>({hasErrorBoundary:t(e)})}else u=Q;let c,h,v,g={},b=f(e.routes,u,void 0,g),w=e.basename||"/",D=e.unstable_dataStrategy||ce,S=e.unstable_patchRoutesOnNavigation,R=t({v7_fetcherPersist:!1,v7_normalizeFormMethod:!1,v7_partialHydration:!1,v7_prependBasename:!1,v7_relativeSplatPath:!1,v7_skipActionErrorRevalidation:!1},e.future),E=null,x=new Set,A=new Set,L=null,M=null,j=null,k=null!=e.hydrationData,_=p(b,e.history.location,w),C=null;if(null==_&&!S){let t=Ee(404,{pathname:e.history.location.pathname}),{matches:r,route:a}=Re(b);_=r,C={[a.id]:t}}if(_&&!e.hydrationData){ft(_,b,e.history.location.pathname).active&&(_=null)}if(_)if(_.some((e=>e.route.lazy)))h=!1;else if(_.some((e=>e.route.loader)))if(R.v7_partialHydration){let t=e.hydrationData?e.hydrationData.loaderData:null,r=e.hydrationData?e.hydrationData.errors:null,a=e=>!e.route.loader||("function"!=typeof e.route.loader||!0!==e.route.loader.hydrate)&&(t&&void 0!==t[e.route.id]||r&&void 0!==r[e.route.id]);if(r){let e=_.findIndex((e=>void 0!==r[e.route.id]));h=_.slice(0,e+1).every(a)}else h=_.every(a)}else h=null!=e.hydrationData;else h=!0;else if(h=!1,_=[],R.v7_partialHydration){let t=ft(null,b,e.history.location.pathname);t.active&&t.matches&&(_=t.matches)}let T,O,U={historyAction:e.history.action,location:e.history.location,matches:_,initialized:h,navigation:J,restoreScrollPosition:null==e.hydrationData&&null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||C,fetchers:new Map,blockers:new Map},I=r.Pop,H=!1,z=!1,F=new Map,B=null,W=!1,$=!1,q=[],K=new Set,ee=new Map,te=0,ne=-1,ie=new Map,se=new Set,ye=new Map,ve=new Map,ge=new Set,xe=new Map,ke=new Map,_e=new Map;function Ce(e,r){void 0===r&&(r={}),U=t({},U,e);let a=[],n=[];R.v7_fetcherPersist&&U.fetchers.forEach(((e,t)=>{"idle"===e.state&&(ge.has(t)?n.push(t):a.push(t))})),[...x].forEach((e=>e(U,{deletedFetchers:n,unstable_viewTransitionOpts:r.viewTransitionOpts,unstable_flushSync:!0===r.flushSync}))),R.v7_fetcherPersist&&(a.forEach((e=>U.fetchers.delete(e))),n.forEach((e=>et(e))))}function Te(a,n,o){var i,s;let l,{flushSync:u}=void 0===o?{}:o,d=null!=U.actionData&&null!=U.navigation.formMethod&&Oe(U.navigation.formMethod)&&"loading"===U.navigation.state&&!0!==(null==(i=a.state)?void 0:i._isRedirect);l=n.actionData?Object.keys(n.actionData).length>0?n.actionData:null:d?U.actionData:null;let h=n.loaderData?we(U.loaderData,n.loaderData,n.matches||[],n.errors):U.loaderData,f=U.blockers;f.size>0&&(f=new Map(f),f.forEach(((e,t)=>f.set(t,X))));let p,m=!0===H||null!=U.navigation.formMethod&&Oe(U.navigation.formMethod)&&!0!==(null==(s=a.state)?void 0:s._isRedirect);if(c&&(b=c,c=void 0),W||I===r.Pop||(I===r.Push?e.history.push(a,a.state):I===r.Replace&&e.history.replace(a,a.state)),I===r.Pop){let e=F.get(U.location.pathname);e&&e.has(a.pathname)?p={currentLocation:U.location,nextLocation:a}:F.has(a.pathname)&&(p={currentLocation:a,nextLocation:U.location})}else if(z){let e=F.get(U.location.pathname);e?e.add(a.pathname):(e=new Set([a.pathname]),F.set(U.location.pathname,e)),p={currentLocation:U.location,nextLocation:a}}Ce(t({},n,{actionData:l,loaderData:h,historyAction:I,location:a,initialized:!0,navigation:J,revalidation:"idle",restoreScrollPosition:ht(a,n.matches||U.matches),preventScrollReset:m,blockers:f}),{viewTransitionOpts:p,flushSync:!0===u}),I=r.Pop,H=!1,z=!1,W=!1,$=!1,q=[]}async function ze(a,n,o){T&&T.abort(),T=null,I=a,W=!0===(o&&o.startUninterruptedRevalidation),function(e,t){if(L&&j){let r=dt(e,t);L[r]=j()}}(U.location,U.matches),H=!0===(o&&o.preventScrollReset),z=!0===(o&&o.enableViewTransition);let i=c||b,s=o&&o.overrideNavigation,l=p(i,n,w),u=!0===(o&&o.flushSync),h=ft(l,i,n.pathname);if(h.active&&h.matches&&(l=h.matches),!l){let{error:e,notFoundMatches:t,route:r}=lt(n.pathname);return void Te(n,{matches:t,loaderData:{},errors:{[r.id]:e}},{flushSync:u})}if(U.initialized&&!$&&function(e,t){if(e.pathname!==t.pathname||e.search!==t.search)return!1;if(""===e.hash)return""!==t.hash;if(e.hash===t.hash)return!0;if(""!==t.hash)return!0;return!1}(U.location,n)&&!(o&&o.submission&&Oe(o.submission.formMethod)))return void Te(n,{matches:l},{flushSync:u});T=new AbortController;let f,m=me(e.history,n,T.signal,o&&o.submission);if(o&&o.pendingError)f=[Se(l).route.id,{type:d.error,error:o.pendingError}];else if(o&&o.submission&&Oe(o.submission.formMethod)){let t=await async function(e,t,a,n,o,i){void 0===i&&(i={});let s;if(Xe(),Ce({navigation:We(t,a)},{flushSync:!0===i.flushSync}),o){let r=await pt(n,t.pathname,e.signal);if("aborted"===r.type)return{shortCircuited:!0};if("error"===r.type){let{boundaryId:e,error:a}=ut(t.pathname,r);return{matches:r.partialMatches,pendingActionResult:[e,{type:d.error,error:a}]}}if(!r.matches){let{notFoundMatches:e,error:r,route:a}=lt(t.pathname);return{matches:e,pendingActionResult:[a.id,{type:d.error,error:r}]}}n=r.matches}let l=Fe(n,t);if(l.route.action||l.route.lazy){if(s=(await Je("action",U,e,[l],n,null))[l.route.id],e.signal.aborted)return{shortCircuited:!0}}else s={type:d.error,error:Ee(405,{method:e.method,pathname:t.pathname,routeId:l.route.id})};if(je(s)){let t;if(i&&null!=i.replace)t=i.replace;else{t=pe(s.response.headers.get("Location"),new URL(e.url),w)===U.location.pathname+U.location.search}return await Ye(e,s,!0,{submission:a,replace:t}),{shortCircuited:!0}}if(Le(s))throw Ee(400,{type:"defer-action"});if(Me(s)){let e=Se(n,l.route.id);return!0!==(i&&i.replace)&&(I=r.Push),{matches:n,pendingActionResult:[e.route.id,s]}}return{matches:n,pendingActionResult:[l.route.id,s]}}(m,n,o.submission,l,h.active,{replace:o.replace,flushSync:u});if(t.shortCircuited)return;if(t.pendingActionResult){let[e,r]=t.pendingActionResult;if(Me(r)&&N(r.error)&&404===r.error.status)return T=null,void Te(n,{matches:t.matches,loaderData:{},errors:{[e]:r.error}})}l=t.matches||l,f=t.pendingActionResult,s=Be(n,o.submission),u=!1,h.active=!1,m=me(e.history,m.url,m.signal)}let{shortCircuited:y,matches:v,loaderData:g,errors:D}=await async function(r,a,n,o,i,s,l,u,d,h,f){let p=i||Be(a,s),m=s||l||Ne(p),y=!(W||R.v7_partialHydration&&d);if(o){if(y){let e=Ke(f);Ce(t({navigation:p},void 0!==e?{actionData:e}:{}),{flushSync:h})}let e=await pt(n,a.pathname,r.signal);if("aborted"===e.type)return{shortCircuited:!0};if("error"===e.type){let{boundaryId:t,error:r}=ut(a.pathname,e);return{matches:e.partialMatches,loaderData:{},errors:{[t]:r}}}if(!e.matches){let{error:e,notFoundMatches:t,route:r}=lt(a.pathname);return{matches:t,loaderData:{},errors:{[r.id]:e}}}n=e.matches}let v=c||b,[g,D]=oe(e.history,U,n,m,a,R.v7_partialHydration&&!0===d,R.v7_skipActionErrorRevalidation,$,q,K,ge,ye,se,v,w,f);if(ct((e=>!(n&&n.some((t=>t.route.id===e)))||g&&g.some((t=>t.route.id===e)))),ne=++te,0===g.length&&0===D.length){let e=at();return Te(a,t({matches:n,loaderData:{},errors:f&&Me(f[1])?{[f[0]]:f[1].error}:null},De(f),e?{fetchers:new Map(U.fetchers)}:{}),{flushSync:h}),{shortCircuited:!0}}if(y){let e={};if(!o){e.navigation=p;let t=Ke(f);void 0!==t&&(e.actionData=t)}D.length>0&&(e.fetchers=function(e){return e.forEach((e=>{let t=U.fetchers.get(e.key),r=$e(void 0,t?t.data:void 0);U.fetchers.set(e.key,r)})),new Map(U.fetchers)}(D)),Ce(e,{flushSync:h})}D.forEach((e=>{ee.has(e.key)&&tt(e.key),e.controller&&ee.set(e.key,e.controller)}));let S=()=>D.forEach((e=>tt(e.key)));T&&T.signal.addEventListener("abort",S);let{loaderResults:E,fetcherResults:P}=await Ve(U,n,g,D,r);if(r.signal.aborted)return{shortCircuited:!0};T&&T.signal.removeEventListener("abort",S);D.forEach((e=>ee.delete(e.key)));let x=Pe(E);if(x)return await Ye(r,x.result,!0,{replace:u}),{shortCircuited:!0};if(x=Pe(P),x)return se.add(x.key),await Ye(r,x.result,!0,{replace:u}),{shortCircuited:!0};let{loaderData:A,errors:L}=be(U,n,g,E,f,D,P,xe);xe.forEach(((e,t)=>{e.subscribe((r=>{(r||e.done)&&xe.delete(t)}))})),R.v7_partialHydration&&d&&U.errors&&Object.entries(U.errors).filter((e=>{let[t]=e;return!g.some((e=>e.route.id===t))})).forEach((e=>{let[t,r]=e;L=Object.assign(L||{},{[t]:r})}));let M=at(),j=nt(ne),k=M||j||D.length>0;return t({matches:n,loaderData:A,errors:L},k?{fetchers:new Map(U.fetchers)}:{})}(m,n,l,h.active,s,o&&o.submission,o&&o.fetcherSubmission,o&&o.replace,o&&!0===o.initialHydration,u,f);y||(T=null,Te(n,t({matches:v||l},De(f),{loaderData:g,errors:D})))}function Ke(e){return e&&!Me(e[1])?{[e[0]]:e[1].data}:U.actionData?0===Object.keys(U.actionData).length?null:U.actionData:void 0}async function Ye(o,l,u,c){let{submission:d,fetcherSubmission:h,replace:f}=void 0===c?{}:c;l.response.headers.has("X-Remix-Revalidate")&&($=!0);let p=l.response.headers.get("Location");n(p,"Expected a Location header on the redirect Response"),p=pe(p,new URL(o.url),w);let m=s(U.location,p,{_isRedirect:!0});if(i){let t=!1;if(l.response.headers.has("X-Remix-Reload-Document"))t=!0;else if(G.test(p)){const r=e.history.createURL(p);t=r.origin!==a.location.origin||null==P(r.pathname,w)}if(t)return void(f?a.location.replace(p):a.location.assign(p))}T=null;let y=!0===f||l.response.headers.has("X-Remix-Replace")?r.Replace:r.Push,{formMethod:v,formAction:g,formEncType:b}=U.navigation;!d&&!h&&v&&g&&b&&(d=Ne(U.navigation));let D=d||h;if(Y.has(l.response.status)&&D&&Oe(D.formMethod))await ze(y,m,{submission:t({},D,{formAction:p}),preventScrollReset:H,enableViewTransition:u?z:void 0});else{let e=Be(m,d);await ze(y,m,{overrideNavigation:e,fetcherSubmission:h,preventScrollReset:H,enableViewTransition:u?z:void 0})}}async function Je(e,t,r,a,n,o){let i,s={};try{i=await de(D,e,t,r,a,n,o,g,u)}catch(e){return a.forEach((t=>{s[t.route.id]={type:d.error,error:e}})),s}for(let[e,t]of Object.entries(i))if(Ae(t)){let a=t.result;s[e]={type:d.redirect,response:fe(a,r,e,n,w,R.v7_relativeSplatPath)}}else s[e]=await he(t);return s}async function Ve(t,r,a,n,o){let i=t.matches,s=Je("loader",t,o,a,r,null),l=Promise.all(n.map((async r=>{if(r.matches&&r.match&&r.controller){let a=(await Je("loader",t,me(e.history,r.path,r.controller.signal),[r.match],r.matches,r.key))[r.match.route.id];return{[r.key]:a}}return Promise.resolve({[r.key]:{type:d.error,error:Ee(404,{pathname:r.path})}})}))),u=await s,c=(await l).reduce(((e,t)=>Object.assign(e,t)),{});return await Promise.all([Ue(r,u,o.signal,i,t.loaderData),Ie(r,c,n)]),{loaderResults:u,fetcherResults:c}}function Xe(){$=!0,q.push(...ct()),ye.forEach(((e,t)=>{ee.has(t)&&(K.add(t),tt(t))}))}function Ge(e,t,r){void 0===r&&(r={}),U.fetchers.set(e,t),Ce({fetchers:new Map(U.fetchers)},{flushSync:!0===(r&&r.flushSync)})}function Qe(e,t,r,a){void 0===a&&(a={});let n=Se(U.matches,t);et(e),Ce({errors:{[n.route.id]:r},fetchers:new Map(U.fetchers)},{flushSync:!0===(a&&a.flushSync)})}function Ze(e){return R.v7_fetcherPersist&&(ve.set(e,(ve.get(e)||0)+1),ge.has(e)&&ge.delete(e)),U.fetchers.get(e)||V}function et(e){let t=U.fetchers.get(e);!ee.has(e)||t&&"loading"===t.state&&ie.has(e)||tt(e),ye.delete(e),ie.delete(e),se.delete(e),ge.delete(e),K.delete(e),U.fetchers.delete(e)}function tt(e){let t=ee.get(e);n(t,"Expected fetch controller: "+e),t.abort(),ee.delete(e)}function rt(e){for(let t of e){let e=qe(Ze(t).data);U.fetchers.set(t,e)}}function at(){let e=[],t=!1;for(let r of se){let a=U.fetchers.get(r);n(a,"Expected fetcher: "+r),"loading"===a.state&&(se.delete(r),e.push(r),t=!0)}return rt(e),t}function nt(e){let t=[];for(let[r,a]of ie)if(a<e){let e=U.fetchers.get(r);n(e,"Expected fetcher: "+r),"loading"===e.state&&(tt(r),ie.delete(r),t.push(r))}return rt(t),t.length>0}function ot(e){U.blockers.delete(e),ke.delete(e)}function it(e,t){let r=U.blockers.get(e)||X;n("unblocked"===r.state&&"blocked"===t.state||"blocked"===r.state&&"blocked"===t.state||"blocked"===r.state&&"proceeding"===t.state||"blocked"===r.state&&"unblocked"===t.state||"proceeding"===r.state&&"unblocked"===t.state,"Invalid blocker state transition: "+r.state+" -> "+t.state);let a=new Map(U.blockers);a.set(e,t),Ce({blockers:a})}function st(e){let{currentLocation:t,nextLocation:r,historyAction:a}=e;if(0===ke.size)return;ke.size>1&&o(!1,"A router only supports one blocker at a time");let n=Array.from(ke.entries()),[i,s]=n[n.length-1],l=U.blockers.get(i);return l&&"proceeding"===l.state?void 0:s({currentLocation:t,nextLocation:r,historyAction:a})?i:void 0}function lt(e){let t=Ee(404,{pathname:e}),r=c||b,{matches:a,route:n}=Re(r);return ct(),{notFoundMatches:a,route:n,error:t}}function ut(e,t){return{boundaryId:Se(t.partialMatches).route.id,error:Ee(400,{type:"route-discovery",pathname:e,message:null!=t.error&&"message"in t.error?t.error:String(t.error)})}}function ct(e){let t=[];return xe.forEach(((r,a)=>{e&&!e(a)||(r.cancel(),t.push(a),xe.delete(a))})),t}function dt(e,t){if(M){return M(e,t.map((e=>y(e,U.loaderData))))||e.key}return e.key}function ht(e,t){if(L){let r=dt(e,t),a=L[r];if("number"==typeof a)return a}return null}function ft(e,t,r){if(S){if(A.has(r))return{active:!1,matches:e};if(!e){return{active:!0,matches:m(t,r,w,!0)||[]}}if(Object.keys(e[0].params).length>0){return{active:!0,matches:m(t,r,w,!0)}}}return{active:!1,matches:null}}async function pt(e,t,r){let a=e;for(;;){let e=null==c,n=c||b;try{await le(S,t,a,n,g,u,_e,r)}catch(e){return{type:"error",error:e,partialMatches:a}}finally{e&&(b=[...b])}if(r.aborted)return{type:"aborted"};let o=p(n,t,w);if(o)return mt(t,A),{type:"success",matches:o};let i=m(n,t,w,!0);if(!i||a.length===i.length&&a.every(((e,t)=>e.route.id===i[t].route.id)))return mt(t,A),{type:"success",matches:null};a=i}}function mt(e,t){if(t.size>=1e3){let e=t.values().next().value;t.delete(e)}t.add(e)}return v={get basename(){return w},get future(){return R},get state(){return U},get routes(){return b},get window(){return a},initialize:function(){if(E=e.history.listen((t=>{let{action:r,location:a,delta:n}=t;if(O)return O(),void(O=void 0);o(0===ke.size||null!=n,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let i=st({currentLocation:U.location,nextLocation:a,historyAction:r});if(i&&null!=n){let t=new Promise((e=>{O=e}));return e.history.go(-1*n),void it(i,{state:"blocked",location:a,proceed(){it(i,{state:"proceeding",proceed:void 0,reset:void 0,location:a}),t.then((()=>e.history.go(n)))},reset(){let e=new Map(U.blockers);e.set(i,X),Ce({blockers:e})}})}return ze(r,a)})),i){!function(e,t){try{let r=e.sessionStorage.getItem(Z);if(r){let e=JSON.parse(r);for(let[r,a]of Object.entries(e||{}))a&&Array.isArray(a)&&t.set(r,new Set(a||[]))}}catch(e){}}(a,F);let e=()=>function(e,t){if(t.size>0){let r={};for(let[e,a]of t)r[e]=[...a];try{e.sessionStorage.setItem(Z,JSON.stringify(r))}catch(e){o(!1,"Failed to save applied view transitions in sessionStorage ("+e+").")}}}(a,F);a.addEventListener("pagehide",e),B=()=>a.removeEventListener("pagehide",e)}return U.initialized||ze(r.Pop,U.location,{initialHydration:!0}),v},subscribe:function(e){return x.add(e),()=>x.delete(e)},enableScrollRestoration:function(e,t,r){if(L=e,j=t,M=r||null,!k&&U.navigation===J){k=!0;let e=ht(U.location,U.matches);null!=e&&Ce({restoreScrollPosition:e})}return()=>{L=null,j=null,M=null}},navigate:async function a(n,o){if("number"==typeof n)return void e.history.go(n);let i=re(U.location,U.matches,w,R.v7_prependBasename,n,R.v7_relativeSplatPath,null==o?void 0:o.fromRouteId,null==o?void 0:o.relative),{path:l,submission:u,error:c}=ae(R.v7_normalizeFormMethod,!1,i,o),d=U.location,h=s(U.location,l,o&&o.state);h=t({},h,e.history.encodeLocation(h));let f=o&&null!=o.replace?o.replace:void 0,p=r.Push;!0===f?p=r.Replace:!1===f||null!=u&&Oe(u.formMethod)&&u.formAction===U.location.pathname+U.location.search&&(p=r.Replace);let m=o&&"preventScrollReset"in o?!0===o.preventScrollReset:void 0,y=!0===(o&&o.unstable_flushSync),v=st({currentLocation:d,nextLocation:h,historyAction:p});if(!v)return await ze(p,h,{submission:u,pendingError:c,preventScrollReset:m,replace:o&&o.replace,enableViewTransition:o&&o.unstable_viewTransition,flushSync:y});it(v,{state:"blocked",location:h,proceed(){it(v,{state:"proceeding",proceed:void 0,reset:void 0,location:h}),a(n,o)},reset(){let e=new Map(U.blockers);e.set(v,X),Ce({blockers:e})}})},fetch:function(t,r,a,o){if(l)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");ee.has(t)&&tt(t);let i=!0===(o&&o.unstable_flushSync),s=c||b,u=re(U.location,U.matches,w,R.v7_prependBasename,a,R.v7_relativeSplatPath,r,null==o?void 0:o.relative),d=p(s,u,w),h=ft(d,s,u);if(h.active&&h.matches&&(d=h.matches),!d)return void Qe(t,r,Ee(404,{pathname:u}),{flushSync:i});let{path:f,submission:m,error:y}=ae(R.v7_normalizeFormMethod,!0,u,o);if(y)return void Qe(t,r,y,{flushSync:i});let v=Fe(d,f);H=!0===(o&&o.preventScrollReset),m&&Oe(m.formMethod)?async function(t,r,a,o,i,s,l,u){function d(e){if(!e.route.action&&!e.route.lazy){let e=Ee(405,{method:u.formMethod,pathname:a,routeId:r});return Qe(t,r,e,{flushSync:l}),!0}return!1}if(Xe(),ye.delete(t),!s&&d(o))return;let h=U.fetchers.get(t);Ge(t,function(e,t){return{state:"submitting",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t?t.data:void 0}}(u,h),{flushSync:l});let f=new AbortController,m=me(e.history,a,f.signal,u);if(s){let e=await pt(i,a,m.signal);if("aborted"===e.type)return;if("error"===e.type){let{error:n}=ut(a,e);return void Qe(t,r,n,{flushSync:l})}if(!e.matches)return void Qe(t,r,Ee(404,{pathname:a}),{flushSync:l});if(d(o=Fe(i=e.matches,a)))return}ee.set(t,f);let y=te,v=(await Je("action",U,m,[o],i,t))[o.route.id];if(m.signal.aborted)return void(ee.get(t)===f&&ee.delete(t));if(R.v7_fetcherPersist&&ge.has(t)){if(je(v)||Me(v))return void Ge(t,qe(void 0))}else{if(je(v))return ee.delete(t),ne>y?void Ge(t,qe(void 0)):(se.add(t),Ge(t,$e(u)),Ye(m,v,!1,{fetcherSubmission:u}));if(Me(v))return void Qe(t,r,v.error)}if(Le(v))throw Ee(400,{type:"defer-action"});let g=U.navigation.location||U.location,D=me(e.history,g,f.signal),S=c||b,E="idle"!==U.navigation.state?p(S,U.navigation.location,w):U.matches;n(E,"Didn't find any matches after fetcher action");let P=++te;ie.set(t,P);let x=$e(u,v.data);U.fetchers.set(t,x);let[A,L]=oe(e.history,U,E,u,g,!1,R.v7_skipActionErrorRevalidation,$,q,K,ge,ye,se,S,w,[o.route.id,v]);L.filter((e=>e.key!==t)).forEach((e=>{let t=e.key,r=U.fetchers.get(t),a=$e(void 0,r?r.data:void 0);U.fetchers.set(t,a),ee.has(t)&&tt(t),e.controller&&ee.set(t,e.controller)})),Ce({fetchers:new Map(U.fetchers)});let M=()=>L.forEach((e=>tt(e.key)));f.signal.addEventListener("abort",M);let{loaderResults:j,fetcherResults:k}=await Ve(U,E,A,L,D);if(f.signal.aborted)return;f.signal.removeEventListener("abort",M),ie.delete(t),ee.delete(t),L.forEach((e=>ee.delete(e.key)));let _=Pe(j);if(_)return Ye(D,_.result,!1);if(_=Pe(k),_)return se.add(_.key),Ye(D,_.result,!1);let{loaderData:C,errors:O}=be(U,E,A,j,void 0,L,k,xe);if(U.fetchers.has(t)){let e=qe(v.data);U.fetchers.set(t,e)}nt(P),"loading"===U.navigation.state&&P>ne?(n(I,"Expected pending action"),T&&T.abort(),Te(U.navigation.location,{matches:E,loaderData:C,errors:O,fetchers:new Map(U.fetchers)})):(Ce({errors:O,loaderData:we(U.loaderData,C,E,O),fetchers:new Map(U.fetchers)}),$=!1)}(t,r,f,v,d,h.active,i,m):(ye.set(t,{routeId:r,path:f}),async function(t,r,a,o,i,s,l,u){let c=U.fetchers.get(t);Ge(t,$e(u,c?c.data:void 0),{flushSync:l});let d=new AbortController,h=me(e.history,a,d.signal);if(s){let e=await pt(i,a,h.signal);if("aborted"===e.type)return;if("error"===e.type){let{error:n}=ut(a,e);return void Qe(t,r,n,{flushSync:l})}if(!e.matches)return void Qe(t,r,Ee(404,{pathname:a}),{flushSync:l});o=Fe(i=e.matches,a)}ee.set(t,d);let f=te,p=(await Je("loader",U,h,[o],i,t))[o.route.id];Le(p)&&(p=await He(p,h.signal,!0)||p);ee.get(t)===d&&ee.delete(t);if(h.signal.aborted)return;if(ge.has(t))return void Ge(t,qe(void 0));if(je(p))return ne>f?void Ge(t,qe(void 0)):(se.add(t),void await Ye(h,p,!1));if(Me(p))return void Qe(t,r,p.error);n(!Le(p),"Unhandled fetcher deferred data"),Ge(t,qe(p.data))}(t,r,f,v,d,h.active,i,m))},revalidate:function(){Xe(),Ce({revalidation:"loading"}),"submitting"!==U.navigation.state&&("idle"!==U.navigation.state?ze(I||U.historyAction,U.navigation.location,{overrideNavigation:U.navigation,enableViewTransition:!0===z}):ze(U.historyAction,U.location,{startUninterruptedRevalidation:!0}))},createHref:t=>e.history.createHref(t),encodeLocation:t=>e.history.encodeLocation(t),getFetcher:Ze,deleteFetcher:function(e){if(R.v7_fetcherPersist){let t=(ve.get(e)||0)-1;t<=0?(ve.delete(e),ge.add(e)):ve.set(e,t)}else et(e);Ce({fetchers:new Map(U.fetchers)})},dispose:function(){E&&E(),B&&B(),x.clear(),T&&T.abort(),U.fetchers.forEach(((e,t)=>et(t))),U.blockers.forEach(((e,t)=>ot(t)))},getBlocker:function(e,t){let r=U.blockers.get(e)||X;return ke.get(e)!==t&&ke.set(e,t),r},deleteBlocker:ot,patchRoutes:function(e,t){let r=null==c;ue(e,t,c||b,g,u),r&&(b=[...b],Ce({}))},_internalFetchControllers:ee,_internalActiveDeferreds:xe,_internalSetRoutes:function(e){g={},c=f(e,u,void 0,g)}},v},e.createStaticHandler=function(e,r){n(e.length>0,"You must provide a non-empty routes array to createStaticHandler");let a,o={},i=(r?r.basename:null)||"/";if(null!=r&&r.mapRouteProperties)a=r.mapRouteProperties;else if(null!=r&&r.detectErrorBoundary){let e=r.detectErrorBoundary;a=t=>({hasErrorBoundary:e(t)})}else a=Q;let u=t({v7_relativeSplatPath:!1,v7_throwAbortReason:!1},r?r.future:null),c=f(e,a,void 0,o);async function h(e,r,a,o,i,s,l){n(e.signal,"query()/queryRoute() requests must contain an AbortController signal");try{if(Oe(e.method.toLowerCase())){let n=await async function(e,r,a,n,o,i,s){let l;if(a.route.action||a.route.lazy){l=(await y("action",e,[a],r,s,n,o))[a.route.id],e.signal.aborted&&te(e,s,u)}else{let t=Ee(405,{method:e.method,pathname:new URL(e.url).pathname,routeId:a.route.id});if(s)throw t;l={type:d.error,error:t}}if(je(l))throw new Response(null,{status:l.response.status,headers:{Location:l.response.headers.get("Location")}});if(Le(l)){let e=Ee(400,{type:"defer-action"});if(s)throw e;l={type:d.error,error:e}}if(s){if(Me(l))throw l.error;return{matches:[a],loaderData:{},actionData:{[a.route.id]:l.data},errors:null,statusCode:200,loaderHeaders:{},actionHeaders:{},activeDeferreds:null}}let c=new Request(e.url,{headers:e.headers,redirect:e.redirect,signal:e.signal});if(Me(l)){let e=i?a:Se(r,a.route.id);return t({},await m(c,r,n,o,i,null,[e.route.id,l]),{statusCode:N(l.error)?l.error.status:null!=l.statusCode?l.statusCode:500,actionData:null,actionHeaders:t({},l.headers?{[a.route.id]:l.headers}:{})})}return t({},await m(c,r,n,o,i,null),{actionData:{[a.route.id]:l.data}},l.statusCode?{statusCode:l.statusCode}:{},{actionHeaders:l.headers?{[a.route.id]:l.headers}:{}})}(e,a,l||Fe(a,r),o,i,s,null!=l);return n}let n=await m(e,a,o,i,s,l);return Ce(n)?n:t({},n,{actionData:null,actionHeaders:{}})}catch(e){if(function(e){return null!=e&&"object"==typeof e&&"type"in e&&"result"in e&&(e.type===d.data||e.type===d.error)}(e)&&Ce(e.result)){if(e.type===d.error)throw e.result;return e.result}if(function(e){if(!Ce(e))return!1;let t=e.status,r=e.headers.get("Location");return t>=300&&t<=399&&null!=r}(e))return e;throw e}}async function m(e,r,a,n,o,i,s){let l=null!=i;if(l&&(null==i||!i.route.loader)&&(null==i||!i.route.lazy))throw Ee(400,{method:e.method,pathname:new URL(e.url).pathname,routeId:null==i?void 0:i.route.id});let c=(i?[i]:s&&Me(s[1])?ne(r,s[0]):r).filter((e=>e.route.loader||e.route.lazy));if(0===c.length)return{matches:r,loaderData:r.reduce(((e,t)=>Object.assign(e,{[t.route.id]:null})),{}),errors:s&&Me(s[1])?{[s[0]]:s[1].error}:null,statusCode:200,loaderHeaders:{},activeDeferreds:null};let d=await y("loader",e,c,r,l,a,n);e.signal.aborted&&te(e,l,u);let h=new Map,f=ge(r,d,s,h,o),p=new Set(c.map((e=>e.route.id)));return r.forEach((e=>{p.has(e.route.id)||(f.loaderData[e.route.id]=null)})),t({},f,{matches:r,activeDeferreds:h.size>0?Object.fromEntries(h.entries()):null})}async function y(e,t,r,n,s,l,c){let d=await de(c||ce,e,null,t,r,n,null,o,a,l),h={};return await Promise.all(n.map((async e=>{if(!(e.route.id in d))return;let r=d[e.route.id];if(Ae(r)){throw fe(r.result,t,e.route.id,n,i,u.v7_relativeSplatPath)}if(Ce(r.result)&&s)throw r;h[e.route.id]=await he(r)}))),h}return{dataRoutes:c,query:async function(e,r){let{requestContext:a,skipLoaderErrorBubbling:n,unstable_dataStrategy:o}=void 0===r?{}:r,u=new URL(e.url),d=e.method,f=s("",l(u),null,"default"),m=p(c,f,i);if(!Te(d)&&"HEAD"!==d){let e=Ee(405,{method:d}),{matches:t,route:r}=Re(c);return{basename:i,location:f,matches:t,loaderData:{},actionData:null,errors:{[r.id]:e},statusCode:e.status,loaderHeaders:{},actionHeaders:{},activeDeferreds:null}}if(!m){let e=Ee(404,{pathname:f.pathname}),{matches:t,route:r}=Re(c);return{basename:i,location:f,matches:t,loaderData:{},actionData:null,errors:{[r.id]:e},statusCode:e.status,loaderHeaders:{},actionHeaders:{},activeDeferreds:null}}let y=await h(e,f,m,a,o||null,!0===n,null);return Ce(y)?y:t({location:f,basename:i},y)},queryRoute:async function(e,t){let{routeId:r,requestContext:a,unstable_dataStrategy:n}=void 0===t?{}:t,o=new URL(e.url),u=e.method,d=s("",l(o),null,"default"),f=p(c,d,i);if(!Te(u)&&"HEAD"!==u&&"OPTIONS"!==u)throw Ee(405,{method:u});if(!f)throw Ee(404,{pathname:d.pathname});let m=r?f.find((e=>e.route.id===r)):Fe(f,d);if(r&&!m)throw Ee(403,{pathname:d.pathname,routeId:r});if(!m)throw Ee(404,{pathname:d.pathname});let y=await h(e,d,f,a,n||null,!1,m);if(Ce(y))return y;let v=y.errors?Object.values(y.errors)[0]:void 0;if(void 0!==v)throw v;if(y.actionData)return Object.values(y.actionData)[0];if(y.loaderData){var g;let e=Object.values(y.loaderData)[0];return null!=(g=y.activeDeferreds)&&g[m.route.id]&&(e[ee]=y.activeDeferreds[m.route.id]),e}}}},e.defer=function(e,t){return void 0===t&&(t={}),new I(e,"number"==typeof t?{status:t}:t)},e.generatePath=function(e,t){void 0===t&&(t={});let r=e;r.endsWith("*")&&"*"!==r&&!r.endsWith("/*")&&(o(!1,'Route path "'+r+'" will be treated as if it were "'+r.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+r.replace(/\*$/,"/*")+'".'),r=r.replace(/\*$/,"/*"));const a=r.startsWith("/")?"/":"",i=e=>null==e?"":"string"==typeof e?e:String(e);return a+r.split(/\/+/).map(((e,r,a)=>{if(r===a.length-1&&"*"===e){return i(t["*"])}const o=e.match(/^:([\w-]+)(\??)$/);if(o){const[,e,r]=o;let a=t[e];return n("?"===r||null!=a,'Missing ":'+e+'" param'),i(a)}return e.replace(/\?$/g,"")})).filter((e=>!!e)).join("/")},e.getStaticContextFromError=function(e,r,a){return t({},r,{statusCode:N(a)?a.status:500,errors:{[r._deepestRenderedBoundaryId||e[0].id]:a}})},e.getToPathname=function(e){return""===e||""===e.pathname?"/":"string"==typeof e?u(e).pathname:e.pathname},e.isDataWithResponseInit=ke,e.isDeferredData=_e,e.isRouteErrorResponse=N,e.joinPaths=k,e.json=function(e,r){void 0===r&&(r={});let a="number"==typeof r?{status:r}:r,n=new Headers(a.headers);return n.has("Content-Type")||n.set("Content-Type","application/json; charset=utf-8"),new Response(JSON.stringify(e),t({},a,{headers:n}))},e.matchPath=R,e.matchRoutes=p,e.normalizePathname=_,e.parsePath=u,e.redirect=z,e.redirectDocument=(e,t)=>{let r=z(e,t);return r.headers.set("X-Remix-Reload-Document","true"),r},e.replace=(e,t)=>{let r=z(e,t);return r.headers.set("X-Remix-Replace","true"),r},e.resolvePath=x,e.resolveTo=j,e.stripBasename=P,e.unstable_data=function(e,t){return new O(e,"number"==typeof t?{status:t}:t)},Object.defineProperty(e,"__esModule",{value:!0})}));
 //# sourceMappingURL=router.umd.min.js.map
diff --git a/dist/router.umd.min.js.map b/dist/router.umd.min.js.map
index c9e6281dd46cec40c4787f6aad2404b8d9e17fbc..33978a9aa6490e551ee4a57460de1870d5951181 100644
--- a/dist/router.umd.min.js.map
+++ b/dist/router.umd.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"router.umd.min.js","sources":["../history.ts","../utils.ts","../router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => DataFunctionReturnValue\n  ) => Promise<DataStrategyResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n  fetcherKey: string | null;\n}\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface DataStrategyResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData, DataWithResponseInit\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<Record<string, DataStrategyResult>>;\n}\n\nexport interface AgnosticPatchRoutesOnNavigationFunction<\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> {\n  (opts: {\n    path: string;\n    matches: M[];\n    patch: (routeId: string | null, children: AgnosticRouteObject[]) => void;\n  }): void | Promise<void>;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: string[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nexport function matchRoutesImpl<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename: string,\n  allowPartial: boolean\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string,\n  allowPartial = false\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    let route = meta.route;\n\n    if (\n      !match &&\n      end &&\n      allowPartial &&\n      !routesMeta[routesMeta.length - 1].route.index\n    ) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false,\n        },\n        remainingPathname\n      );\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nexport function decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DataWithResponseInit<D> {\n  type: string = \"DataWithResponseInit\";\n  data: D;\n  init: ResponseInit | null;\n\n  constructor(data: D, init?: ResponseInit) {\n    this.data = data;\n    this.init = init || null;\n  }\n}\n\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nexport function data<D>(data: D, init?: number | ResponseInit) {\n  return new DataWithResponseInit(\n    data,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const replace: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  DataStrategyResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n  AgnosticPatchRoutesOnNavigationFunction,\n  DataWithResponseInit,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  matchRoutesImpl,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE DO NOT USE\n   *\n   * Patch additional children routes into an existing parent route\n   * @param routeId The parent route id or a callback function accepting `patch`\n   *                to perform batch patching\n   * @param children The additional children routes\n   */\n  patchRoutes(routeId: string | null, children: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  v7_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  unstable_patchRoutesOnNavigation?: AgnosticPatchRoutesOnNavigationFunction;\n  unstable_dataStrategy?: DataStrategyFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.unstable_patchRoutesOnNavigation;\n\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // FIFO queue of previously discovered routes to prevent re-calling on\n  // subsequent navigations to the same path\n  let discoveredRoutesMaxSize = 1000;\n  let discoveredRoutes = new Set<string>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(\n      initialMatches,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized: boolean;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(\n        null,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some((m) => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some((m) => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (\n        typeof m.route.loader === \"function\" &&\n        m.route.loader.hydrate === true\n      ) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: Set<string> = new Set();\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map<\n    string,\n    ReturnType<AgnosticPatchRoutesOnNavigationFunction>\n  >();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate: (() => void) | undefined = undefined;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (unblockBlockerHistoryUpdate) {\n          unblockBlockerHistoryUpdate();\n          unblockBlockerHistoryUpdate = undefined;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          let nextHistoryUpdatePromise = new Promise<void>((resolve) => {\n            unblockBlockerHistoryUpdate = resolve;\n          });\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked, after the url\n              // restoration is also complete.  See:\n              // https://github.com/remix-run/react-router/issues/11613\n              nextHistoryUpdatePromise.then(() => init.history.go(delta));\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      {\n        overrideNavigation: state.navigation,\n        // Proxy through any rending view transition\n        enableViewTransition: pendingViewTransitionEnabled === true,\n      }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        fogOfWar.active,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (\n          isErrorResult(result) &&\n          isRouteErrorResponse(result.error) &&\n          result.error.status === 404\n        ) {\n          pendingNavigationController = null;\n\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error,\n            },\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors,\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        state,\n        request,\n        [actionMatch],\n        matches,\n        null\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState =\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration);\n\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...(actionData !== undefined ? { actionData } : {}),\n          },\n          {\n            flushSync,\n          }\n        );\n      }\n\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: error,\n          },\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates: Partial<RouterState> = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getUpdatedActionData(\n    pendingActionResult: PendingActionResult | undefined\n  ): Record<string, RouteData> | null | undefined {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data as any,\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(\n    revalidatingFetchers: RevalidatingFetcher[]\n  ) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        undefined,\n        fetcher ? fetcher.data : undefined\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        fogOfWar.active,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      fogOfWar.active,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m: AgnosticDataRouteMatch) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId,\n        });\n        setFetcherError(key, routeId, error, { flushSync });\n        return true;\n      }\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      state,\n      fetchRequest,\n      [match],\n      requestMatches,\n      key\n    );\n    let actionResult = actionResults[match.route.id];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      state,\n      fetchRequest,\n      [match],\n      matches,\n      key\n    );\n    let result = results[match.route.id];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    isNavigation: boolean,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true || redirect.response.headers.has(\"X-Remix-Replace\")\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    state: RouterState,\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    fetcherKey: string | null\n  ): Promise<Record<string, DataResult>> {\n    let results: Record<string, DataStrategyResult>;\n    let dataResults: Record<string, DataResult> = {};\n    try {\n      results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        state,\n        request,\n        matchesToLoad,\n        matches,\n        fetcherKey,\n        manifest,\n        mapRouteProperties\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach((m) => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e,\n        };\n      });\n      return dataResults;\n    }\n\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result as Response;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            routeId,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          ),\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(\n          result\n        );\n      }\n    }\n\n    return dataResults;\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    state: RouterState,\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let currentMatches = state.matches;\n\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\n      \"loader\",\n      state,\n      request,\n      matchesToLoad,\n      matches,\n      null\n    );\n\n    let fetcherResultsPromise = Promise.all(\n      fetchersToLoad.map(async (f) => {\n        if (f.matches && f.match && f.controller) {\n          let results = await callDataStrategy(\n            \"loader\",\n            state,\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            [f.match],\n            f.matches,\n            f.key\n          );\n          let result = results[f.match.route.id];\n          // Fetcher results are keyed by fetcher key from here on out, not routeId\n          return { [f.key]: result };\n        } else {\n          return Promise.resolve({\n            [f.key]: {\n              type: ResultType.error,\n              error: getInternalRouterError(404, {\n                pathname: f.path,\n              }),\n            } as ErrorResult,\n          });\n        }\n      })\n    );\n\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce(\n      (acc, r) => Object.assign(acc, r),\n      {}\n    );\n\n    await Promise.all([\n      resolveNavigationDeferredResults(\n        matches,\n        loaderResults,\n        request.signal,\n        currentMatches,\n        state.loaderData\n      ),\n      resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname: string) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n\n    return { notFoundMatches: matches, route, error };\n  }\n\n  function handleDiscoverRouteError(\n    pathname: string,\n    discoverResult: DiscoverRoutesErrorResult\n  ) {\n    return {\n      boundaryId: findNearestBoundary(discoverResult.partialMatches).route.id,\n      error: getInternalRouterError(400, {\n        type: \"route-discovery\",\n        pathname,\n        message:\n          discoverResult.error != null && \"message\" in discoverResult.error\n            ? discoverResult.error\n            : String(discoverResult.error),\n      }),\n    };\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function checkFogOfWar(\n    matches: AgnosticDataRouteMatch[] | null,\n    routesToUse: AgnosticDataRouteObject[],\n    pathname: string\n  ): { active: boolean; matches: AgnosticDataRouteMatch[] | null } {\n    if (patchRoutesOnNavigationImpl) {\n      // Don't bother re-calling patchRouteOnMiss for a path we've already\n      // processed.  the last execution would have patched the route tree\n      // accordingly so `matches` here are already accurate.\n      if (discoveredRoutes.has(pathname)) {\n        return { active: false, matches };\n      }\n\n      if (!matches) {\n        let fogMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n\n    return { active: false, matches: null };\n  }\n\n  type DiscoverRoutesSuccessResult = {\n    type: \"success\";\n    matches: AgnosticDataRouteMatch[] | null;\n  };\n  type DiscoverRoutesErrorResult = {\n    type: \"error\";\n    error: any;\n    partialMatches: AgnosticDataRouteMatch[];\n  };\n  type DiscoverRoutesAbortedResult = { type: \"aborted\" };\n  type DiscoverRoutesResult =\n    | DiscoverRoutesSuccessResult\n    | DiscoverRoutesErrorResult\n    | DiscoverRoutesAbortedResult;\n\n  async function discoverRoutes(\n    matches: AgnosticDataRouteMatch[],\n    pathname: string,\n    signal: AbortSignal\n  ): Promise<DiscoverRoutesResult> {\n    let partialMatches: AgnosticDataRouteMatch[] | null = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      try {\n        await loadLazyRouteChildren(\n          patchRoutesOnNavigationImpl!,\n          pathname,\n          partialMatches,\n          routesToUse,\n          manifest,\n          mapRouteProperties,\n          pendingPatchRoutes,\n          signal\n        );\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: newMatches };\n      }\n\n      let newPartialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n\n      // Avoid loops if the second pass results in the same partial matches\n      if (\n        !newPartialMatches ||\n        (partialMatches.length === newPartialMatches.length &&\n          partialMatches.every(\n            (m, i) => m.route.id === newPartialMatches![i].route.id\n          ))\n      ) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: null };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function addToFifoQueue(path: string, queue: Set<string>) {\n    if (queue.size >= discoveredRoutesMaxSize) {\n      let first = queue.values().next().value;\n      queue.delete(first);\n    }\n    queue.add(path);\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  function patchRoutes(\n    routeId: string | null,\n    children: AgnosticRouteObject[]\n  ): void {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties\n    );\n\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          unstable_dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        unstable_dataStrategy\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      unstable_dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      unstable_dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null\n  ): Promise<Record<string, DataResult>> {\n    let results = await callDataStrategyImpl(\n      unstable_dataStrategy || defaultDataStrategy,\n      type,\n      null,\n      request,\n      matchesToLoad,\n      matches,\n      null,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    let dataResults: Record<string, DataResult> = {};\n    await Promise.all(\n      matches.map(async (match) => {\n        if (!(match.route.id in results)) {\n          return;\n        }\n        let result = results[match.route.id];\n        if (isRedirectDataStrategyResultResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            match.route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        dataResults[match.route.id] =\n          await convertDataStrategyResultToDataResult(result);\n      })\n    );\n    return dataResults;\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: Set<string>,\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[0]\n      : undefined;\n  let boundaryMatches = boundaryId\n    ? getLoaderMatchesUntilBoundary(matches, boundaryId)\n    : matches;\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Idempotent utility to execute patchRoutesOnNavigation() to lazily load route\n * definitions and update the routes/routeManifest\n */\nasync function loadLazyRouteChildren(\n  patchRoutesOnNavigationImpl: AgnosticPatchRoutesOnNavigationFunction,\n  path: string,\n  matches: AgnosticDataRouteMatch[],\n  routes: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  pendingRouteChildren: Map<\n    string,\n    ReturnType<typeof patchRoutesOnNavigationImpl>\n  >,\n  signal: AbortSignal\n) {\n  let key = [path, ...matches.map((m) => m.route.id)].join(\"-\");\n  try {\n    let pending = pendingRouteChildren.get(key);\n    if (!pending) {\n      pending = patchRoutesOnNavigationImpl({\n        path,\n        matches,\n        patch: (routeId, children) => {\n          if (!signal.aborted) {\n            patchRoutesImpl(\n              routeId,\n              children,\n              routes,\n              manifest,\n              mapRouteProperties\n            );\n          }\n        },\n      });\n      pendingRouteChildren.set(key, pending);\n    }\n\n    if (pending && isPromise<AgnosticRouteObject[]>(pending)) {\n      await pending;\n    }\n  } finally {\n    pendingRouteChildren.delete(key);\n  }\n}\n\nfunction patchRoutesImpl(\n  routeId: string | null,\n  children: AgnosticRouteObject[],\n  routesToUse: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction\n) {\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [routeId, \"patch\", String(route.children?.length || \"0\")],\n      manifest\n    );\n    if (route.children) {\n      route.children.push(...dataChildren);\n    } else {\n      route.children = dataChildren;\n    }\n  } else {\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [\"patch\", String(routesToUse.length || \"0\")],\n      manifest\n    );\n    routesToUse.push(...dataChildren);\n  }\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy({\n  matches,\n}: DataStrategyFunctionArgs): ReturnType<DataStrategyFunction> {\n  let matchesToLoad = matches.filter((m) => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map((m) => m.resolve()));\n  return results.reduce(\n    (acc, result, i) =>\n      Object.assign(acc, { [matchesToLoad[i].route.id]: result }),\n    {}\n  );\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  state: RouterState | null,\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  fetcherKey: string | null,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<Record<string, DataStrategyResult>> {\n  let loadRouteDefinitionsPromises = matches.map((m) =>\n    m.route.lazy\n      ? loadLazyRouteModule(m.route, mapRouteProperties, manifest)\n      : undefined\n  );\n\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some((m) => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve: DataStrategyMatch[\"resolve\"] = async (handlerOverride) => {\n      if (\n        handlerOverride &&\n        request.method === \"GET\" &&\n        (match.route.lazy || match.route.loader)\n      ) {\n        shouldLoad = true;\n      }\n      return shouldLoad\n        ? callLoaderOrAction(\n            type,\n            request,\n            match,\n            loadRoutePromise,\n            handlerOverride,\n            requestContext\n          )\n        : Promise.resolve({ type: ResultType.data, result: undefined });\n    };\n\n    return {\n      ...match,\n      shouldLoad,\n      resolve,\n    };\n  });\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext,\n  });\n\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n\n  return results;\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  loadRoutePromise: Promise<void> | undefined,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<DataStrategyResult> {\n  let result: DataStrategyResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<DataStrategyResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<DataStrategyResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<DataStrategyResult> = (async () => {\n      try {\n        let val = await (handlerOverride\n          ? handlerOverride((ctx: unknown) => actualHandler(ctx))\n          : actualHandler());\n        return { type: \"data\", result: val };\n      } catch (e) {\n        return { type: \"error\", result: e };\n      }\n    })();\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadRoutePromise,\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertDataStrategyResultToDataResult(\n  dataStrategyResult: DataStrategyResult\n): Promise<DataResult> {\n  let { result, type } = dataStrategyResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: result.init?.status,\n        };\n      }\n\n      // Convert thrown unstable_data() to ErrorResponse instances\n      result = new ErrorResponseImpl(\n        result.init?.status || 500,\n        undefined,\n        result.data\n      );\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers\n        ? new Headers(result.init.headers)\n        : undefined,\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach((match) => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: Record<string, DataResult>,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach((rf) => {\n    let { key, match, controller } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\" | \"route-discovery\";\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (type === \"route-discovery\") {\n      errorMessage =\n        `Unable to match URL \"${pathname}\" - the \\`unstable_patchRoutesOnNavigation()\\` ` +\n        `function threw the following error:\\n${message}`;\n    } else if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: Record<string, DataResult>\n): { key: string; result: RedirectResult } | undefined {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return { key, result };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isPromise<T = unknown>(val: unknown): val is Promise<T> {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\n\nfunction isDataStrategyResult(result: unknown): result is DataStrategyResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectDataStrategyResultResult(result: DataStrategyResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDataWithResponseInit(\n  value: any\n): value is DataWithResponseInit<unknown> {\n  return (\n    typeof value === \"object\" &&\n    value != null &&\n    \"type\" in value &&\n    \"data\" in value &&\n    \"init\" in value &&\n    value.type === \"DataWithResponseInit\"\n  );\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveNavigationDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  signal: AbortSignal,\n  currentMatches: AgnosticDataRouteMatch[],\n  currentLoaderData: RouteData\n) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then((result) => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveFetcherDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  revalidatingFetchers: RevalidatingFetcher[]\n) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, routeId, controller } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(\n        controller,\n        \"Expected an AbortController for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, controller.signal, true).then(\n        (result) => {\n          if (result) {\n            results[key] = result;\n          }\n        }\n      );\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n//#endregion\n"],"names":["Action","PopStateEventType","invariant","value","message","Error","warning","cond","console","warn","e","getHistoryState","location","index","usr","state","key","idx","createLocation","current","to","_extends","pathname","search","hash","parsePath","Math","random","toString","substr","createPath","_ref","charAt","path","parsedPath","hashIndex","indexOf","searchIndex","getUrlBasedHistory","getLocation","createHref","validateLocation","options","window","document","defaultView","v5Compat","globalHistory","history","action","Pop","listener","getIndex","handlePop","nextIndex","delta","createURL","base","origin","href","replace","URL","replaceState","listen","fn","addEventListener","removeEventListener","encodeLocation","url","push","Push","historyState","pushState","error","DOMException","name","assign","Replace","go","n","ResultType","immutableRouteKeys","Set","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","map","route","treePath","String","id","join","children","isIndexRoute","indexRoute","pathOrLayoutRoute","undefined","matchRoutes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","sort","a","b","score","length","slice","every","i","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","caseSensitive","startsWith","joinPaths","concat","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","isSplat","s","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","pattern","matcher","compiledParams","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","pop","resolvePathname","normalizeSearch","normalizeHash","getInvalidPathError","char","field","dest","JSON","stringify","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","DataWithResponseInit","constructor","init","this","type","AbortedDeferredError","DeferredData","responseInit","reject","pendingKeysSet","subscribers","deferredKeys","Array","isArray","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","entries","acc","_ref2","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","cancel","abort","k","async","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","_tracked","isTrackedPromise","_error","_data","defer","redirect","status","headers","Headers","set","Response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","json","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","UNSAFE_DEFERRED_SYMBOL","Symbol","throwStaticHandlerAbortedError","request","isRouteRequest","future","v7_throwAbortReason","reason","method","normalizeTo","prependBasename","fromRouteId","relative","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeNavigateOptions","normalizeFormMethod","isFetcher","opts","body","isSubmissionNavigation","isValidMethod","getInternalRouterError","searchParams","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","isMutationMethod","FormData","URLSearchParams","_ref5","submission","parse","convertFormDataToSearchParams","convertSearchParamsToFormData","append","getLoaderMatchesUntilBoundary","boundaryId","boundaryMatches","findIndex","m","getMatchesToLoad","isInitialLoad","skipActionErrorRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","deletedFetchers","fetchLoadMatches","fetchRedirectIds","routesToUse","pendingActionResult","actionResult","isErrorResult","currentUrl","nextUrl","actionStatus","statusCode","shouldSkipRevalidation","navigationMatches","lazy","loader","hydrate","errors","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","revalidatingFetchers","f","routeId","has","fetcherMatches","fetcher","fetchers","fetcherMatch","getTargetMatch","shouldRevalidate","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteChildren","patchRoutesOnNavigationImpl","pendingRouteChildren","pending","patch","patchRoutesImpl","val","_route$children","dataChildren","defaultDataStrategy","_ref6","matchesToLoad","shouldLoad","all","callDataStrategyImpl","dataStrategyImpl","fetcherKey","requestContext","loadRouteDefinitionsPromises","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","loadLazyRouteModule","dsMatches","loadRoutePromise","handlerOverride","staticContext","onReject","runHandler","handler","actualHandler","ctx","context","handlerPromise","handlerError","callLoaderOrAction","results","convertDataStrategyResultToDataResult","dataStrategyResult","isResponse","contentType","isDataWithResponseInit","_result$init2","_result$init","_result$init3","_result$init4","_result$init5","_result$init6","isDeferredData","deferred","deferredData","normalizeRelativeRoutingRedirectResponse","response","trimmedMatches","normalizeRedirectLocation","normalizedLocation","protocol","isSameBasename","createClientSideRequest","Request","processRouteLoaderData","activeDeferreds","skipLoaderErrorBubbling","foundError","loaderHeaders","pendingError","isRedirectResult","boundaryMatch","findNearestBoundary","isDeferredResult","processLoaderData","fetcherResults","rf","doneFetcher","getDoneFetcher","mergeLoaderData","newLoaderData","mergedLoaderData","hasOwnProperty","getActionDataForCommit","actionData","reverse","find","getShortCircuitMatches","_temp5","errorMessage","findRedirect","isRedirectDataStrategyResultResult","resolveData","resolveNavigationDeferredResults","currentMatches","isRevalidatingLoader","resolveDeferredData","resolveFetcherDeferredResults","unwrap","getAll","getSubmissionFromNavigation","navigation","getLoadingNavigation","getSubmittingNavigation","getLoadingFetcher","querySelector","getAttribute","initialEntries","initialIndex","entry","createMemoryLocation","clampIndex","min","max","getCurrentLocation","nextLocation","splice","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","inFlightDataRoutes","initialized","router","dataRoutes","unstable_dataStrategy","unstable_patchRoutesOnNavigation","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","v7_skipActionErrorRevalidation","unlistenHistory","discoveredRoutes","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","checkFogOfWar","active","isRouteInitialized","fogOfWar","pendingNavigationController","unblockBlockerHistoryUpdate","historyAction","restoreScrollPosition","preventScrollReset","revalidation","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","activeFetchers","blockerFunctions","pendingPatchRoutes","updateState","newState","completedFetchers","deletedFetchersKeys","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","deleteFetcher","completeNavigation","_temp","_location$state","_location$state2","isActionReload","_isRedirect","keys","priorPaths","currentLocation","toPaths","getSavedScrollPosition","startNavigation","startUninterruptedRevalidation","getScrollKey","saveScrollPosition","enableViewTransition","loadingNavigation","overrideNavigation","notFoundMatches","handleNavigational404","isHashChangeOnly","isFogOfWar","interruptActiveLoads","discoverResult","discoverRoutes","shortCircuited","handleDiscoverRouteError","partialMatches","actionMatch","callDataStrategy","startRedirectNavigation","handleAction","updatedMatches","fetcherSubmission","initialHydration","activeSubmission","shouldUpdateNavigationState","getUpdatedActionData","cancelActiveDeferreds","updatedFetchers","markFetchRedirectsDone","updates","revalidatingFetcher","getUpdatedRevalidatingFetchers","abortFetcher","abortPendingFetchRevalidations","loaderResults","callLoadersAndMaybeResolveData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","handleLoaders","isNavigation","_temp2","redirectLocation","isDocumentReload","redirectHistoryAction","dataResults","fetchersToLoad","loaderResultsPromise","fetcherResultsPromise","updateFetcherState","setFetcherError","getFetcher","markFetchersDone","doneKeys","landedId","yeetedKeys","deleteBlocker","updateBlocker","newBlocker","blocker","shouldBlockNavigation","_ref4","blockerKey","blockerFunction","predicate","cancelledRouteIds","dfd","y","isNonHMR","newMatches","addToFifoQueue","newPartialMatches","queue","values","next","initialize","nextHistoryUpdatePromise","_window","transitions","sessionPositions","sessionStorage","getItem","restoreAppliedTransitions","_saveAppliedTransitions","setItem","persistAppliedTransitions","enableScrollRestoration","positions","getPosition","getKey","navigate","normalizedPath","userReplace","unstable_viewTransition","fetch","requestMatches","detectAndHandle405Error","existingFetcher","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","revalidationRequest","loadId","loadFetcher","staleKey","handleFetcherAction","handleFetcherLoader","revalidate","count","dispose","clear","getBlocker","patchRoutes","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","newRoutes","queryImpl","routeMatch","Location","actionHeaders","loaderRequest","loadRouteData","submit","isDataStrategyResult","isRedirectResponse","executedLoaders","fromEntries","query","_temp3","methodNotAllowedMatches","queryRoute","_temp4","_result$activeDeferre","originalPath","prefix","p","array","keyMatch","optional","param","_deepestRenderedBoundaryId","redirectDocument"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"router.umd.min.js","sources":["../history.ts","../utils.ts","../router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => DataFunctionReturnValue\n  ) => Promise<DataStrategyResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n  fetcherKey: string | null;\n}\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface DataStrategyResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData, DataWithResponseInit\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<Record<string, DataStrategyResult>>;\n}\n\nexport interface AgnosticPatchRoutesOnNavigationFunction<\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> {\n  (opts: {\n    path: string;\n    matches: M[];\n    patch: (routeId: string | null, children: AgnosticRouteObject[]) => void;\n  }): void | Promise<void>;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: string[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nexport function matchRoutesImpl<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename: string,\n  allowPartial: boolean\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string,\n  allowPartial = false\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    let route = meta.route;\n\n    if (\n      !match &&\n      end &&\n      allowPartial &&\n      !routesMeta[routesMeta.length - 1].route.index\n    ) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false,\n        },\n        remainingPathname\n      );\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nexport function decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DataWithResponseInit<D> {\n  type: string = \"DataWithResponseInit\";\n  data: D;\n  init: ResponseInit | null;\n\n  constructor(data: D, init?: ResponseInit) {\n    this.data = data;\n    this.init = init || null;\n  }\n}\n\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nexport function data<D>(data: D, init?: number | ResponseInit) {\n  return new DataWithResponseInit(\n    data,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const replace: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  DataStrategyResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n  AgnosticPatchRoutesOnNavigationFunction,\n  DataWithResponseInit,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  matchRoutesImpl,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE DO NOT USE\n   *\n   * Patch additional children routes into an existing parent route\n   * @param routeId The parent route id or a callback function accepting `patch`\n   *                to perform batch patching\n   * @param children The additional children routes\n   */\n  patchRoutes(routeId: string | null, children: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  v7_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  unstable_patchRoutesOnNavigation?: AgnosticPatchRoutesOnNavigationFunction;\n  unstable_dataStrategy?: DataStrategyFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.unstable_patchRoutesOnNavigation;\n\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // FIFO queue of previously discovered routes to prevent re-calling on\n  // subsequent navigations to the same path\n  let discoveredRoutesMaxSize = 1000;\n  let discoveredRoutes = new Set<string>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(\n      initialMatches,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized: boolean;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(\n        null,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some((m) => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some((m) => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (\n        typeof m.route.loader === \"function\" &&\n        m.route.loader.hydrate === true\n      ) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: Set<string> = new Set();\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map<\n    string,\n    ReturnType<AgnosticPatchRoutesOnNavigationFunction>\n  >();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate: (() => void) | undefined = undefined;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (unblockBlockerHistoryUpdate) {\n          unblockBlockerHistoryUpdate();\n          unblockBlockerHistoryUpdate = undefined;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          let nextHistoryUpdatePromise = new Promise<void>((resolve) => {\n            unblockBlockerHistoryUpdate = resolve;\n          });\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked, after the url\n              // restoration is also complete.  See:\n              // https://github.com/remix-run/react-router/issues/11613\n              nextHistoryUpdatePromise.then(() => init.history.go(delta));\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      {\n        overrideNavigation: state.navigation,\n        // Proxy through any rending view transition\n        enableViewTransition: pendingViewTransitionEnabled === true,\n      }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        fogOfWar.active,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (\n          isErrorResult(result) &&\n          isRouteErrorResponse(result.error) &&\n          result.error.status === 404\n        ) {\n          pendingNavigationController = null;\n\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error,\n            },\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors,\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        state,\n        request,\n        [actionMatch],\n        matches,\n        null\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState =\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration);\n\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...(actionData !== undefined ? { actionData } : {}),\n          },\n          {\n            flushSync,\n          }\n        );\n      }\n\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: error,\n          },\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates: Partial<RouterState> = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getUpdatedActionData(\n    pendingActionResult: PendingActionResult | undefined\n  ): Record<string, RouteData> | null | undefined {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data as any,\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(\n    revalidatingFetchers: RevalidatingFetcher[]\n  ) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        undefined,\n        fetcher ? fetcher.data : undefined\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        fogOfWar.active,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      fogOfWar.active,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m: AgnosticDataRouteMatch) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId,\n        });\n        setFetcherError(key, routeId, error, { flushSync });\n        return true;\n      }\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      state,\n      fetchRequest,\n      [match],\n      requestMatches,\n      key\n    );\n    let actionResult = actionResults[match.route.id];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false\n      );\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      state,\n      fetchRequest,\n      [match],\n      matches,\n      key\n    );\n    let result = results[match.route.id];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    isNavigation: boolean,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true || redirect.response.headers.has(\"X-Remix-Replace\")\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    state: RouterState,\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    fetcherKey: string | null\n  ): Promise<Record<string, DataResult>> {\n    let results: Record<string, DataStrategyResult>;\n    let dataResults: Record<string, DataResult> = {};\n    try {\n      results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        state,\n        request,\n        matchesToLoad,\n        matches,\n        fetcherKey,\n        manifest,\n        mapRouteProperties\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach((m) => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e,\n        };\n      });\n      return dataResults;\n    }\n\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result as Response;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            routeId,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          ),\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(\n          result\n        );\n      }\n    }\n\n    return dataResults;\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    state: RouterState,\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let currentMatches = state.matches;\n\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\n      \"loader\",\n      state,\n      request,\n      matchesToLoad,\n      matches,\n      null\n    );\n\n    let fetcherResultsPromise = Promise.all(\n      fetchersToLoad.map(async (f) => {\n        if (f.matches && f.match && f.controller) {\n          let results = await callDataStrategy(\n            \"loader\",\n            state,\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            [f.match],\n            f.matches,\n            f.key\n          );\n          let result = results[f.match.route.id];\n          // Fetcher results are keyed by fetcher key from here on out, not routeId\n          return { [f.key]: result };\n        } else {\n          return Promise.resolve({\n            [f.key]: {\n              type: ResultType.error,\n              error: getInternalRouterError(404, {\n                pathname: f.path,\n              }),\n            } as ErrorResult,\n          });\n        }\n      })\n    );\n\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce(\n      (acc, r) => Object.assign(acc, r),\n      {}\n    );\n\n    await Promise.all([\n      resolveNavigationDeferredResults(\n        matches,\n        loaderResults,\n        request.signal,\n        currentMatches,\n        state.loaderData\n      ),\n      resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname: string) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n\n    return { notFoundMatches: matches, route, error };\n  }\n\n  function handleDiscoverRouteError(\n    pathname: string,\n    discoverResult: DiscoverRoutesErrorResult\n  ) {\n    return {\n      boundaryId: findNearestBoundary(discoverResult.partialMatches).route.id,\n      error: getInternalRouterError(400, {\n        type: \"route-discovery\",\n        pathname,\n        message:\n          discoverResult.error != null && \"message\" in discoverResult.error\n            ? discoverResult.error\n            : String(discoverResult.error),\n      }),\n    };\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function checkFogOfWar(\n    matches: AgnosticDataRouteMatch[] | null,\n    routesToUse: AgnosticDataRouteObject[],\n    pathname: string\n  ): { active: boolean; matches: AgnosticDataRouteMatch[] | null } {\n    if (patchRoutesOnNavigationImpl) {\n      // Don't bother re-calling patchRouteOnMiss for a path we've already\n      // processed.  the last execution would have patched the route tree\n      // accordingly so `matches` here are already accurate.\n      if (discoveredRoutes.has(pathname)) {\n        return { active: false, matches };\n      }\n\n      if (!matches) {\n        let fogMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n\n    return { active: false, matches: null };\n  }\n\n  type DiscoverRoutesSuccessResult = {\n    type: \"success\";\n    matches: AgnosticDataRouteMatch[] | null;\n  };\n  type DiscoverRoutesErrorResult = {\n    type: \"error\";\n    error: any;\n    partialMatches: AgnosticDataRouteMatch[];\n  };\n  type DiscoverRoutesAbortedResult = { type: \"aborted\" };\n  type DiscoverRoutesResult =\n    | DiscoverRoutesSuccessResult\n    | DiscoverRoutesErrorResult\n    | DiscoverRoutesAbortedResult;\n\n  async function discoverRoutes(\n    matches: AgnosticDataRouteMatch[],\n    pathname: string,\n    signal: AbortSignal\n  ): Promise<DiscoverRoutesResult> {\n    let partialMatches: AgnosticDataRouteMatch[] | null = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      try {\n        await loadLazyRouteChildren(\n          patchRoutesOnNavigationImpl!,\n          pathname,\n          partialMatches,\n          routesToUse,\n          manifest,\n          mapRouteProperties,\n          pendingPatchRoutes,\n          signal\n        );\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: newMatches };\n      }\n\n      let newPartialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n\n      // Avoid loops if the second pass results in the same partial matches\n      if (\n        !newPartialMatches ||\n        (partialMatches.length === newPartialMatches.length &&\n          partialMatches.every(\n            (m, i) => m.route.id === newPartialMatches![i].route.id\n          ))\n      ) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: null };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function addToFifoQueue(path: string, queue: Set<string>) {\n    if (queue.size >= discoveredRoutesMaxSize) {\n      let first = queue.values().next().value;\n      queue.delete(first);\n    }\n    queue.add(path);\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  function patchRoutes(\n    routeId: string | null,\n    children: AgnosticRouteObject[]\n  ): void {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties\n    );\n\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          unstable_dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        unstable_dataStrategy\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      unstable_dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      unstable_dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null\n  ): Promise<Record<string, DataResult>> {\n    let results = await callDataStrategyImpl(\n      unstable_dataStrategy || defaultDataStrategy,\n      type,\n      null,\n      request,\n      matchesToLoad,\n      matches,\n      null,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    let dataResults: Record<string, DataResult> = {};\n    await Promise.all(\n      matches.map(async (match) => {\n        if (!(match.route.id in results)) {\n          return;\n        }\n        let result = results[match.route.id];\n        if (isRedirectDataStrategyResultResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            match.route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        dataResults[match.route.id] =\n          await convertDataStrategyResultToDataResult(result);\n      })\n    );\n    return dataResults;\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: Set<string>,\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[0]\n      : undefined;\n  let boundaryMatches = boundaryId\n    ? getLoaderMatchesUntilBoundary(matches, boundaryId)\n    : matches;\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let sawError = false;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n\n    // Track when we've encountered an error opn initial load so we don't try\n    // to run any loaders below that\n    if (isInitialLoad && state.errors && state.errors[route.id] !== undefined) {\n      sawError = true;\n    }\n\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (sawError && state.loaderData[route.id] === undefined) {\n        return false;\n      }\n\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Idempotent utility to execute patchRoutesOnNavigation() to lazily load route\n * definitions and update the routes/routeManifest\n */\nasync function loadLazyRouteChildren(\n  patchRoutesOnNavigationImpl: AgnosticPatchRoutesOnNavigationFunction,\n  path: string,\n  matches: AgnosticDataRouteMatch[],\n  routes: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  pendingRouteChildren: Map<\n    string,\n    ReturnType<typeof patchRoutesOnNavigationImpl>\n  >,\n  signal: AbortSignal\n) {\n  let key = [path, ...matches.map((m) => m.route.id)].join(\"-\");\n  try {\n    let pending = pendingRouteChildren.get(key);\n    if (!pending) {\n      pending = patchRoutesOnNavigationImpl({\n        path,\n        matches,\n        patch: (routeId, children) => {\n          if (!signal.aborted) {\n            patchRoutesImpl(\n              routeId,\n              children,\n              routes,\n              manifest,\n              mapRouteProperties\n            );\n          }\n        },\n      });\n      pendingRouteChildren.set(key, pending);\n    }\n\n    if (pending && isPromise<AgnosticRouteObject[]>(pending)) {\n      await pending;\n    }\n  } finally {\n    pendingRouteChildren.delete(key);\n  }\n}\n\nfunction patchRoutesImpl(\n  routeId: string | null,\n  children: AgnosticRouteObject[],\n  routesToUse: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction\n) {\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [routeId, \"patch\", String(route.children?.length || \"0\")],\n      manifest\n    );\n    if (route.children) {\n      route.children.push(...dataChildren);\n    } else {\n      route.children = dataChildren;\n    }\n  } else {\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [\"patch\", String(routesToUse.length || \"0\")],\n      manifest\n    );\n    routesToUse.push(...dataChildren);\n  }\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy({\n  matches,\n}: DataStrategyFunctionArgs): ReturnType<DataStrategyFunction> {\n  let matchesToLoad = matches.filter((m) => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map((m) => m.resolve()));\n  return results.reduce(\n    (acc, result, i) =>\n      Object.assign(acc, { [matchesToLoad[i].route.id]: result }),\n    {}\n  );\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  state: RouterState | null,\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  fetcherKey: string | null,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<Record<string, DataStrategyResult>> {\n  let loadRouteDefinitionsPromises = matches.map((m) =>\n    m.route.lazy\n      ? loadLazyRouteModule(m.route, mapRouteProperties, manifest)\n      : undefined\n  );\n\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some((m) => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve: DataStrategyMatch[\"resolve\"] = async (handlerOverride) => {\n      if (\n        handlerOverride &&\n        request.method === \"GET\" &&\n        (match.route.lazy || match.route.loader)\n      ) {\n        shouldLoad = true;\n      }\n      return shouldLoad\n        ? callLoaderOrAction(\n            type,\n            request,\n            match,\n            loadRoutePromise,\n            handlerOverride,\n            requestContext\n          )\n        : Promise.resolve({ type: ResultType.data, result: undefined });\n    };\n\n    return {\n      ...match,\n      shouldLoad,\n      resolve,\n    };\n  });\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext,\n  });\n\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n\n  return results;\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  loadRoutePromise: Promise<void> | undefined,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<DataStrategyResult> {\n  let result: DataStrategyResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<DataStrategyResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<DataStrategyResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<DataStrategyResult> = (async () => {\n      try {\n        let val = await (handlerOverride\n          ? handlerOverride((ctx: unknown) => actualHandler(ctx))\n          : actualHandler());\n        return { type: \"data\", result: val };\n      } catch (e) {\n        return { type: \"error\", result: e };\n      }\n    })();\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadRoutePromise,\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertDataStrategyResultToDataResult(\n  dataStrategyResult: DataStrategyResult\n): Promise<DataResult> {\n  let { result, type } = dataStrategyResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: result.init?.status,\n        };\n      }\n\n      // Convert thrown unstable_data() to ErrorResponse instances\n      result = new ErrorResponseImpl(\n        result.init?.status || 500,\n        undefined,\n        result.data\n      );\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers\n        ? new Headers(result.init.headers)\n        : undefined,\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach((match) => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: Record<string, DataResult>,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach((rf) => {\n    let { key, match, controller } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\" | \"route-discovery\";\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (type === \"route-discovery\") {\n      errorMessage =\n        `Unable to match URL \"${pathname}\" - the \\`unstable_patchRoutesOnNavigation()\\` ` +\n        `function threw the following error:\\n${message}`;\n    } else if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: Record<string, DataResult>\n): { key: string; result: RedirectResult } | undefined {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return { key, result };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isPromise<T = unknown>(val: unknown): val is Promise<T> {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\n\nfunction isDataStrategyResult(result: unknown): result is DataStrategyResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectDataStrategyResultResult(result: DataStrategyResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDataWithResponseInit(\n  value: any\n): value is DataWithResponseInit<unknown> {\n  return (\n    typeof value === \"object\" &&\n    value != null &&\n    \"type\" in value &&\n    \"data\" in value &&\n    \"init\" in value &&\n    value.type === \"DataWithResponseInit\"\n  );\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveNavigationDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  signal: AbortSignal,\n  currentMatches: AgnosticDataRouteMatch[],\n  currentLoaderData: RouteData\n) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then((result) => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveFetcherDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  revalidatingFetchers: RevalidatingFetcher[]\n) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, routeId, controller } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(\n        controller,\n        \"Expected an AbortController for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, controller.signal, true).then(\n        (result) => {\n          if (result) {\n            results[key] = result;\n          }\n        }\n      );\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n//#endregion\n"],"names":["Action","PopStateEventType","invariant","value","message","Error","warning","cond","console","warn","e","getHistoryState","location","index","usr","state","key","idx","createLocation","current","to","_extends","pathname","search","hash","parsePath","Math","random","toString","substr","createPath","_ref","charAt","path","parsedPath","hashIndex","indexOf","searchIndex","getUrlBasedHistory","getLocation","createHref","validateLocation","options","window","document","defaultView","v5Compat","globalHistory","history","action","Pop","listener","getIndex","handlePop","nextIndex","delta","createURL","base","origin","href","replace","URL","replaceState","listen","fn","addEventListener","removeEventListener","encodeLocation","url","push","Push","historyState","pushState","error","DOMException","name","assign","Replace","go","n","ResultType","immutableRouteKeys","Set","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","map","route","treePath","String","id","join","children","isIndexRoute","indexRoute","pathOrLayoutRoute","undefined","matchRoutes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","sort","a","b","score","length","slice","every","i","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","caseSensitive","startsWith","joinPaths","concat","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","isSplat","s","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","pattern","matcher","compiledParams","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","pop","resolvePathname","normalizeSearch","normalizeHash","getInvalidPathError","char","field","dest","JSON","stringify","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","DataWithResponseInit","constructor","init","this","type","AbortedDeferredError","DeferredData","responseInit","reject","pendingKeysSet","subscribers","deferredKeys","Array","isArray","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","entries","acc","_ref2","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","cancel","abort","k","async","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","_tracked","isTrackedPromise","_error","_data","defer","redirect","status","headers","Headers","set","Response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","json","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","UNSAFE_DEFERRED_SYMBOL","Symbol","throwStaticHandlerAbortedError","request","isRouteRequest","future","v7_throwAbortReason","reason","method","normalizeTo","prependBasename","fromRouteId","relative","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeNavigateOptions","normalizeFormMethod","isFetcher","opts","body","isSubmissionNavigation","isValidMethod","getInternalRouterError","searchParams","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","isMutationMethod","FormData","URLSearchParams","_ref5","submission","parse","convertFormDataToSearchParams","convertSearchParamsToFormData","append","getLoaderMatchesUntilBoundary","boundaryId","boundaryMatches","findIndex","m","getMatchesToLoad","isInitialLoad","skipActionErrorRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","deletedFetchers","fetchLoadMatches","fetchRedirectIds","routesToUse","pendingActionResult","actionResult","isErrorResult","currentUrl","nextUrl","actionStatus","statusCode","shouldSkipRevalidation","sawError","navigationMatches","errors","lazy","loader","hydrate","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","revalidatingFetchers","f","routeId","has","fetcherMatches","fetcher","fetchers","fetcherMatch","getTargetMatch","shouldRevalidate","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteChildren","patchRoutesOnNavigationImpl","pendingRouteChildren","pending","patch","patchRoutesImpl","val","_route$children","dataChildren","defaultDataStrategy","_ref6","matchesToLoad","shouldLoad","all","callDataStrategyImpl","dataStrategyImpl","fetcherKey","requestContext","loadRouteDefinitionsPromises","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","loadLazyRouteModule","dsMatches","loadRoutePromise","handlerOverride","staticContext","onReject","runHandler","handler","actualHandler","ctx","context","handlerPromise","handlerError","callLoaderOrAction","results","convertDataStrategyResultToDataResult","dataStrategyResult","isResponse","contentType","isDataWithResponseInit","_result$init2","_result$init","_result$init3","_result$init4","_result$init5","_result$init6","isDeferredData","deferred","deferredData","normalizeRelativeRoutingRedirectResponse","response","trimmedMatches","normalizeRedirectLocation","normalizedLocation","protocol","isSameBasename","createClientSideRequest","Request","processRouteLoaderData","activeDeferreds","skipLoaderErrorBubbling","foundError","loaderHeaders","pendingError","isRedirectResult","boundaryMatch","findNearestBoundary","isDeferredResult","processLoaderData","fetcherResults","rf","doneFetcher","getDoneFetcher","mergeLoaderData","newLoaderData","mergedLoaderData","hasOwnProperty","getActionDataForCommit","actionData","reverse","find","getShortCircuitMatches","_temp5","errorMessage","findRedirect","isRedirectDataStrategyResultResult","resolveData","resolveNavigationDeferredResults","currentMatches","isRevalidatingLoader","resolveDeferredData","resolveFetcherDeferredResults","unwrap","getAll","getSubmissionFromNavigation","navigation","getLoadingNavigation","getSubmittingNavigation","getLoadingFetcher","querySelector","getAttribute","initialEntries","initialIndex","entry","createMemoryLocation","clampIndex","min","max","getCurrentLocation","nextLocation","splice","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","inFlightDataRoutes","initialized","router","dataRoutes","unstable_dataStrategy","unstable_patchRoutesOnNavigation","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","v7_skipActionErrorRevalidation","unlistenHistory","discoveredRoutes","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","checkFogOfWar","active","isRouteInitialized","fogOfWar","pendingNavigationController","unblockBlockerHistoryUpdate","historyAction","restoreScrollPosition","preventScrollReset","revalidation","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","activeFetchers","blockerFunctions","pendingPatchRoutes","updateState","newState","completedFetchers","deletedFetchersKeys","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","deleteFetcher","completeNavigation","_temp","_location$state","_location$state2","isActionReload","_isRedirect","keys","priorPaths","currentLocation","toPaths","getSavedScrollPosition","startNavigation","startUninterruptedRevalidation","getScrollKey","saveScrollPosition","enableViewTransition","loadingNavigation","overrideNavigation","notFoundMatches","handleNavigational404","isHashChangeOnly","isFogOfWar","interruptActiveLoads","discoverResult","discoverRoutes","shortCircuited","handleDiscoverRouteError","partialMatches","actionMatch","callDataStrategy","startRedirectNavigation","handleAction","updatedMatches","fetcherSubmission","initialHydration","activeSubmission","shouldUpdateNavigationState","getUpdatedActionData","cancelActiveDeferreds","updatedFetchers","markFetchRedirectsDone","updates","revalidatingFetcher","getUpdatedRevalidatingFetchers","abortFetcher","abortPendingFetchRevalidations","loaderResults","callLoadersAndMaybeResolveData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","handleLoaders","isNavigation","_temp2","redirectLocation","isDocumentReload","redirectHistoryAction","dataResults","fetchersToLoad","loaderResultsPromise","fetcherResultsPromise","updateFetcherState","setFetcherError","getFetcher","markFetchersDone","doneKeys","landedId","yeetedKeys","deleteBlocker","updateBlocker","newBlocker","blocker","shouldBlockNavigation","_ref4","blockerKey","blockerFunction","predicate","cancelledRouteIds","dfd","y","isNonHMR","newMatches","addToFifoQueue","newPartialMatches","queue","values","next","initialize","nextHistoryUpdatePromise","_window","transitions","sessionPositions","sessionStorage","getItem","restoreAppliedTransitions","_saveAppliedTransitions","setItem","persistAppliedTransitions","enableScrollRestoration","positions","getPosition","getKey","navigate","normalizedPath","userReplace","unstable_viewTransition","fetch","requestMatches","detectAndHandle405Error","existingFetcher","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","revalidationRequest","loadId","loadFetcher","staleKey","handleFetcherAction","handleFetcherLoader","revalidate","count","dispose","clear","getBlocker","patchRoutes","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","newRoutes","queryImpl","routeMatch","Location","actionHeaders","loaderRequest","loadRouteData","submit","isDataStrategyResult","isRedirectResponse","executedLoaders","fromEntries","query","_temp3","methodNotAllowedMatches","queryRoute","_temp4","_result$activeDeferre","originalPath","prefix","p","array","keyMatch","optional","param","_deepestRenderedBoundaryId","redirectDocument"],"mappings":";;;;;;;;;;udAOYA,IAAAA,WAAAA,GAAM,OAANA,EAAM,IAAA,MAANA,EAAM,KAAA,OAANA,EAAM,QAAA,UAANA,CAAM,EAAA,IA2LlB,MAAMC,EAAoB,WAySnB,SAASC,EAAUC,EAAYC,GACpC,IAAc,IAAVD,SAAmBA,EACrB,MAAM,IAAIE,MAAMD,EAEpB,CAEO,SAASE,EAAQC,EAAWH,GACjC,IAAKG,EAAM,CAEc,oBAAZC,SAAyBA,QAAQC,KAAKL,GAEjD,IAME,MAAM,IAAIC,MAAMD,EAEL,CAAX,MAAOM,GAAI,CACf,CACF,CASA,SAASC,EAAgBC,EAAoBC,GAC3C,MAAO,CACLC,IAAKF,EAASG,MACdC,IAAKJ,EAASI,IACdC,IAAKJ,EAET,CAKO,SAASK,EACdC,EACAC,EACAL,EACAC,GAcA,YAfU,IAAVD,IAAAA,EAAa,MAGmBM,EAAA,CAC9BC,SAA6B,iBAAZH,EAAuBA,EAAUA,EAAQG,SAC1DC,OAAQ,GACRC,KAAM,IACY,iBAAPJ,EAAkBK,EAAUL,GAAMA,EAAE,CAC/CL,QAKAC,IAAMI,GAAOA,EAAgBJ,KAAQA,GAjChCU,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,IAoC9C,CAKO,SAASC,EAAUC,GAIR,IAJST,SACzBA,EAAW,IAAGC,OACdA,EAAS,GAAEC,KACXA,EAAO,IACOO,EAKd,OAJIR,GAAqB,MAAXA,IACZD,GAAiC,MAArBC,EAAOS,OAAO,GAAaT,EAAS,IAAMA,GACpDC,GAAiB,MAATA,IACVF,GAA+B,MAAnBE,EAAKQ,OAAO,GAAaR,EAAO,IAAMA,GAC7CF,CACT,CAKO,SAASG,EAAUQ,GACxB,IAAIC,EAA4B,CAAA,EAEhC,GAAID,EAAM,CACR,IAAIE,EAAYF,EAAKG,QAAQ,KACzBD,GAAa,IACfD,EAAWV,KAAOS,EAAKJ,OAAOM,GAC9BF,EAAOA,EAAKJ,OAAO,EAAGM,IAGxB,IAAIE,EAAcJ,EAAKG,QAAQ,KAC3BC,GAAe,IACjBH,EAAWX,OAASU,EAAKJ,OAAOQ,GAChCJ,EAAOA,EAAKJ,OAAO,EAAGQ,IAGpBJ,IACFC,EAAWZ,SAAWW,EAE1B,CAEA,OAAOC,CACT,CASA,SAASI,EACPC,EACAC,EACAC,EACAC,QAA0B,IAA1BA,IAAAA,EAA6B,CAAA,GAE7B,IAAIC,OAAEA,EAASC,SAASC,YAAYC,SAAEA,GAAW,GAAUJ,EACvDK,EAAgBJ,EAAOK,QACvBC,EAASjD,EAAOkD,IAChBC,EAA4B,KAE5BtC,EAAQuC,IASZ,SAASA,IAEP,OADYL,EAAchC,OAAS,CAAEE,IAAK,OAC7BA,GACf,CAEA,SAASoC,IACPJ,EAASjD,EAAOkD,IAChB,IAAII,EAAYF,IACZG,EAAqB,MAAbD,EAAoB,KAAOA,EAAYzC,EACnDA,EAAQyC,EACJH,GACFA,EAAS,CAAEF,SAAQrC,SAAUoC,EAAQpC,SAAU2C,SAEnD,CA+CA,SAASC,EAAUpC,GAIjB,IAAIqC,EACyB,SAA3Bd,EAAO/B,SAAS8C,OACZf,EAAO/B,SAAS8C,OAChBf,EAAO/B,SAAS+C,KAElBA,EAAqB,iBAAPvC,EAAkBA,EAAKU,EAAWV,GASpD,OALAuC,EAAOA,EAAKC,QAAQ,KAAM,OAC1B1D,EACEuD,EACsEE,sEAAAA,GAEjE,IAAIE,IAAIF,EAAMF,EACvB,CApFa,MAAT5C,IACFA,EAAQ,EACRkC,EAAce,aAAYzC,EAAM0B,CAAAA,EAAAA,EAAchC,MAAK,CAAEE,IAAKJ,IAAS,KAoFrE,IAAImC,EAAmB,CACjBC,aACF,OAAOA,CACR,EACGrC,eACF,OAAO2B,EAAYI,EAAQI,EAC5B,EACDgB,OAAOC,GACL,GAAIb,EACF,MAAM,IAAI9C,MAAM,8CAKlB,OAHAsC,EAAOsB,iBAAiBhE,EAAmBoD,GAC3CF,EAAWa,EAEJ,KACLrB,EAAOuB,oBAAoBjE,EAAmBoD,GAC9CF,EAAW,IAAI,CAElB,EACDX,WAAWpB,GACFoB,EAAWG,EAAQvB,GAE5BoC,YACAW,eAAe/C,GAEb,IAAIgD,EAAMZ,EAAUpC,GACpB,MAAO,CACLE,SAAU8C,EAAI9C,SACdC,OAAQ6C,EAAI7C,OACZC,KAAM4C,EAAI5C,KAEb,EACD6C,KAlGF,SAAcjD,EAAQL,GACpBkC,EAASjD,EAAOsE,KAChB,IAAI1D,EAAWM,EAAe8B,EAAQpC,SAAUQ,EAAIL,GAChD0B,GAAkBA,EAAiB7B,EAAUQ,GAEjDP,EAAQuC,IAAa,EACrB,IAAImB,EAAe5D,EAAgBC,EAAUC,GACzCuD,EAAMpB,EAAQR,WAAW5B,GAG7B,IACEmC,EAAcyB,UAAUD,EAAc,GAAIH,EAY5C,CAXE,MAAOK,GAKP,GAAIA,aAAiBC,cAA+B,mBAAfD,EAAME,KACzC,MAAMF,EAIR9B,EAAO/B,SAASgE,OAAOR,EACzB,CAEItB,GAAYK,GACdA,EAAS,CAAEF,SAAQrC,SAAUoC,EAAQpC,SAAU2C,MAAO,GAE1D,EAuEEK,QArEF,SAAiBxC,EAAQL,GACvBkC,EAASjD,EAAO6E,QAChB,IAAIjE,EAAWM,EAAe8B,EAAQpC,SAAUQ,EAAIL,GAChD0B,GAAkBA,EAAiB7B,EAAUQ,GAEjDP,EAAQuC,IACR,IAAImB,EAAe5D,EAAgBC,EAAUC,GACzCuD,EAAMpB,EAAQR,WAAW5B,GAC7BmC,EAAce,aAAaS,EAAc,GAAIH,GAEzCtB,GAAYK,GACdA,EAAS,CAAEF,SAAQrC,SAAUoC,EAAQpC,SAAU2C,MAAO,GAE1D,EAyDEuB,GAAGC,GACMhC,EAAc+B,GAAGC,IAI5B,OAAO/B,CACT,CC7tBYgC,IAAAA,WAAAA,GAAU,OAAVA,EAAU,KAAA,OAAVA,EAAU,SAAA,WAAVA,EAAU,SAAA,WAAVA,EAAU,MAAA,QAAVA,CAAU,EAAA,CAAA,GAwRf,MAAMC,EAAqB,IAAIC,IAAuB,CAC3D,OACA,gBACA,OACA,KACA,QACA,aA6JK,SAASC,EACdC,EACAC,EACAC,EACAC,GAEA,YAHoB,IAApBD,IAAAA,EAAuB,SACA,IAAvBC,IAAAA,EAA0B,CAAA,GAEnBH,EAAOI,KAAI,CAACC,EAAO5E,KACxB,IAAI6E,EAAW,IAAIJ,EAAYK,OAAO9E,IAClC+E,EAAyB,iBAAbH,EAAMG,GAAkBH,EAAMG,GAAKF,EAASG,KAAK,KAWjE,GAVA3F,GACkB,IAAhBuF,EAAM5E,QAAmB4E,EAAMK,SAAQ,6CAGzC5F,GACGqF,EAASK,GACV,qCAAqCA,EAArC,qEAvBN,SACEH,GAEA,OAAuB,IAAhBA,EAAM5E,KACf,CAuBQkF,CAAaN,GAAQ,CACvB,IAAIO,EAAwC3E,EAAA,CAAA,EACvCoE,EACAJ,EAAmBI,GAAM,CAC5BG,OAGF,OADAL,EAASK,GAAMI,EACRA,CACT,CAAO,CACL,IAAIC,EAAkD5E,EAAA,CAAA,EACjDoE,EACAJ,EAAmBI,GAAM,CAC5BG,KACAE,cAAUI,IAaZ,OAXAX,EAASK,GAAMK,EAEXR,EAAMK,WACRG,EAAkBH,SAAWX,EAC3BM,EAAMK,SACNT,EACAK,EACAH,IAIGU,CACT,IAEJ,CAOO,SAASE,EAGdf,EACAgB,EACAC,GAEA,YAFQ,IAARA,IAAAA,EAAW,KAEJC,EAAgBlB,EAAQgB,EAAaC,GAAU,EACxD,CAEO,SAASC,EAGdlB,EACAgB,EACAC,EACAE,GAEA,IAGIjF,EAAWkF,GAFU,iBAAhBJ,EAA2B3E,EAAU2E,GAAeA,GAEvB9E,UAAY,IAAK+E,GAEvD,GAAgB,MAAZ/E,EACF,OAAO,KAGT,IAAImF,EAAWC,EAActB,IAmM/B,SAA2BqB,GACzBA,EAASE,MAAK,CAACC,EAAGC,IAChBD,EAAEE,QAAUD,EAAEC,MACVD,EAAEC,MAAQF,EAAEE,MAyCpB,SAAwBF,EAAaC,GAInC,OAFED,EAAEG,SAAWF,EAAEE,QAAUH,EAAEI,MAAM,GAAI,GAAGC,OAAM,CAAClC,EAAGmC,IAAMnC,IAAM8B,EAAEK,KAO9DN,EAAEA,EAAEG,OAAS,GAAKF,EAAEA,EAAEE,OAAS,GAG/B,CACN,CArDQI,CACEP,EAAEQ,WAAW5B,KAAK6B,GAASA,EAAKC,gBAChCT,EAAEO,WAAW5B,KAAK6B,GAASA,EAAKC,kBAG1C,CA3MEC,CAAkBd,GAElB,IAAIe,EAAU,KACd,IAAK,IAAIN,EAAI,EAAc,MAAXM,GAAmBN,EAAIT,EAASM,SAAUG,EAAG,CAO3D,IAAIO,EAAUC,EAAWpG,GACzBkG,EAAUG,EACRlB,EAASS,GACTO,EACAlB,EAEJ,CAEA,OAAOiB,CACT,CAUO,SAASI,EACdC,EACAC,GAEA,IAAIrC,MAAEA,EAAKnE,SAAEA,EAAQyG,OAAEA,GAAWF,EAClC,MAAO,CACLjC,GAAIH,EAAMG,GACVtE,WACAyG,SACAC,KAAMF,EAAWrC,EAAMG,IACvBqC,OAAQxC,EAAMwC,OAElB,CAmBA,SAASvB,EAGPtB,EACAqB,EACAyB,EACA5C,QAFwC,IAAxCmB,IAAAA,EAA2C,SACF,IAAzCyB,IAAAA,EAA4C,SAClC,IAAV5C,IAAAA,EAAa,IAEb,IAAI6C,EAAeA,CACjB1C,EACA5E,EACAuH,KAEA,IAAIf,EAAmC,CACrCe,kBACmBlC,IAAjBkC,EAA6B3C,EAAMxD,MAAQ,GAAKmG,EAClDC,eAAuC,IAAxB5C,EAAM4C,cACrBf,cAAezG,EACf4E,SAGE4B,EAAKe,aAAaE,WAAW,OAC/BpI,EACEmH,EAAKe,aAAaE,WAAWhD,GAC7B,wBAAwB+B,EAAKe,aAA7B,wBACM9C,EADN,4GAKF+B,EAAKe,aAAef,EAAKe,aAAapB,MAAM1B,EAAWyB,SAGzD,IAAI9E,EAAOsG,EAAU,CAACjD,EAAY+B,EAAKe,eACnChB,EAAac,EAAYM,OAAOnB,GAKhC5B,EAAMK,UAAYL,EAAMK,SAASiB,OAAS,IAC5C7G,GAGkB,IAAhBuF,EAAM5E,MACN,4FACuCoB,QAEzCyE,EAAcjB,EAAMK,SAAUW,EAAUW,EAAYnF,KAKpC,MAAdwD,EAAMxD,MAAiBwD,EAAM5E,QAIjC4F,EAASpC,KAAK,CACZpC,OACA6E,MAAO2B,EAAaxG,EAAMwD,EAAM5E,OAChCuG,cACA,EAaJ,OAXAhC,EAAOsD,SAAQ,CAACjD,EAAO5E,KAAU,IAAA8H,EAE/B,GAAmB,KAAflD,EAAMxD,aAAe0G,EAAClD,EAAMxD,OAAN0G,EAAYC,SAAS,KAG7C,IAAK,IAAIC,KAAYC,EAAwBrD,EAAMxD,MACjDkG,EAAa1C,EAAO5E,EAAOgI,QAH7BV,EAAa1C,EAAO5E,EAKtB,IAGK4F,CACT,CAgBA,SAASqC,EAAwB7G,GAC/B,IAAI8G,EAAW9G,EAAK+G,MAAM,KAC1B,GAAwB,IAApBD,EAAShC,OAAc,MAAO,GAElC,IAAKkC,KAAUC,GAAQH,EAGnBI,EAAaF,EAAMG,SAAS,KAE5BC,EAAWJ,EAAMrF,QAAQ,MAAO,IAEpC,GAAoB,IAAhBsF,EAAKnC,OAGP,OAAOoC,EAAa,CAACE,EAAU,IAAM,CAACA,GAGxC,IAAIC,EAAeR,EAAwBI,EAAKrD,KAAK,MAEjD0D,EAAmB,GAqBvB,OAZAA,EAAOlF,QACFiF,EAAa9D,KAAKgE,GACP,KAAZA,EAAiBH,EAAW,CAACA,EAAUG,GAAS3D,KAAK,QAKrDsD,GACFI,EAAOlF,QAAQiF,GAIVC,EAAO/D,KAAKqD,GACjB5G,EAAKqG,WAAW,MAAqB,KAAbO,EAAkB,IAAMA,GAEpD,CAaA,MAAMY,EAAU,YAMVC,EAAWC,GAAoB,MAANA,EAE/B,SAASlB,EAAaxG,EAAcpB,GAClC,IAAIkI,EAAW9G,EAAK+G,MAAM,KACtBY,EAAeb,EAAShC,OAS5B,OARIgC,EAASc,KAAKH,KAChBE,IAPiB,GAUf/I,IACF+I,GAdoB,GAiBfb,EACJe,QAAQH,IAAOD,EAAQC,KACvBI,QACC,CAACjD,EAAOkD,IACNlD,GACC2C,EAAQQ,KAAKD,GAvBM,EAyBJ,KAAZA,EAvBc,EACC,KAyBrBJ,EAEN,CAiBA,SAASjC,EAIPuC,EACA5I,EACAiF,QAAY,IAAZA,IAAAA,GAAe,GAEf,IAAIa,WAAEA,GAAe8C,EAEjBC,EAAgB,CAAA,EAChBC,EAAkB,IAClB5C,EAA2D,GAC/D,IAAK,IAAIN,EAAI,EAAGA,EAAIE,EAAWL,SAAUG,EAAG,CAC1C,IAAIG,EAAOD,EAAWF,GAClBmD,EAAMnD,IAAME,EAAWL,OAAS,EAChCuD,EACkB,MAApBF,EACI9I,EACAA,EAAS0F,MAAMoD,EAAgBrD,SAAW,IAC5Cc,EAAQ0C,EACV,CAAEtI,KAAMoF,EAAKe,aAAcC,cAAehB,EAAKgB,cAAegC,OAC9DC,GAGE7E,EAAQ4B,EAAK5B,MAkBjB,IAfGoC,GACDwC,GACA9D,IACCa,EAAWA,EAAWL,OAAS,GAAGtB,MAAM5E,QAEzCgH,EAAQ0C,EACN,CACEtI,KAAMoF,EAAKe,aACXC,cAAehB,EAAKgB,cACpBgC,KAAK,GAEPC,KAICzC,EACH,OAAO,KAGT2C,OAAO5F,OAAOuF,EAAetC,EAAME,QAEnCP,EAAQnD,KAAK,CAEX0D,OAAQoC,EACR7I,SAAUiH,EAAU,CAAC6B,EAAiBvC,EAAMvG,WAC5CmJ,aAAcC,EACZnC,EAAU,CAAC6B,EAAiBvC,EAAM4C,gBAEpChF,UAGyB,MAAvBoC,EAAM4C,eACRL,EAAkB7B,EAAU,CAAC6B,EAAiBvC,EAAM4C,eAExD,CAEA,OAAOjD,CACT,CAiHO,SAAS+C,EAIdI,EACArJ,GAEuB,iBAAZqJ,IACTA,EAAU,CAAE1I,KAAM0I,EAAStC,eAAe,EAAOgC,KAAK,IAGxD,IAAKO,EAASC,GA4ChB,SACE5I,EACAoG,EACAgC,QADa,IAAbhC,IAAAA,GAAgB,QACb,IAAHgC,IAAAA,GAAM,GAEN/J,EACW,MAAT2B,IAAiBA,EAAKmH,SAAS,MAAQnH,EAAKmH,SAAS,MACrD,eAAenH,EAAf,oCACMA,EAAK2B,QAAQ,MAAO,MAD1B,qIAGsC3B,EAAK2B,QAAQ,MAAO,YAG5D,IAAImE,EAA8B,GAC9B+C,EACF,IACA7I,EACG2B,QAAQ,UAAW,IACnBA,QAAQ,OAAQ,KAChBA,QAAQ,qBAAsB,QAC9BA,QACC,qBACA,CAACmH,EAAWC,EAAmB7B,KAC7BpB,EAAO1D,KAAK,CAAE2G,YAAW7B,WAA0B,MAAdA,IAC9BA,EAAa,eAAiB,gBAIzClH,EAAKmH,SAAS,MAChBrB,EAAO1D,KAAK,CAAE2G,UAAW,MACzBF,GACW,MAAT7I,GAAyB,OAATA,EACZ,QACA,qBACGoI,EAETS,GAAgB,QACE,KAAT7I,GAAwB,MAATA,IAQxB6I,GAAgB,iBAOlB,MAAO,CAFO,IAAIG,OAAOH,EAAczC,OAAgBnC,EAAY,KAElD6B,EACnB,CAjGkCmD,CAC9BP,EAAQ1I,KACR0I,EAAQtC,cACRsC,EAAQN,KAGNxC,EAAQvG,EAASuG,MAAM+C,GAC3B,IAAK/C,EAAO,OAAO,KAEnB,IAAIuC,EAAkBvC,EAAM,GACxB4C,EAAeL,EAAgBxG,QAAQ,UAAW,MAClDuH,EAAgBtD,EAAMb,MAAM,GAuBhC,MAAO,CACLe,OAvBmB8C,EAAed,QAClC,CAACqB,EAAIrJ,EAA6BlB,KAAU,IAArCmK,UAAEA,EAAS7B,WAAEA,GAAYpH,EAG9B,GAAkB,MAAdiJ,EAAmB,CACrB,IAAIK,EAAaF,EAActK,IAAU,GACzC4J,EAAeL,EACZpD,MAAM,EAAGoD,EAAgBrD,OAASsE,EAAWtE,QAC7CnD,QAAQ,UAAW,KACxB,CAEA,MAAMzD,EAAQgL,EAActK,GAM5B,OAJEuK,EAAKJ,GADH7B,IAAehJ,OACC+F,GAEC/F,GAAS,IAAIyD,QAAQ,OAAQ,KAE3CwH,CAAI,GAEb,CACF,GAIE9J,SAAU8I,EACVK,eACAE,UAEJ,CA2DO,SAASjD,EAAWvH,GACzB,IACE,OAAOA,EACJ6I,MAAM,KACNxD,KAAK8F,GAAMC,mBAAmBD,GAAG1H,QAAQ,MAAO,SAChDiC,KAAK,IAUV,CATE,MAAOpB,GAQP,OAPAnE,GACE,EACA,iBAAiBH,EAAjB,oHAEesE,EAAK,MAGftE,CACT,CACF,CAKO,SAASqG,EACdlF,EACA+E,GAEA,GAAiB,MAAbA,EAAkB,OAAO/E,EAE7B,IAAKA,EAASkK,cAAclD,WAAWjC,EAASmF,eAC9C,OAAO,KAKT,IAAIC,EAAapF,EAAS+C,SAAS,KAC/B/C,EAASU,OAAS,EAClBV,EAASU,OACT2E,EAAWpK,EAASU,OAAOyJ,GAC/B,OAAIC,GAAyB,MAAbA,EAEP,KAGFpK,EAAS0F,MAAMyE,IAAe,GACvC,CAOO,SAASE,EAAYvK,EAAQwK,QAAY,IAAZA,IAAAA,EAAe,KACjD,IACEtK,SAAUuK,EAAUtK,OACpBA,EAAS,GAAEC,KACXA,EAAO,IACS,iBAAPJ,EAAkBK,EAAUL,GAAMA,EAEzCE,EAAWuK,EACXA,EAAWvD,WAAW,KACpBuD,EAWR,SAAyBzD,EAAsBwD,GAC7C,IAAI7C,EAAW6C,EAAahI,QAAQ,OAAQ,IAAIoF,MAAM,KAYtD,OAXuBZ,EAAaY,MAAM,KAEzBN,SAASsB,IACR,OAAZA,EAEEjB,EAAShC,OAAS,GAAGgC,EAAS+C,MACb,MAAZ9B,GACTjB,EAAS1E,KAAK2F,EAChB,IAGKjB,EAAShC,OAAS,EAAIgC,EAASlD,KAAK,KAAO,GACpD,CAxBQkG,CAAgBF,EAAYD,GAC9BA,EAEJ,MAAO,CACLtK,WACAC,OAAQyK,EAAgBzK,GACxBC,KAAMyK,EAAczK,GAExB,CAkBA,SAAS0K,EACPC,EACAC,EACAC,EACApK,GAEA,MACE,qBAAqBkK,EAArB,2CACQC,cAAkBE,KAAKC,UAC7BtK,GAFF,yCAIQoK,EAJR,2HAOJ,CAyBO,SAASG,EAEdhF,GACA,OAAOA,EAAQsC,QACb,CAACjC,EAAOhH,IACI,IAAVA,GAAgBgH,EAAMpC,MAAMxD,MAAQ4F,EAAMpC,MAAMxD,KAAK8E,OAAS,GAEpE,CAIO,SAAS0F,EAEdjF,EAAckF,GACd,IAAIC,EAAcH,EAA2BhF,GAK7C,OAAIkF,EACKC,EAAYnH,KAAI,CAACqC,EAAO5G,IAC7BA,IAAQ0L,EAAY5F,OAAS,EAAIc,EAAMvG,SAAWuG,EAAM4C,eAIrDkC,EAAYnH,KAAKqC,GAAUA,EAAM4C,cAC1C,CAKO,SAASmC,EACdC,EACAC,EACAC,EACAC,GAEA,IAAI5L,OAFU,IAAd4L,IAAAA,GAAiB,GAGI,iBAAVH,EACTzL,EAAKK,EAAUoL,IAEfzL,EAAEC,EAAQwL,GAAAA,GAEV3M,GACGkB,EAAGE,WAAaF,EAAGE,SAASsH,SAAS,KACtCsD,EAAoB,IAAK,WAAY,SAAU9K,IAEjDlB,GACGkB,EAAGE,WAAaF,EAAGE,SAASsH,SAAS,KACtCsD,EAAoB,IAAK,WAAY,OAAQ9K,IAE/ClB,GACGkB,EAAGG,SAAWH,EAAGG,OAAOqH,SAAS,KAClCsD,EAAoB,IAAK,SAAU,OAAQ9K,KAI/C,IAGI6L,EAHAC,EAAwB,KAAVL,GAAgC,KAAhBzL,EAAGE,SACjCuK,EAAaqB,EAAc,IAAM9L,EAAGE,SAaxC,GAAkB,MAAduK,EACFoB,EAAOF,MACF,CACL,IAAII,EAAqBL,EAAe/F,OAAS,EAMjD,IAAKiG,GAAkBnB,EAAWvD,WAAW,MAAO,CAClD,IAAI8E,EAAavB,EAAW7C,MAAM,KAElC,KAAyB,OAAlBoE,EAAW,IAChBA,EAAWC,QACXF,GAAsB,EAGxB/L,EAAGE,SAAW8L,EAAWvH,KAAK,IAChC,CAEAoH,EAAOE,GAAsB,EAAIL,EAAeK,GAAsB,GACxE,CAEA,IAAIlL,EAAO0J,EAAYvK,EAAI6L,GAGvBK,EACFzB,GAA6B,MAAfA,GAAsBA,EAAWzC,SAAS,KAEtDmE,GACDL,GAA8B,MAAfrB,IAAuBkB,EAAiB3D,SAAS,KAQnE,OANGnH,EAAKX,SAAS8H,SAAS,OACvBkE,IAA4BC,IAE7BtL,EAAKX,UAAY,KAGZW,CACT,OAiBasG,EAAaiF,GACxBA,EAAM3H,KAAK,KAAKjC,QAAQ,SAAU,KAKvB8G,EAAqBpJ,GAChCA,EAASsC,QAAQ,OAAQ,IAAIA,QAAQ,OAAQ,KAKlCoI,EAAmBzK,GAC7BA,GAAqB,MAAXA,EAEPA,EAAO+G,WAAW,KAClB/G,EACA,IAAMA,EAHN,GAQO0K,EAAiBzK,GAC3BA,GAAiB,MAATA,EAAoBA,EAAK8G,WAAW,KAAO9G,EAAO,IAAMA,EAAzC,GAyBnB,MAAMiM,EAKXC,YAAY1F,EAAS2F,GAAqBC,KAJ1CC,KAAe,uBAKbD,KAAK5F,KAAOA,EACZ4F,KAAKD,KAAOA,GAAQ,IACtB,EAoBK,MAAMG,UAA6BzN,OAEnC,MAAM0N,EAWXL,YAAY1F,EAA+BgG,GAQzC,IAAIC,EARkEL,KAVhEM,eAA8B,IAAIhJ,IAAa0I,KAI/CO,YACN,IAAIjJ,IAAK0I,KAGXQ,aAAyB,GAGvBlO,EACE8H,GAAwB,iBAATA,IAAsBqG,MAAMC,QAAQtG,GACnD,sCAMF4F,KAAKW,aAAe,IAAIC,SAAQ,CAACzD,EAAG0D,IAAOR,EAASQ,IACpDb,KAAKc,WAAa,IAAIC,gBACtB,IAAIC,EAAUA,IACZX,EAAO,IAAIH,EAAqB,0BAClCF,KAAKiB,oBAAsB,IACzBjB,KAAKc,WAAWI,OAAO5K,oBAAoB,QAAS0K,GACtDhB,KAAKc,WAAWI,OAAO7K,iBAAiB,QAAS2K,GAEjDhB,KAAK5F,KAAOwC,OAAOuE,QAAQ/G,GAAM+B,QAC/B,CAACiF,EAAGC,KAAA,IAAGjO,EAAKb,GAAM8O,EAAA,OAChBzE,OAAO5F,OAAOoK,EAAK,CACjBhO,CAACA,GAAM4M,KAAKsB,aAAalO,EAAKb,IAC9B,GACJ,CACF,GAEIyN,KAAKuB,MAEPvB,KAAKiB,sBAGPjB,KAAKD,KAAOK,CACd,CAEQkB,aACNlO,EACAb,GAEA,KAAMA,aAAiBqO,SACrB,OAAOrO,EAGTyN,KAAKQ,aAAa/J,KAAKrD,GACvB4M,KAAKM,eAAekB,IAAIpO,GAIxB,IAAIqO,EAA0Bb,QAAQc,KAAK,CAACnP,EAAOyN,KAAKW,eAAegB,MACpEvH,GAAS4F,KAAK4B,SAASH,EAASrO,OAAKkF,EAAW8B,KAChDvD,GAAUmJ,KAAK4B,SAASH,EAASrO,EAAKyD,KAQzC,OAHA4K,EAAQI,OAAM,SAEdjF,OAAOkF,eAAeL,EAAS,WAAY,CAAEM,IAAKA,KAAM,IACjDN,CACT,CAEQG,SACNH,EACArO,EACAyD,EACAuD,GAEA,GACE4F,KAAKc,WAAWI,OAAOc,SACvBnL,aAAiBqJ,EAIjB,OAFAF,KAAKiB,sBACLrE,OAAOkF,eAAeL,EAAS,SAAU,CAAEM,IAAKA,IAAMlL,IAC/C+J,QAAQP,OAAOxJ,GAYxB,GATAmJ,KAAKM,eAAe2B,OAAO7O,GAEvB4M,KAAKuB,MAEPvB,KAAKiB,2BAKO3I,IAAVzB,QAAgCyB,IAAT8B,EAAoB,CAC7C,IAAI8H,EAAiB,IAAIzP,MACvB,0BAA0BW,EAA1B,yFAKF,OAFAwJ,OAAOkF,eAAeL,EAAS,SAAU,CAAEM,IAAKA,IAAMG,IACtDlC,KAAKmC,MAAK,EAAO/O,GACVwN,QAAQP,OAAO6B,EACxB,CAEA,YAAa5J,IAAT8B,GACFwC,OAAOkF,eAAeL,EAAS,SAAU,CAAEM,IAAKA,IAAMlL,IACtDmJ,KAAKmC,MAAK,EAAO/O,GACVwN,QAAQP,OAAOxJ,KAGxB+F,OAAOkF,eAAeL,EAAS,QAAS,CAAEM,IAAKA,IAAM3H,IACrD4F,KAAKmC,MAAK,EAAO/O,GACVgH,EACT,CAEQ+H,KAAKH,EAAkBI,GAC7BpC,KAAKO,YAAYzF,SAASuH,GAAeA,EAAWL,EAASI,IAC/D,CAEAE,UAAUlM,GAER,OADA4J,KAAKO,YAAYiB,IAAIpL,GACd,IAAM4J,KAAKO,YAAY0B,OAAO7L,EACvC,CAEAmM,SACEvC,KAAKc,WAAW0B,QAChBxC,KAAKM,eAAexF,SAAQ,CAAC4C,EAAG+E,IAAMzC,KAAKM,eAAe2B,OAAOQ,KACjEzC,KAAKmC,MAAK,EACZ,CAEAO,kBAAkBxB,GAChB,IAAIc,GAAU,EACd,IAAKhC,KAAKuB,KAAM,CACd,IAAIP,EAAUA,IAAMhB,KAAKuC,SACzBrB,EAAO7K,iBAAiB,QAAS2K,GACjCgB,QAAgB,IAAIpB,SAAS+B,IAC3B3C,KAAKsC,WAAWN,IACdd,EAAO5K,oBAAoB,QAAS0K,IAChCgB,GAAWhC,KAAKuB,OAClBoB,EAAQX,EACV,GACA,GAEN,CACA,OAAOA,CACT,CAEIT,WACF,OAAoC,IAA7BvB,KAAKM,eAAesC,IAC7B,CAEIC,oBAMF,OALAvQ,EACgB,OAAd0N,KAAK5F,MAAiB4F,KAAKuB,KAC3B,6DAGK3E,OAAOuE,QAAQnB,KAAK5F,MAAM+B,QAC/B,CAACiF,EAAG0B,KAAA,IAAG1P,EAAKb,GAAMuQ,EAAA,OAChBlG,OAAO5F,OAAOoK,EAAK,CACjBhO,CAACA,GAAM2P,EAAqBxQ,IAC5B,GACJ,CACF,EACF,CAEIyQ,kBACF,OAAOvC,MAAMpB,KAAKW,KAAKM,eACzB,EASF,SAASyC,EAAqBxQ,GAC5B,IAPF,SAA0BA,GACxB,OACEA,aAAiBqO,UAAkD,IAAtCrO,EAAyB0Q,QAE1D,CAGOC,CAAiB3Q,GACpB,OAAOA,EAGT,GAAIA,EAAM4Q,OACR,MAAM5Q,EAAM4Q,OAEd,OAAO5Q,EAAM6Q,KACf,CAOaC,MAeAC,EAA6B,SAAC9M,EAAKuJ,QAAI,IAAJA,IAAAA,EAAO,KACrD,IAAIK,EAAeL,EACS,iBAAjBK,EACTA,EAAe,CAAEmD,OAAQnD,QACe,IAAxBA,EAAamD,SAC7BnD,EAAamD,OAAS,KAGxB,IAAIC,EAAU,IAAIC,QAAQrD,EAAaoD,SAGvC,OAFAA,EAAQE,IAAI,WAAYlN,GAEjB,IAAImN,SAAS,KAAIlQ,KACnB2M,EAAY,CACfoD,YAEJ,EAuCO,MAAMI,EAOX9D,YACEyD,EACAM,EACAzJ,EACA0J,QAAQ,IAARA,IAAAA,GAAW,GAEX9D,KAAKuD,OAASA,EACdvD,KAAK6D,WAAaA,GAAc,GAChC7D,KAAK8D,SAAWA,EACZ1J,aAAgB3H,OAClBuN,KAAK5F,KAAOA,EAAKpG,WACjBgM,KAAKnJ,MAAQuD,GAEb4F,KAAK5F,KAAOA,CAEhB,EAOK,SAAS2J,EAAqBlN,GACnC,OACW,MAATA,GACwB,iBAAjBA,EAAM0M,QACe,iBAArB1M,EAAMgN,YACa,kBAAnBhN,EAAMiN,UACb,SAAUjN,CAEd,CCr/BA,MAAMmN,EAAgD,CACpD,OACA,MACA,QACA,UAEIC,EAAuB,IAAI3M,IAC/B0M,GAGIE,EAAuC,CAC3C,SACGF,GAECG,EAAsB,IAAI7M,IAAgB4M,GAE1CE,EAAsB,IAAI9M,IAAI,CAAC,IAAK,IAAK,IAAK,IAAK,MACnD+M,EAAoC,IAAI/M,IAAI,CAAC,IAAK,MAE3CgN,EAA4C,CACvDnR,MAAO,OACPH,cAAUsF,EACViM,gBAAYjM,EACZkM,gBAAYlM,EACZmM,iBAAanM,EACboM,cAAUpM,EACVqM,UAAMrM,EACNsM,UAAMtM,GAGKuM,EAAsC,CACjD1R,MAAO,OACPiH,UAAM9B,EACNiM,gBAAYjM,EACZkM,gBAAYlM,EACZmM,iBAAanM,EACboM,cAAUpM,EACVqM,UAAMrM,EACNsM,UAAMtM,GAGKwM,EAAiC,CAC5C3R,MAAO,YACP4R,aAASzM,EACT0M,WAAO1M,EACPtF,cAAUsF,GAGN2M,EAAqB,gCAErBC,EAAyDrN,IAAW,CACxEsN,iBAAkBC,QAAQvN,EAAMsN,oBAG5BE,EAA0B,iCAipFnBC,GAAyBC,OAAO,YAspB7C,SAASC,GACPC,EACAC,EACAC,GAEA,GAAIA,EAAOC,0BAAiDtN,IAA1BmN,EAAQvE,OAAO2E,OAC/C,MAAMJ,EAAQvE,OAAO2E,OAIvB,MAAM,IAAIpT,OADGiT,EAAiB,aAAe,SACAD,oBAAAA,EAAQK,OAAUL,IAAAA,EAAQjP,IACzE,CAYA,SAASuP,GACP/S,EACA4G,EACAnB,EACAuN,EACAxS,EACAsL,EACAmH,EACAC,GAEA,IAAIC,EACAC,EACJ,GAAIH,EAAa,CAGfE,EAAoB,GACpB,IAAK,IAAIlM,KAASL,EAEhB,GADAuM,EAAkB1P,KAAKwD,GACnBA,EAAMpC,MAAMG,KAAOiO,EAAa,CAClCG,EAAmBnM,EACnB,KACF,CAEJ,MACEkM,EAAoBvM,EACpBwM,EAAmBxM,EAAQA,EAAQT,OAAS,GAI9C,IAAI9E,EAAO2K,EACTxL,GAAU,IACVqL,EAAoBsH,EAAmBrH,GACvClG,EAAc5F,EAASU,SAAU+E,IAAazF,EAASU,SAC1C,SAAbwS,GAgCF,OA1BU,MAAN1S,IACFa,EAAKV,OAASX,EAASW,OACvBU,EAAKT,KAAOZ,EAASY,MAKd,MAANJ,GAAqB,KAAPA,GAAoB,MAAPA,IAC5B4S,IACAA,EAAiBvO,MAAM5E,OACtBoT,GAAmBhS,EAAKV,UAEzBU,EAAKV,OAASU,EAAKV,OACfU,EAAKV,OAAOqC,QAAQ,MAAO,WAC3B,UAOFgQ,GAAgC,MAAbvN,IACrBpE,EAAKX,SACe,MAAlBW,EAAKX,SAAmB+E,EAAWkC,EAAU,CAAClC,EAAUpE,EAAKX,YAG1DQ,EAAWG,EACpB,CAIA,SAASiS,GACPC,EACAC,EACAnS,EACAoS,GAOA,IAAKA,IA3FP,SACEA,GAEA,OACU,MAARA,IACE,aAAcA,GAAyB,MAAjBA,EAAK/B,UAC1B,SAAU+B,QAAsBnO,IAAdmO,EAAKC,KAE9B,CAmFgBC,CAAuBF,GACnC,MAAO,CAAEpS,QAGX,GAAIoS,EAAKlC,aAAeqC,GAAcH,EAAKlC,YACzC,MAAO,CACLlQ,OACAwC,MAAOgQ,GAAuB,IAAK,CAAEf,OAAQW,EAAKlC,cAItD,IA0EIuC,EACApC,EA3EAqC,EAAsBA,KAAO,CAC/B1S,OACAwC,MAAOgQ,GAAuB,IAAK,CAAE5G,KAAM,mBAIzC+G,EAAgBP,EAAKlC,YAAc,MACnCA,EAAagC,EACZS,EAAcC,cACdD,EAAcpJ,cACf4G,EAAa0C,GAAkB7S,GAEnC,QAAkBiE,IAAdmO,EAAKC,KAAoB,CAC3B,GAAyB,eAArBD,EAAKhC,YAA8B,CAErC,IAAK0C,GAAiB5C,GACpB,OAAOwC,IAGT,IAAInC,EACmB,iBAAd6B,EAAKC,KACRD,EAAKC,KACLD,EAAKC,gBAAgBU,UACrBX,EAAKC,gBAAgBW,gBAErB5G,MAAMpB,KAAKoH,EAAKC,KAAKvF,WAAWhF,QAC9B,CAACiF,EAAGkG,KAAA,IAAGvQ,EAAMxE,GAAM+U,EAAA,MAAA,GAAQlG,EAAMrK,EAAI,IAAIxE,EAAK,IAAA,GAC9C,IAEFwF,OAAO0O,EAAKC,MAElB,MAAO,CACLrS,OACAkT,WAAY,CACVhD,aACAC,aACAC,YAAagC,EAAKhC,YAClBC,cAAUpM,EACVqM,UAAMrM,EACNsM,QAGN,CAAO,GAAyB,qBAArB6B,EAAKhC,YAAoC,CAElD,IAAK0C,GAAiB5C,GACpB,OAAOwC,IAGT,IACE,IAAIpC,EACmB,iBAAd8B,EAAKC,KAAoBhI,KAAK8I,MAAMf,EAAKC,MAAQD,EAAKC,KAE/D,MAAO,CACLrS,OACAkT,WAAY,CACVhD,aACAC,aACAC,YAAagC,EAAKhC,YAClBC,cAAUpM,EACVqM,OACAC,UAAMtM,GAKZ,CAFE,MAAOxF,GACP,OAAOiU,GACT,CACF,CACF,CAUA,GARAzU,EACsB,mBAAb8U,SACP,iDAMEX,EAAK/B,SACPoC,EAAeW,GAA8BhB,EAAK/B,UAClDA,EAAW+B,EAAK/B,cACX,GAAI+B,EAAKC,gBAAgBU,SAC9BN,EAAeW,GAA8BhB,EAAKC,MAClDhC,EAAW+B,EAAKC,UACX,GAAID,EAAKC,gBAAgBW,gBAC9BP,EAAeL,EAAKC,KACpBhC,EAAWgD,GAA8BZ,QACpC,GAAiB,MAAbL,EAAKC,KACdI,EAAe,IAAIO,gBACnB3C,EAAW,IAAI0C,cAEf,IACEN,EAAe,IAAIO,gBAAgBZ,EAAKC,MACxChC,EAAWgD,GAA8BZ,EAG3C,CAFE,MAAOhU,GACP,OAAOiU,GACT,CAGF,IAAIQ,EAAyB,CAC3BhD,aACAC,aACAC,YACGgC,GAAQA,EAAKhC,aAAgB,oCAChCC,WACAC,UAAMrM,EACNsM,UAAMtM,GAGR,GAAI6O,GAAiBI,EAAWhD,YAC9B,MAAO,CAAElQ,OAAMkT,cAIjB,IAAIjT,EAAaT,EAAUQ,GAS3B,OALImS,GAAalS,EAAWX,QAAU0S,GAAmB/R,EAAWX,SAClEmT,EAAaa,OAAO,QAAS,IAE/BrT,EAAWX,OAAM,IAAOmT,EAEjB,CAAEzS,KAAMH,EAAWI,GAAaiT,aACzC,CAIA,SAASK,GACPhO,EACAiO,GAEA,IAAIC,EAAkBlO,EACtB,GAAIiO,EAAY,CACd,IAAI5U,EAAQ2G,EAAQmO,WAAWC,GAAMA,EAAEnQ,MAAMG,KAAO6P,IAChD5U,GAAS,IACX6U,EAAkBlO,EAAQR,MAAM,EAAGnG,GAEvC,CACA,OAAO6U,CACT,CAEA,SAASG,GACP7S,EACAjC,EACAyG,EACA2N,EACAvU,EACAkV,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAjQ,EACAkQ,GAEA,IAAIC,EAAeD,EACfE,GAAcF,EAAoB,IAChCA,EAAoB,GAAG9R,MACvB8R,EAAoB,GAAGvO,UACzB9B,EACAwQ,EAAa1T,EAAQQ,UAAUzC,EAAMH,UACrC+V,EAAU3T,EAAQQ,UAAU5C,GAG5B6U,EACFc,GAAuBE,GAAcF,EAAoB,IACrDA,EAAoB,QACpBrQ,EACFwP,EAAkBD,EAClBD,GAA8BhO,EAASiO,GACvCjO,EAKAoP,EAAeL,EACfA,EAAoB,GAAGM,gBACvB3Q,EACA4Q,EACFf,GAA+Ba,GAAgBA,GAAgB,IAC7DG,GAAW,EAEXC,EAAoBtB,EAAgB5L,QAAO,CAACjC,EAAOhH,KACrD,IAAI4E,MAAEA,GAAUoC,EAQhB,GAJIiO,GAAiB/U,EAAMkW,aAAqC/Q,IAA3BnF,EAAMkW,OAAOxR,EAAMG,MACtDmR,GAAW,GAGTtR,EAAMyR,KAER,OAAO,EAGT,GAAoB,MAAhBzR,EAAM0R,OACR,OAAO,EAGT,GAAIrB,EACF,QAAIiB,QAA2C7Q,IAA/BnF,EAAM+G,WAAWrC,EAAMG,SAIX,mBAAjBH,EAAM0R,SAAyB1R,EAAM0R,OAAOC,eAItBlR,IAA/BnF,EAAM+G,WAAWrC,EAAMG,OAErB7E,EAAMkW,aAAqC/Q,IAA3BnF,EAAMkW,OAAOxR,EAAMG,MAKzC,GA2HJ,SACEyR,EACAC,EACAzP,GAEA,IAAI0P,GAEDD,GAEDzP,EAAMpC,MAAMG,KAAO0R,EAAa7R,MAAMG,GAIpC4R,OAAsDtR,IAAtCmR,EAAkBxP,EAAMpC,MAAMG,IAGlD,OAAO2R,GAASC,CAClB,CA3IMC,CAAY1W,EAAM+G,WAAY/G,EAAMyG,QAAQ3G,GAAQgH,IACpDoO,EAAwBpM,MAAMjE,GAAOA,IAAOiC,EAAMpC,MAAMG,KAExD,OAAO,EAOT,IAAI8R,EAAoB3W,EAAMyG,QAAQ3G,GAClC8W,EAAiB9P,EAErB,OAAO+P,GAAuB/P,EAAKxG,EAAA,CACjCqV,aACAmB,cAAeH,EAAkB3P,OACjC4O,UACAmB,WAAYH,EAAe5P,QACxBoN,EAAU,CACbqB,eACAI,eACAmB,yBAAyBjB,IAGrBd,GACAU,EAAWpV,SAAWoV,EAAWnV,SAC/BoV,EAAQrV,SAAWqV,EAAQpV,QAE7BmV,EAAWnV,SAAWoV,EAAQpV,QAC9ByW,GAAmBN,EAAmBC,MAC1C,IAIAM,EAA8C,GAqFlD,OApFA7B,EAAiB1N,SAAQ,CAACwP,EAAGlX,KAM3B,GACE8U,IACCtO,EAAQqC,MAAM+L,GAAMA,EAAEnQ,MAAMG,KAAOsS,EAAEC,WACtChC,EAAgBiC,IAAIpX,GAEpB,OAGF,IAAIqX,EAAiBlS,EAAYmQ,EAAa4B,EAAEjW,KAAMoE,GAMtD,IAAKgS,EASH,YARAJ,EAAqB5T,KAAK,CACxBrD,MACAmX,QAASD,EAAEC,QACXlW,KAAMiW,EAAEjW,KACRuF,QAAS,KACTK,MAAO,KACP6G,WAAY,OAQhB,IAAI4J,EAAUvX,EAAMwX,SAAS5I,IAAI3O,GAC7BwX,EAAeC,GAAeJ,EAAgBH,EAAEjW,MAEhDyW,GAAmB,EACnBrC,EAAiB+B,IAAIpX,GAEvB0X,GAAmB,EACVxC,EAAsBkC,IAAIpX,IAEnCkV,EAAsBrG,OAAO7O,GAC7B0X,GAAmB,GASnBA,EAPAJ,GACkB,SAAlBA,EAAQvX,YACSmF,IAAjBoS,EAAQtQ,KAKWgO,EAIA4B,GAAuBY,EAAYnX,EAAA,CACpDqV,aACAmB,cAAe9W,EAAMyG,QAAQzG,EAAMyG,QAAQT,OAAS,GAAGgB,OACvD4O,UACAmB,WAAYtQ,EAAQA,EAAQT,OAAS,GAAGgB,QACrCoN,EAAU,CACbqB,eACAI,eACAmB,yBAAyBjB,GAErBd,KAIJ0C,GACFT,EAAqB5T,KAAK,CACxBrD,MACAmX,QAASD,EAAEC,QACXlW,KAAMiW,EAAEjW,KACRuF,QAAS6Q,EACTxQ,MAAO2Q,EACP9J,WAAY,IAAIC,iBAEpB,IAGK,CAACqI,EAAmBiB,EAC7B,CAqBA,SAASD,GACPV,EACAzP,GAEA,IAAI8Q,EAAcrB,EAAa7R,MAAMxD,KACrC,OAEEqV,EAAahW,WAAauG,EAAMvG,UAGhB,MAAfqX,GACCA,EAAYvP,SAAS,MACrBkO,EAAavP,OAAO,OAASF,EAAME,OAAO,IAEhD,CAEA,SAAS6P,GACPgB,EACAC,GAEA,GAAID,EAAYnT,MAAMiT,iBAAkB,CACtC,IAAII,EAAcF,EAAYnT,MAAMiT,iBAAiBG,GACrD,GAA2B,kBAAhBC,EACT,OAAOA,CAEX,CAEA,OAAOD,EAAId,uBACb,CAMAzH,eAAeyI,GACbC,EACA/W,EACAuF,EACApC,EACAG,EACAF,EACA4T,EAIAnK,GAEA,IAAI9N,EAAM,CAACiB,KAASuF,EAAQhC,KAAKoQ,GAAMA,EAAEnQ,MAAMG,MAAKC,KAAK,KACzD,IACE,IAAIqT,EAAUD,EAAqBtJ,IAAI3O,GAClCkY,IACHA,EAAUF,EAA4B,CACpC/W,OACAuF,UACA2R,MAAOA,CAAChB,EAASrS,KACVgJ,EAAOc,SACVwJ,GACEjB,EACArS,EACAV,EACAG,EACAF,EAEJ,IAGJ4T,EAAqB3H,IAAItQ,EAAKkY,IAG5BA,IA64BgB,iBADQG,EA54BoBH,IA64BT,MAAPG,GAAe,SAAUA,UA54BjDH,CAIV,CAFU,QACRD,EAAqBpJ,OAAO7O,EAC9B,CAu4BF,IAAgCqY,CAt4BhC,CAEA,SAASD,GACPjB,EACArS,EACAwQ,EACA/Q,EACAF,GAEA,GAAI8S,EAAS,CAAA,IAAAmB,EACX,IAAI7T,EAAQF,EAAS4S,GACrBjY,EACEuF,EACoD0S,oDAAAA,GAEtD,IAAIoB,EAAepU,EACjBW,EACAT,EACA,CAAC8S,EAAS,QAASxS,eAAO2T,EAAA7T,EAAMK,iBAANwT,EAAgBvS,SAAU,MACpDxB,GAEEE,EAAMK,SACRL,EAAMK,SAASzB,QAAQkV,GAEvB9T,EAAMK,SAAWyT,CAErB,KAAO,CACL,IAAIA,EAAepU,EACjBW,EACAT,EACA,CAAC,QAASM,OAAO2Q,EAAYvP,QAAU,MACvCxB,GAEF+Q,EAAYjS,QAAQkV,EACtB,CACF,CAiFAjJ,eAAekJ,GAAmBC,GAE6B,IAF5BjS,QACjCA,GACyBiS,EACrBC,EAAgBlS,EAAQsC,QAAQ8L,GAAMA,EAAE+D,aAE5C,aADoBnL,QAAQoL,IAAIF,EAAclU,KAAKoQ,GAAMA,EAAErF,cAC5CxG,QACb,CAACiF,EAAKzF,EAAQrC,IACZsD,OAAO5F,OAAOoK,EAAK,CAAE,CAAC0K,EAAcxS,GAAGzB,MAAMG,IAAK2D,KACpD,CACF,EACF,CAEA+G,eAAeuJ,GACbC,EACAjM,EACA9M,EACAsS,EACAqG,EACAlS,EACAuS,EACAxU,EACAF,EACA2U,GAEA,IAAIC,EAA+BzS,EAAQhC,KAAKoQ,GAC9CA,EAAEnQ,MAAMyR,KAnGZ5G,eACE7K,EACAJ,EACAE,GAEA,IAAKE,EAAMyR,KACT,OAGF,IAAIgD,QAAkBzU,EAAMyR,OAK5B,IAAKzR,EAAMyR,KACT,OAGF,IAAIiD,EAAgB5U,EAASE,EAAMG,IACnC1F,EAAUia,EAAe,8BAUzB,IAAIC,EAAoC,CAAA,EACxC,IAAK,IAAIC,KAAqBH,EAAW,CACvC,IAGII,OACmBpU,IAHrBiU,EAAcE,IAMQ,qBAAtBA,EAEF/Z,GACGga,EACD,UAAUH,EAAcvU,GAAE,4BAA4ByU,EAAtD,yGAE8BA,wBAI7BC,GACArV,EAAmBmT,IAAIiC,KAExBD,EAAaC,GACXH,EAAUG,GAEhB,CAIA7P,OAAO5F,OAAOuV,EAAeC,GAK7B5P,OAAO5F,OAAOuV,EAAa9Y,EAKtBgE,CAAAA,EAAAA,EAAmB8U,GAAc,CACpCjD,UAAMhR,IAEV,CA6BQqU,CAAoB3E,EAAEnQ,MAAOJ,EAAoBE,QACjDW,IAGFsU,EAAYhT,EAAQhC,KAAI,CAACqC,EAAOX,KAClC,IAAIuT,EAAmBR,EAA6B/S,GAChDyS,EAAaD,EAAc7P,MAAM+L,GAAMA,EAAEnQ,MAAMG,KAAOiC,EAAMpC,MAAMG,KAyBtE,OAAAvE,KACKwG,EAAK,CACR8R,aACApJ,QAvB0CD,UAExCoK,GACmB,QAAnBrH,EAAQK,SACP7L,EAAMpC,MAAMyR,MAAQrP,EAAMpC,MAAM0R,UAEjCwC,GAAa,GAERA,EA2CbrJ,eACEzC,EACAwF,EACAxL,EACA4S,EACAC,EACAC,GAEA,IAAIpR,EACAqR,EAEAC,EACFC,IAGA,IAAI7M,EAGAM,EAAe,IAAIC,SAA4B,CAACzD,EAAG0D,IAAOR,EAASQ,IACvEmM,EAAWA,IAAM3M,IACjBoF,EAAQvE,OAAO7K,iBAAiB,QAAS2W,GAEzC,IAAIG,EAAiBC,GACI,mBAAZF,EACFtM,QAAQP,OACb,IAAI5N,MACF,oEACMwN,EAAI,eAAehG,EAAMpC,MAAMG,GAAE,MAItCkV,EACL,CACEzH,UACAtL,OAAQF,EAAME,OACdkT,QAASN,WAECzU,IAAR8U,EAAoB,CAACA,GAAO,IAIhCE,EAA8C,WAChD,IAIE,MAAO,CAAErN,KAAM,OAAQtE,aAHNmR,EACbA,GAAiBM,GAAiBD,EAAcC,KAChDD,KAIN,CAFE,MAAOra,GACP,MAAO,CAAEmN,KAAM,QAAStE,OAAQ7I,EAClC,CACD,EATiD,GAWlD,OAAO8N,QAAQc,KAAK,CAAC4L,EAAgB3M,GAAc,EAGrD,IACE,IAAIuM,EAAUjT,EAAMpC,MAAMoI,GAG1B,GAAI4M,EACF,GAAIK,EAAS,CAEX,IAAIK,GACChb,SAAeqO,QAAQoL,IAAI,CAI9BiB,EAAWC,GAASrL,OAAO/O,IACzBya,EAAeza,CAAC,IAElB+Z,IAEF,QAAqBvU,IAAjBiV,EACF,MAAMA,EAER5R,EAASpJ,CACX,KAAO,CAKL,SAHMsa,EAENK,EAAUjT,EAAMpC,MAAMoI,IAClBiN,EAKG,IAAa,WAATjN,EAAmB,CAC5B,IAAIzJ,EAAM,IAAIP,IAAIwP,EAAQjP,KACtB9C,EAAW8C,EAAI9C,SAAW8C,EAAI7C,OAClC,MAAMkT,GAAuB,IAAK,CAChCf,OAAQL,EAAQK,OAChBpS,WACA6W,QAAStQ,EAAMpC,MAAMG,IAEzB,CAGE,MAAO,CAAEiI,KAAM7I,EAAWgD,KAAMuB,YAAQrD,EAC1C,CAbEqD,QAAesR,EAAWC,EAc9B,KACK,KAAKA,EAAS,CACnB,IAAI1W,EAAM,IAAIP,IAAIwP,EAAQjP,KAE1B,MAAMqQ,GAAuB,IAAK,CAChCnT,SAFa8C,EAAI9C,SAAW8C,EAAI7C,QAIpC,CACEgI,QAAesR,EAAWC,EAC5B,CAEA5a,OACoBgG,IAAlBqD,EAAOA,OACP,gBAAwB,WAATsE,EAAoB,YAAc,YAAjD,eACMhG,EAAMpC,MAAMG,GAA8CiI,4CAAAA,EADhE,+CAaJ,CATE,MAAOnN,GAIP,MAAO,CAAEmN,KAAM7I,EAAWP,MAAO8E,OAAQ7I,EAC3C,CAAU,QACJka,GACFvH,EAAQvE,OAAO5K,oBAAoB,QAAS0W,EAEhD,CAEA,OAAOrR,CACT,CA1KU6R,CACEvN,EACAwF,EACAxL,EACA4S,EACAC,EACAV,GAEFxL,QAAQ+B,QAAQ,CAAE1C,KAAM7I,EAAWgD,KAAMuB,YAAQrD,MAM9C,IAOPmV,QAAgBvB,EAAiB,CACnCtS,QAASgT,EACTnH,UACAtL,OAAQP,EAAQ,GAAGO,OACnBgS,aACAkB,QAASjB,IAMX,UACQxL,QAAQoL,IAAIK,EAElB,CADA,MAAOvZ,GACP,CAGF,OAAO2a,CACT,CAqIA/K,eAAegL,GACbC,GAEA,IAAIhS,OAAEA,EAAMsE,KAAEA,GAAS0N,EAEvB,GAAIC,GAAWjS,GAAS,CACtB,IAAIvB,EAEJ,IACE,IAAIyT,EAAclS,EAAO6H,QAAQzB,IAAI,gBAKjC3H,EAFAyT,GAAe,wBAAwBxR,KAAKwR,GAC3B,MAAflS,EAAO+K,KACF,WAEM/K,EAAOgJ,aAGThJ,EAAOiJ,MAIxB,CAFE,MAAO9R,GACP,MAAO,CAAEmN,KAAM7I,EAAWP,MAAOA,MAAO/D,EAC1C,CAEA,OAAImN,IAAS7I,EAAWP,MACf,CACLoJ,KAAM7I,EAAWP,MACjBA,MAAO,IAAI+M,EAAkBjI,EAAO4H,OAAQ5H,EAAOkI,WAAYzJ,GAC/D6O,WAAYtN,EAAO4H,OACnBC,QAAS7H,EAAO6H,SAIb,CACLvD,KAAM7I,EAAWgD,KACjBA,OACA6O,WAAYtN,EAAO4H,OACnBC,QAAS7H,EAAO6H,QAEpB,CAEA,GAAIvD,IAAS7I,EAAWP,MAAO,CAC7B,GAAIiX,GAAuBnS,GAAS,CAAA,IAAAoS,EACAC,EAAlC,GAAIrS,EAAOvB,gBAAgB3H,MACzB,MAAO,CACLwN,KAAM7I,EAAWP,MACjBA,MAAO8E,EAAOvB,KACd6O,WAAuB,OAAb+E,EAAErS,EAAOoE,WAAI,EAAXiO,EAAazK,QAK7B5H,EAAS,IAAIiI,GACA,OAAXmK,EAAApS,EAAOoE,WAAI,EAAXgO,EAAaxK,SAAU,SACvBjL,EACAqD,EAAOvB,KAEX,CACA,MAAO,CACL6F,KAAM7I,EAAWP,MACjBA,MAAO8E,EACPsN,WAAYlF,EAAqBpI,GAAUA,EAAO4H,YAASjL,EAE/D,CAE4B,IAAA2V,EAAAC,EASQC,EAAAC,EATpC,OAAIC,GAAe1S,GACV,CACLsE,KAAM7I,EAAWkX,SACjBC,aAAc5S,EACdsN,WAAuB,OAAbgF,EAAEtS,EAAOoE,WAAI,EAAXkO,EAAa1K,OACzBC,SAAS0K,OAAAA,EAAAvS,EAAOoE,WAAPmO,EAAAA,EAAa1K,UAAW,IAAIC,QAAQ9H,EAAOoE,KAAKyD,UAIzDsK,GAAuBnS,GAClB,CACLsE,KAAM7I,EAAWgD,KACjBA,KAAMuB,EAAOvB,KACb6O,WAAuB,OAAbkF,EAAExS,EAAOoE,WAAI,EAAXoO,EAAa5K,OACzBC,eAAS4K,EAAAzS,EAAOoE,OAAPqO,EAAa5K,QAClB,IAAIC,QAAQ9H,EAAOoE,KAAKyD,cACxBlL,GAID,CAAE2H,KAAM7I,EAAWgD,KAAMA,KAAMuB,EACxC,CAGA,SAAS6S,GACPC,EACAhJ,EACA8E,EACA3Q,EACAnB,EACAqG,GAEA,IAAI9L,EAAWyb,EAASjL,QAAQzB,IAAI,YAMpC,GALAzP,EACEU,EACA,+EAGGiS,EAAmB5I,KAAKrJ,GAAW,CACtC,IAAI0b,EAAiB9U,EAAQR,MAC3B,EACAQ,EAAQmO,WAAWC,GAAMA,EAAEnQ,MAAMG,KAAOuS,IAAW,GAErDvX,EAAW+S,GACT,IAAI9P,IAAIwP,EAAQjP,KAChBkY,EACAjW,GACA,EACAzF,EACA8L,GAEF2P,EAASjL,QAAQE,IAAI,WAAY1Q,EACnC,CAEA,OAAOyb,CACT,CAEA,SAASE,GACP3b,EACA8V,EACArQ,GAEA,GAAIwM,EAAmB5I,KAAKrJ,GAAW,CAErC,IAAI4b,EAAqB5b,EACrBwD,EAAMoY,EAAmBlU,WAAW,MACpC,IAAIzE,IAAI6S,EAAW+F,SAAWD,GAC9B,IAAI3Y,IAAI2Y,GACRE,EAA0D,MAAzClW,EAAcpC,EAAI9C,SAAU+E,GACjD,GAAIjC,EAAIV,SAAWgT,EAAWhT,QAAUgZ,EACtC,OAAOtY,EAAI9C,SAAW8C,EAAI7C,OAAS6C,EAAI5C,IAE3C,CACA,OAAOZ,CACT,CAKA,SAAS+b,GACP3Z,EACApC,EACAkO,EACAqG,GAEA,IAAI/Q,EAAMpB,EAAQQ,UAAUsR,GAAkBlU,IAAWgB,WACrD+L,EAAoB,CAAEmB,UAE1B,GAAIqG,GAAcJ,GAAiBI,EAAWhD,YAAa,CACzD,IAAIA,WAAEA,EAAUE,YAAEA,GAAgB8C,EAIlCxH,EAAK+F,OAASvB,EAAW0C,cAEL,qBAAhBxC,GACF1E,EAAKyD,QAAU,IAAIC,QAAQ,CAAE,eAAgBgB,IAC7C1E,EAAK2G,KAAOhI,KAAKC,UAAU4I,EAAW5C,OACb,eAAhBF,EAET1E,EAAK2G,KAAOa,EAAW3C,KAEP,sCAAhBH,GACA8C,EAAW7C,SAGX3E,EAAK2G,KAAOe,GAA8BF,EAAW7C,UAGrD3E,EAAK2G,KAAOa,EAAW7C,QAE3B,CAEA,OAAO,IAAIsK,QAAQxY,EAAKuJ,EAC1B,CAEA,SAAS0H,GAA8B/C,GACrC,IAAIoC,EAAe,IAAIO,gBAEvB,IAAK,IAAKjU,EAAKb,KAAUmS,EAASvD,UAEhC2F,EAAaa,OAAOvU,EAAsB,iBAAVb,EAAqBA,EAAQA,EAAMwE,MAGrE,OAAO+P,CACT,CAEA,SAASY,GACPZ,GAEA,IAAIpC,EAAW,IAAI0C,SACnB,IAAK,IAAKhU,EAAKb,KAAUuU,EAAa3F,UACpCuD,EAASiD,OAAOvU,EAAKb,GAEvB,OAAOmS,CACT,CAEA,SAASuK,GACPrV,EACA6T,EACA9E,EACAuG,EACAC,GAQA,IAEIlG,EAFA/O,EAAwC,CAAA,EACxCmP,EAAuC,KAEvC+F,GAAa,EACbC,EAAyC,CAAA,EACzCC,EACF3G,GAAuBE,GAAcF,EAAoB,IACrDA,EAAoB,GAAG9R,WACvByB,EAyFN,OAtFAsB,EAAQkB,SAASb,IACf,KAAMA,EAAMpC,MAAMG,MAAMyV,GACtB,OAEF,IAAIzV,EAAKiC,EAAMpC,MAAMG,GACjB2D,EAAS8R,EAAQzV,GAKrB,GAJA1F,GACGid,GAAiB5T,GAClB,uDAEEkN,GAAclN,GAAS,CACzB,IAAI9E,EAAQ8E,EAAO9E,MAWnB,QAPqByB,IAAjBgX,IACFzY,EAAQyY,EACRA,OAAehX,GAGjB+Q,EAASA,GAAU,GAEf8F,EACF9F,EAAOrR,GAAMnB,MACR,CAIL,IAAI2Y,EAAgBC,GAAoB7V,EAAS5B,GACX,MAAlCqR,EAAOmG,EAAc3X,MAAMG,MAC7BqR,EAAOmG,EAAc3X,MAAMG,IAAMnB,EAErC,CAGAqD,EAAWlC,QAAMM,EAIZ8W,IACHA,GAAa,EACbnG,EAAalF,EAAqBpI,EAAO9E,OACrC8E,EAAO9E,MAAM0M,OACb,KAEF5H,EAAO6H,UACT6L,EAAcrX,GAAM2D,EAAO6H,QAE/B,MACMkM,GAAiB/T,IACnBuT,EAAgBxL,IAAI1L,EAAI2D,EAAO4S,cAC/BrU,EAAWlC,GAAM2D,EAAO4S,aAAanU,KAId,MAArBuB,EAAOsN,YACe,MAAtBtN,EAAOsN,YACNmG,IAEDnG,EAAatN,EAAOsN,YAElBtN,EAAO6H,UACT6L,EAAcrX,GAAM2D,EAAO6H,WAG7BtJ,EAAWlC,GAAM2D,EAAOvB,KAGpBuB,EAAOsN,YAAoC,MAAtBtN,EAAOsN,aAAuBmG,IACrDnG,EAAatN,EAAOsN,YAElBtN,EAAO6H,UACT6L,EAAcrX,GAAM2D,EAAO6H,SAGjC,SAMmBlL,IAAjBgX,GAA8B3G,IAChCU,EAAS,CAAE,CAACV,EAAoB,IAAK2G,GACrCpV,EAAWyO,EAAoB,SAAMrQ,GAGhC,CACL4B,aACAmP,SACAJ,WAAYA,GAAc,IAC1BoG,gBAEJ,CAEA,SAASM,GACPxc,EACAyG,EACAkS,EACA2B,EACA9E,EACA0B,EACAuF,EACAV,GAKA,IAAIhV,WAAEA,EAAUmP,OAAEA,GAAW4F,GAC3BrV,EACA6T,EACA9E,EACAuG,GACA,GAoCF,OAhCA7E,EAAqBvP,SAAS+U,IAC5B,IAAIzc,IAAEA,EAAG6G,MAAEA,EAAK6G,WAAEA,GAAe+O,EAC7BlU,EAASiU,EAAexc,GAI5B,GAHAd,EAAUqJ,EAAQ,8CAGdmF,IAAcA,EAAWI,OAAOc,QAG7B,GAAI6G,GAAclN,GAAS,CAChC,IAAI6T,EAAgBC,GAAoBtc,EAAMyG,cAASK,SAAAA,EAAOpC,MAAMG,IAC9DqR,GAAUA,EAAOmG,EAAc3X,MAAMG,MACzCqR,EAAM5V,EAAA,CAAA,EACD4V,EAAM,CACT,CAACmG,EAAc3X,MAAMG,IAAK2D,EAAO9E,SAGrC1D,EAAMwX,SAAS1I,OAAO7O,EACxB,MAAO,GAAImc,GAAiB5T,GAG1BrJ,GAAU,EAAO,gDACZ,GAAIod,GAAiB/T,GAG1BrJ,GAAU,EAAO,uCACZ,CACL,IAAIwd,EAAcC,GAAepU,EAAOvB,MACxCjH,EAAMwX,SAASjH,IAAItQ,EAAK0c,EAC1B,KAGK,CAAE5V,aAAYmP,SACvB,CAEA,SAAS2G,GACP9V,EACA+V,EACArW,EACAyP,GAEA,IAAI6G,EAAgBzc,EAAA,CAAA,EAAQwc,GAC5B,IAAK,IAAIhW,KAASL,EAAS,CACzB,IAAI5B,EAAKiC,EAAMpC,MAAMG,GAerB,GAdIiY,EAAcE,eAAenY,QACLM,IAAtB2X,EAAcjY,KAChBkY,EAAiBlY,GAAMiY,EAAcjY,SAMXM,IAAnB4B,EAAWlC,IAAqBiC,EAAMpC,MAAM0R,SAGrD2G,EAAiBlY,GAAMkC,EAAWlC,IAGhCqR,GAAUA,EAAO8G,eAAenY,GAElC,KAEJ,CACA,OAAOkY,CACT,CAEA,SAASE,GACPzH,GAEA,OAAKA,EAGEE,GAAcF,EAAoB,IACrC,CAEE0H,WAAY,CAAC,GAEf,CACEA,WAAY,CACV,CAAC1H,EAAoB,IAAKA,EAAoB,GAAGvO,OAThD,EAYX,CAKA,SAASqV,GACP7V,EACA2Q,GAKA,OAHsBA,EAClB3Q,EAAQR,MAAM,EAAGQ,EAAQmO,WAAWC,GAAMA,EAAEnQ,MAAMG,KAAOuS,IAAW,GACpE,IAAI3Q,IAEU0W,UAAUC,MAAMvI,IAAmC,IAA7BA,EAAEnQ,MAAMsN,oBAC9CvL,EAAQ,EAEZ,CAEA,SAAS4W,GAAuBhZ,GAK9B,IAAIK,EACgB,IAAlBL,EAAO2B,OACH3B,EAAO,GACPA,EAAO+Y,MAAM1P,GAAMA,EAAE5N,QAAU4N,EAAExM,MAAmB,MAAXwM,EAAExM,QAAiB,CAC1D2D,GAAE,wBAGV,MAAO,CACL4B,QAAS,CACP,CACEO,OAAQ,CAAE,EACVzG,SAAU,GACVmJ,aAAc,GACdhF,UAGJA,QAEJ,CAEA,SAASgP,GACPtD,EAAckN,GAcd,IAbA/c,SACEA,EAAQ6W,QACRA,EAAOzE,OACPA,EAAM7F,KACNA,EAAIzN,QACJA,QAOD,IAAAie,EAAG,CAAA,EAAEA,EAEF5M,EAAa,uBACb6M,EAAe,kCAoCnB,OAlCe,MAAXnN,GACFM,EAAa,cACA,oBAAT5D,EACFyQ,EACE,wBAAwBhd,EAAxB,qFACwClB,EACjCsT,GAAUpS,GAAY6W,EAC/BmG,EACE,cAAc5K,EAAM,gBAAgBpS,EAApC,+CAC2C6W,EAD3C,+CAGgB,iBAATtK,EACTyQ,EAAe,sCACG,iBAATzQ,IACTyQ,EAAe,qCAEG,MAAXnN,GACTM,EAAa,YACb6M,EAAyBnG,UAAAA,EAAgC7W,yBAAAA,EAAW,KAChD,MAAX6P,GACTM,EAAa,YACb6M,EAAY,yBAA4Bhd,EAAW,KAC/B,MAAX6P,IACTM,EAAa,qBACTiC,GAAUpS,GAAY6W,EACxBmG,EACE,cAAc5K,EAAOmB,cAAa,gBAAgBvT,EAAlD,gDAC4C6W,EAD5C,+CAGOzE,IACT4K,6BAA0C5K,EAAOmB,cAAgB,MAI9D,IAAIrD,EACTL,GAAU,IACVM,EACA,IAAIpR,MAAMie,IACV,EAEJ,CAGA,SAASC,GACPlD,GAEA,IAAItM,EAAUvE,OAAOuE,QAAQsM,GAC7B,IAAK,IAAInU,EAAI6H,EAAQhI,OAAS,EAAGG,GAAK,EAAGA,IAAK,CAC5C,IAAKlG,EAAKuI,GAAUwF,EAAQ7H,GAC5B,GAAIiW,GAAiB5T,GACnB,MAAO,CAAEvI,MAAKuI,SAElB,CACF,CAEA,SAASuL,GAAkB7S,GAEzB,OAAOH,EAAUT,EAAA,CAAA,EADgB,iBAATY,EAAoBR,EAAUQ,GAAQA,EAC7B,CAAET,KAAM,KAC3C,CAqCA,SAASgd,GAAmCjV,GAC1C,OACEiS,GAAWjS,EAAOA,SAAWyI,EAAoBoG,IAAI7O,EAAOA,OAAO4H,OAEvE,CAEA,SAASmM,GAAiB/T,GACxB,OAAOA,EAAOsE,OAAS7I,EAAWkX,QACpC,CAEA,SAASzF,GAAclN,GACrB,OAAOA,EAAOsE,OAAS7I,EAAWP,KACpC,CAEA,SAAS0Y,GAAiB5T,GACxB,OAAQA,GAAUA,EAAOsE,QAAU7I,EAAWkM,QAChD,CAEO,SAASwK,GACdvb,GAEA,MACmB,iBAAVA,GACE,MAATA,GACA,SAAUA,GACV,SAAUA,GACV,SAAUA,GACK,yBAAfA,EAAM0N,IAEV,CAEO,SAASoO,GAAe9b,GAC7B,IAAI+b,EAAyB/b,EAC7B,OACE+b,GACoB,iBAAbA,GACkB,iBAAlBA,EAASlU,MACc,mBAAvBkU,EAAShM,WACW,mBAApBgM,EAAS/L,QACgB,mBAAzB+L,EAASuC,WAEpB,CAEA,SAASjD,GAAWrb,GAClB,OACW,MAATA,GACwB,iBAAjBA,EAAMgR,QACe,iBAArBhR,EAAMsR,YACY,iBAAlBtR,EAAMiR,cACS,IAAfjR,EAAMmU,IAEjB,CAYA,SAASE,GAAcd,GACrB,OAAO3B,EAAoBqG,IAAI1E,EAAOlI,cACxC,CAEA,SAASuJ,GACPrB,GAEA,OAAO7B,EAAqBuG,IAAI1E,EAAOlI,cACzC,CAEA8E,eAAeoO,GACblX,EACA6T,EACAvM,EACA6P,EACAtH,GAEA,IAAItI,EAAUvE,OAAOuE,QAAQsM,GAC7B,IAAK,IAAIxa,EAAQ,EAAGA,EAAQkO,EAAQhI,OAAQlG,IAAS,CACnD,IAAKsX,EAAS5O,GAAUwF,EAAQlO,GAC5BgH,EAAQL,EAAQ2W,MAAMvI,IAAO,MAADA,OAAC,EAADA,EAAGnQ,MAAMG,MAAOuS,IAIhD,IAAKtQ,EACH,SAGF,IAAIyP,EAAeqH,EAAeR,MAC/BvI,GAAMA,EAAEnQ,MAAMG,KAAOiC,EAAOpC,MAAMG,KAEjCgZ,EACc,MAAhBtH,IACCU,GAAmBV,EAAczP,SAC2B3B,KAA5DmR,GAAqBA,EAAkBxP,EAAMpC,MAAMG,KAElD0X,GAAiB/T,IAAWqV,SAIxBC,GAAoBtV,EAAQuF,GAAQ,GAAOS,MAAMhG,IACjDA,IACF8R,EAAQlD,GAAW5O,EACrB,GAGN,CACF,CAEA+G,eAAewO,GACbtX,EACA6T,EACApD,GAEA,IAAK,IAAIpX,EAAQ,EAAGA,EAAQoX,EAAqBlR,OAAQlG,IAAS,CAChE,IAAIG,IAAEA,EAAGmX,QAAEA,EAAOzJ,WAAEA,GAAeuJ,EAAqBpX,GACpD0I,EAAS8R,EAAQra,GACTwG,EAAQ2W,MAAMvI,IAAO,MAADA,OAAC,EAADA,EAAGnQ,MAAMG,MAAOuS,MAQ5CmF,GAAiB/T,KAInBrJ,EACEwO,EACA,8EAEImQ,GAAoBtV,EAAQmF,EAAWI,QAAQ,GAAMS,MACxDhG,IACKA,IACF8R,EAAQra,GAAOuI,EACjB,KAIR,CACF,CAEA+G,eAAeuO,GACbtV,EACAuF,EACAiQ,GAGA,QAHM,IAANA,IAAAA,GAAS,UAEWxV,EAAO4S,aAAasC,YAAY3P,GACpD,CAIA,GAAIiQ,EACF,IACE,MAAO,CACLlR,KAAM7I,EAAWgD,KACjBA,KAAMuB,EAAO4S,aAAa1L,cAQ9B,CANE,MAAO/P,GAEP,MAAO,CACLmN,KAAM7I,EAAWP,MACjBA,MAAO/D,EAEX,CAGF,MAAO,CACLmN,KAAM7I,EAAWgD,KACjBA,KAAMuB,EAAO4S,aAAanU,KAnB5B,CAqBF,CAEA,SAASiM,GAAmB1S,GAC1B,OAAO,IAAI0T,gBAAgB1T,GAAQyd,OAAO,SAASnV,MAAMyB,GAAY,KAANA,GACjE,CAEA,SAASmN,GACPjR,EACA5G,GAEA,IAAIW,EACkB,iBAAbX,EAAwBa,EAAUb,GAAUW,OAASX,EAASW,OACvE,GACEiG,EAAQA,EAAQT,OAAS,GAAGtB,MAAM5E,OAClCoT,GAAmB1S,GAAU,IAG7B,OAAOiG,EAAQA,EAAQT,OAAS,GAIlC,IAAI4F,EAAcH,EAA2BhF,GAC7C,OAAOmF,EAAYA,EAAY5F,OAAS,EAC1C,CAEA,SAASkY,GACPC,GAEA,IAAI/M,WAAEA,EAAUC,WAAEA,EAAUC,YAAEA,EAAWG,KAAEA,EAAIF,SAAEA,EAAQC,KAAEA,GACzD2M,EACF,GAAK/M,GAAeC,GAAeC,EAInC,OAAY,MAARG,EACK,CACLL,aACAC,aACAC,cACAC,cAAUpM,EACVqM,UAAMrM,EACNsM,QAEmB,MAAZF,EACF,CACLH,aACAC,aACAC,cACAC,WACAC,UAAMrM,EACNsM,UAAMtM,QAEUA,IAATqM,EACF,CACLJ,aACAC,aACAC,cACAC,cAAUpM,EACVqM,OACAC,UAAMtM,QAPH,CAUT,CAEA,SAASiZ,GACPve,EACAuU,GAEA,GAAIA,EAAY,CAWd,MAV8C,CAC5CpU,MAAO,UACPH,WACAuR,WAAYgD,EAAWhD,WACvBC,WAAY+C,EAAW/C,WACvBC,YAAa8C,EAAW9C,YACxBC,SAAU6C,EAAW7C,SACrBC,KAAM4C,EAAW5C,KACjBC,KAAM2C,EAAW3C,KAGrB,CAWE,MAV8C,CAC5CzR,MAAO,UACPH,WACAuR,gBAAYjM,EACZkM,gBAAYlM,EACZmM,iBAAanM,EACboM,cAAUpM,EACVqM,UAAMrM,EACNsM,UAAMtM,EAIZ,CAEA,SAASkZ,GACPxe,EACAuU,GAYA,MAViD,CAC/CpU,MAAO,aACPH,WACAuR,WAAYgD,EAAWhD,WACvBC,WAAY+C,EAAW/C,WACvBC,YAAa8C,EAAW9C,YACxBC,SAAU6C,EAAW7C,SACrBC,KAAM4C,EAAW5C,KACjBC,KAAM2C,EAAW3C,KAGrB,CAEA,SAAS6M,GACPlK,EACAnN,GAEA,GAAImN,EAAY,CAWd,MAVwC,CACtCpU,MAAO,UACPoR,WAAYgD,EAAWhD,WACvBC,WAAY+C,EAAW/C,WACvBC,YAAa8C,EAAW9C,YACxBC,SAAU6C,EAAW7C,SACrBC,KAAM4C,EAAW5C,KACjBC,KAAM2C,EAAW3C,KACjBxK,OAGJ,CAWE,MAVwC,CACtCjH,MAAO,UACPoR,gBAAYjM,EACZkM,gBAAYlM,EACZmM,iBAAanM,EACboM,cAAUpM,EACVqM,UAAMrM,EACNsM,UAAMtM,EACN8B,OAIN,CAmBA,SAAS2V,GAAe3V,GAWtB,MAVqC,CACnCjH,MAAO,OACPoR,gBAAYjM,EACZkM,gBAAYlM,EACZmM,iBAAanM,EACboM,cAAUpM,EACVqM,UAAMrM,EACNsM,UAAMtM,EACN8B,OAGJ,2WFn8KO,SACLtF,GAoBA,YApB8B,IAA9BA,IAAAA,EAAiC,CAAA,GAoB1BJ,GAlBP,SACEK,EACAI,GAEA,IAAIzB,SAAEA,EAAQC,OAAEA,EAAMC,KAAEA,GAASmB,EAAO/B,SACxC,OAAOM,EACL,GACA,CAAEI,WAAUC,SAAQC,QAEnBuB,EAAchC,OAASgC,EAAchC,MAAMD,KAAQ,KACnDiC,EAAchC,OAASgC,EAAchC,MAAMC,KAAQ,UAExD,IAEA,SAA2B2B,EAAgBvB,GACzC,MAAqB,iBAAPA,EAAkBA,EAAKU,EAAWV,EAClD,GAKE,KACAsB,EAEJ,sBA8BO,SACLA,GAqDA,YArD2B,IAA3BA,IAAAA,EAA8B,CAAA,GAqDvBJ,GAnDP,SACEK,EACAI,GAEA,IAAIzB,SACFA,EAAW,IAAGC,OACdA,EAAS,GAAEC,KACXA,EAAO,IACLC,EAAUkB,EAAO/B,SAASY,KAAKK,OAAO,IAY1C,OAJKP,EAASgH,WAAW,MAAShH,EAASgH,WAAW,OACpDhH,EAAW,IAAMA,GAGZJ,EACL,GACA,CAAEI,WAAUC,SAAQC,QAEnBuB,EAAchC,OAASgC,EAAchC,MAAMD,KAAQ,KACnDiC,EAAchC,OAASgC,EAAchC,MAAMC,KAAQ,UAExD,IAEA,SAAwB2B,EAAgBvB,GACtC,IAAIqC,EAAOd,EAAOC,SAAS0c,cAAc,QACrC3b,EAAO,GAEX,GAAIF,GAAQA,EAAK8b,aAAa,QAAS,CACrC,IAAInb,EAAMzB,EAAO/B,SAAS+C,KACtBxB,EAAYiC,EAAIhC,QAAQ,KAC5BuB,GAAsB,IAAfxB,EAAmBiC,EAAMA,EAAI4C,MAAM,EAAG7E,EAC/C,CAEA,OAAOwB,EAAO,KAAqB,iBAAPvC,EAAkBA,EAAKU,EAAWV,GAChE,IAEA,SAA8BR,EAAoBQ,GAChDd,EACkC,MAAhCM,EAASU,SAASU,OAAO,GAAU,6DAC0BsK,KAAKC,UAChEnL,OAGN,GAMEsB,EAEJ,wBAvPO,SACLA,QAA6B,IAA7BA,IAAAA,EAAgC,CAAA,GAEhC,IACIqM,GADAyQ,eAAEA,EAAiB,CAAC,KAAIC,aAAEA,EAAY3c,SAAEA,GAAW,GAAUJ,EAEjEqM,EAAUyQ,EAAeha,KAAI,CAACka,EAAO7e,IACnC8e,EACED,EACiB,iBAAVA,EAAqB,KAAOA,EAAM3e,MAC/B,IAAVF,EAAc,eAAYqF,KAG9B,IAAIrF,EAAQ+e,EACM,MAAhBH,EAAuB1Q,EAAQhI,OAAS,EAAI0Y,GAE1Cxc,EAASjD,EAAOkD,IAChBC,EAA4B,KAEhC,SAASyc,EAAW7a,GAClB,OAAOrD,KAAKme,IAAIne,KAAKoe,IAAI/a,EAAG,GAAIgK,EAAQhI,OAAS,EACnD,CACA,SAASgZ,IACP,OAAOhR,EAAQlO,EACjB,CACA,SAAS8e,EACPve,EACAL,EACAC,QADU,IAAVD,IAAAA,EAAa,MAGb,IAAIH,EAAWM,EACb6N,EAAUgR,IAAqBze,SAAW,IAC1CF,EACAL,EACAC,GAQF,OANAV,EACkC,MAAhCM,EAASU,SAASU,OAAO,8DACkCsK,KAAKC,UAC9DnL,IAGGR,CACT,CAEA,SAAS4B,EAAWpB,GAClB,MAAqB,iBAAPA,EAAkBA,EAAKU,EAAWV,EAClD,CA0DA,MAxD6B,CACvBP,YACF,OAAOA,CACR,EACGoC,aACF,OAAOA,CACR,EACGrC,eACF,OAAOmf,GACR,EACDvd,aACAgB,UAAUpC,GACD,IAAIyC,IAAIrB,EAAWpB,GAAK,oBAEjC+C,eAAe/C,GACb,IAAIa,EAAqB,iBAAPb,EAAkBK,EAAUL,GAAMA,EACpD,MAAO,CACLE,SAAUW,EAAKX,UAAY,GAC3BC,OAAQU,EAAKV,QAAU,GACvBC,KAAMS,EAAKT,MAAQ,GAEtB,EACD6C,KAAKjD,EAAIL,GACPkC,EAASjD,EAAOsE,KAChB,IAAI0b,EAAeL,EAAqBve,EAAIL,GAC5CF,GAAS,EACTkO,EAAQkR,OAAOpf,EAAOkO,EAAQhI,OAAQiZ,GAClCld,GAAYK,GACdA,EAAS,CAAEF,SAAQrC,SAAUof,EAAczc,MAAO,GAErD,EACDK,QAAQxC,EAAIL,GACVkC,EAASjD,EAAO6E,QAChB,IAAImb,EAAeL,EAAqBve,EAAIL,GAC5CgO,EAAQlO,GAASmf,EACbld,GAAYK,GACdA,EAAS,CAAEF,SAAQrC,SAAUof,EAAczc,MAAO,GAErD,EACDuB,GAAGvB,GACDN,EAASjD,EAAOkD,IAChB,IAAII,EAAYsc,EAAW/e,EAAQ0C,GAC/Byc,EAAejR,EAAQzL,GAC3BzC,EAAQyC,EACJH,GACFA,EAAS,CAAEF,SAAQrC,SAAUof,EAAczc,SAE9C,EACDQ,OAAOC,IACLb,EAAWa,EACJ,KACLb,EAAW,IAAI,GAMvB,gCEwaO,SAAsBwK,GAC3B,MAAMuS,EAAevS,EAAKhL,OACtBgL,EAAKhL,OACa,oBAAXA,OACPA,YACAuD,EACEia,OACoB,IAAjBD,QAC0B,IAA1BA,EAAatd,eAC2B,IAAxCsd,EAAatd,SAASwd,cACzBC,GAAYF,EAOlB,IAAI9a,EACJ,GANAnF,EACEyN,EAAKvI,OAAO2B,OAAS,EACrB,6DAIE4G,EAAKtI,mBACPA,EAAqBsI,EAAKtI,wBACrB,GAAIsI,EAAK2S,oBAAqB,CAEnC,IAAIA,EAAsB3S,EAAK2S,oBAC/Bjb,EAAsBI,IAAW,CAC/BsN,iBAAkBuN,EAAoB7a,IAE1C,MACEJ,EAAqByN,EAIvB,IAQIyN,EAoEAC,EAiEAC,EA7IAlb,EAA0B,CAAA,EAE1Bmb,EAAavb,EACfwI,EAAKvI,OACLC,OACAa,EACAX,GAGEc,EAAWsH,EAAKtH,UAAY,IAC5ByT,EAAmBnM,EAAKgT,uBAAyBnH,GACjDR,EAA8BrL,EAAKiT,iCAGnCrN,EAAoBlS,EAAA,CACtBwf,mBAAmB,EACnBC,wBAAwB,EACxBC,qBAAqB,EACrBC,oBAAoB,EACpBtU,sBAAsB,EACtBuU,gCAAgC,GAC7BtT,EAAK4F,QAGN2N,EAAuC,KAEvC/S,EAAc,IAAIjJ,IAIlBic,EAAmB,IAAIjc,IAEvBkc,EAAsD,KAEtDC,EAAkE,KAElEC,EAAsD,KAOtDC,EAA8C,MAAtB5T,EAAK6T,cAE7BC,EAAiBtb,EAAYua,EAAY/S,EAAK3K,QAAQpC,SAAUyF,GAChEqb,EAAkC,KAEtC,GAAsB,MAAlBD,IAA2BzI,EAA6B,CAG1D,IAAIvU,EAAQgQ,GAAuB,IAAK,CACtCnT,SAAUqM,EAAK3K,QAAQpC,SAASU,YAE9BkG,QAAEA,EAAO/B,MAAEA,GAAU2Y,GAAuBsC,GAChDe,EAAiBja,EACjBka,EAAgB,CAAE,CAACjc,EAAMG,IAAKnB,EAChC,CAQA,GAAIgd,IAAmB9T,EAAK6T,cAAe,CAC1BG,GACbF,EACAf,EACA/S,EAAK3K,QAAQpC,SAASU,UAEXsgB,SACXH,EAAiB,KAErB,CAGA,GAAKA,EAiBE,GAAIA,EAAe5X,MAAM+L,GAAMA,EAAEnQ,MAAMyR,OAG5CsJ,GAAc,OACT,GAAKiB,EAAe5X,MAAM+L,GAAMA,EAAEnQ,MAAM0R,SAGxC,GAAI5D,EAAOwN,oBAAqB,CAIrC,IAAIjZ,EAAa6F,EAAK6T,cAAgB7T,EAAK6T,cAAc1Z,WAAa,KAClEmP,EAAStJ,EAAK6T,cAAgB7T,EAAK6T,cAAcvK,OAAS,KAC1D4K,EAAsBjM,IAEnBA,EAAEnQ,MAAM0R,SAKe,mBAAnBvB,EAAEnQ,MAAM0R,SACY,IAA3BvB,EAAEnQ,MAAM0R,OAAOC,WAMdtP,QAAyC5B,IAA3B4B,EAAW8N,EAAEnQ,MAAMG,KACjCqR,QAAiC/Q,IAAvB+Q,EAAOrB,EAAEnQ,MAAMG,KAK9B,GAAIqR,EAAQ,CACV,IAAIhW,EAAMwgB,EAAe9L,WACtBC,QAA8B1P,IAAxB+Q,EAAQrB,EAAEnQ,MAAMG,MAEzB4a,EAAciB,EAAeza,MAAM,EAAG/F,EAAM,GAAGgG,MAAM4a,EACvD,MACErB,EAAciB,EAAexa,MAAM4a,EAEvC,MAGErB,EAAoC,MAAtB7S,EAAK6T,mBAtCnBhB,GAAc,OAhBd,GANAA,GAAc,EACdiB,EAAiB,GAKblO,EAAOwN,oBAAqB,CAC9B,IAAIe,EAAWH,GACb,KACAjB,EACA/S,EAAK3K,QAAQpC,SAASU,UAEpBwgB,EAASF,QAAUE,EAASta,UAC9Bia,EAAiBK,EAASta,QAE9B,CAiDF,IA0BIua,EA8EAC,EAxGAjhB,EAAqB,CACvBkhB,cAAetU,EAAK3K,QAAQC,OAC5BrC,SAAU+M,EAAK3K,QAAQpC,SACvB4G,QAASia,EACTjB,cACAtB,WAAYhN,EAEZgQ,sBAA6C,MAAtBvU,EAAK6T,eAAgC,KAC5DW,oBAAoB,EACpBC,aAAc,OACdta,WAAa6F,EAAK6T,eAAiB7T,EAAK6T,cAAc1Z,YAAe,CAAE,EACvEmW,WAAatQ,EAAK6T,eAAiB7T,EAAK6T,cAAcvD,YAAe,KACrEhH,OAAStJ,EAAK6T,eAAiB7T,EAAK6T,cAAcvK,QAAWyK,EAC7DnJ,SAAU,IAAI8J,IACdC,SAAU,IAAID,KAKZE,EAA+BC,EAActf,IAI7Cuf,GAA4B,EAM5BC,GAA+B,EAG/BC,EAAmD,IAAIN,IAMvDO,EAAmD,KAInDC,GAA8B,EAM9B7M,GAAyB,EAIzBC,EAAoC,GAIpCC,EAAqC,IAAIhR,IAGzC4d,GAAmB,IAAIT,IAGvBU,GAAqB,EAKrBC,IAA2B,EAG3BC,GAAiB,IAAIZ,IAGrBhM,GAAmB,IAAInR,IAGvBkR,GAAmB,IAAIiM,IAGvBa,GAAiB,IAAIb,IAIrBlM,GAAkB,IAAIjR,IAMtB4X,GAAkB,IAAIuF,IAItBc,GAAmB,IAAId,IAIvBe,GAAqB,IAAIf,IA2H7B,SAASgB,GACPC,EACAjP,QAGC,IAHDA,IAAAA,EAGI,CAAA,GAEJtT,EAAKM,EAAA,CAAA,EACAN,EACAuiB,GAKL,IAAIC,EAA8B,GAC9BC,EAAgC,GAEhCjQ,EAAOsN,mBACT9f,EAAMwX,SAAS7P,SAAQ,CAAC4P,EAAStX,KACT,SAAlBsX,EAAQvX,QACNoV,GAAgBiC,IAAIpX,GAEtBwiB,EAAoBnf,KAAKrD,GAIzBuiB,EAAkBlf,KAAKrD,GAE3B,IAOJ,IAAImN,GAAazF,SAASuH,GACxBA,EAAWlP,EAAO,CAChBoV,gBAAiBqN,EACjBC,4BAA6BpP,EAAKqP,mBAClCC,oBAAuC,IAAnBtP,EAAKuP,cAKzBrQ,EAAOsN,oBACT0C,EAAkB7a,SAAS1H,GAAQD,EAAMwX,SAAS1I,OAAO7O,KACzDwiB,EAAoB9a,SAAS1H,GAAQ6iB,GAAc7iB,KAEvD,CAOA,SAAS8iB,GACPljB,EACA0iB,EAA0ES,GAEpE,IAAAC,EAAAC,EAAA,IAaFhG,GAdJ2F,UAAEA,QAAoC,IAAAG,EAAG,CAAA,EAAEA,EAOvCG,EACkB,MAApBnjB,EAAMkd,YACyB,MAA/Bld,EAAMme,WAAW/M,YACjB4C,GAAiBhU,EAAMme,WAAW/M,aACP,YAA3BpR,EAAMme,WAAWne,QACe,KAAlB,OAAdijB,EAAApjB,EAASG,YAAK,EAAdijB,EAAgBG,aAKdlG,EAFAqF,EAASrF,WACPzT,OAAO4Z,KAAKd,EAASrF,YAAYlX,OAAS,EAC/Buc,EAASrF,WAGT,KAENiG,EAEInjB,EAAMkd,WAGN,KAIf,IAAInW,EAAawb,EAASxb,WACtB8V,GACE7c,EAAM+G,WACNwb,EAASxb,WACTwb,EAAS9b,SAAW,GACpB8b,EAASrM,QAEXlW,EAAM+G,WAINwa,EAAWvhB,EAAMuhB,SACjBA,EAAS9R,KAAO,IAClB8R,EAAW,IAAID,IAAIC,GACnBA,EAAS5Z,SAAQ,CAACqC,EAAGsF,IAAMiS,EAAShR,IAAIjB,EAAGqC,MAK7C,IAsBIgR,EAtBAvB,GAC4B,IAA9BM,GACgC,MAA/B1hB,EAAMme,WAAW/M,YAChB4C,GAAiBhU,EAAMme,WAAW/M,cACF,KAAhC8R,OAAAA,EAAArjB,EAASG,YAATkjB,EAAAA,EAAgBE,aAqBpB,GAlBI5D,IACFG,EAAaH,EACbA,OAAqBra,GAGnB2c,GAEON,IAAkBC,EAActf,MAEhCqf,IAAkBC,EAAcle,KACzCqJ,EAAK3K,QAAQqB,KAAKzD,EAAUA,EAASG,OAC5BwhB,IAAkBC,EAAc3d,SACzC8I,EAAK3K,QAAQY,QAAQhD,EAAUA,EAASG,QAMtCwhB,IAAkBC,EAActf,IAAK,CAEvC,IAAImhB,EAAa1B,EAAuBhT,IAAI5O,EAAMH,SAASU,UACvD+iB,GAAcA,EAAWjM,IAAIxX,EAASU,UACxCoiB,EAAqB,CACnBY,gBAAiBvjB,EAAMH,SACvBof,aAAcpf,GAEP+hB,EAAuBvK,IAAIxX,EAASU,YAG7CoiB,EAAqB,CACnBY,gBAAiB1jB,EACjBof,aAAcjf,EAAMH,UAGzB,MAAM,GAAI8hB,EAA8B,CAEvC,IAAI6B,EAAU5B,EAAuBhT,IAAI5O,EAAMH,SAASU,UACpDijB,EACFA,EAAQnV,IAAIxO,EAASU,WAErBijB,EAAU,IAAIrf,IAAY,CAACtE,EAASU,WACpCqhB,EAAuBrR,IAAIvQ,EAAMH,SAASU,SAAUijB,IAEtDb,EAAqB,CACnBY,gBAAiBvjB,EAAMH,SACvBof,aAAcpf,EAElB,CAEAyiB,GAAWhiB,EAAA,CAAA,EAEJiiB,EAAQ,CACXrF,aACAnW,aACAma,cAAeM,EACf3hB,WACA4f,aAAa,EACbtB,WAAYhN,EACZkQ,aAAc,OACdF,sBAAuBsC,GACrB5jB,EACA0iB,EAAS9b,SAAWzG,EAAMyG,SAE5B2a,qBACAG,aAEF,CACEoB,qBACAE,WAAyB,IAAdA,IAKfrB,EAAgBC,EAActf,IAC9Buf,GAA4B,EAC5BC,GAA+B,EAC/BG,GAA8B,EAC9B7M,GAAyB,EACzBC,EAA0B,EAC5B,CAwJA3F,eAAemU,GACbxC,EACArhB,EACAyT,GAgBA0N,GAA+BA,EAA4B3R,QAC3D2R,EAA8B,KAC9BQ,EAAgBN,EAChBY,GACoD,KAAjDxO,GAAQA,EAAKqQ,gCA+pDlB,SACE9jB,EACA4G,GAEA,GAAI4Z,GAAwBE,EAAmB,CAC7C,IAAItgB,EAAM2jB,GAAa/jB,EAAU4G,GACjC4Z,EAAqBpgB,GAAOsgB,GAC9B,CACF,CAnqDEsD,CAAmB7jB,EAAMH,SAAUG,EAAMyG,SACzCib,GAAkE,KAArCpO,GAAQA,EAAK8N,oBAE1CO,GAAuE,KAAvCrO,GAAQA,EAAKwQ,sBAE7C,IAAIvO,EAAciK,GAAsBG,EACpCoE,EAAoBzQ,GAAQA,EAAK0Q,mBACjCvd,EAAUrB,EAAYmQ,EAAa1V,EAAUyF,GAC7Cud,GAAyC,KAA5BvP,GAAQA,EAAKuP,WAE1B9B,EAAWH,GAAcna,EAAS8O,EAAa1V,EAASU,UAM5D,GALIwgB,EAASF,QAAUE,EAASta,UAC9BA,EAAUsa,EAASta,UAIhBA,EAAS,CACZ,IAAI/C,MAAEA,EAAKugB,gBAAEA,EAAevf,MAAEA,GAAUwf,GACtCrkB,EAASU,UAaX,YAXAwiB,GACEljB,EACA,CACE4G,QAASwd,EACTld,WAAY,CAAE,EACdmP,OAAQ,CACN,CAACxR,EAAMG,IAAKnB,IAGhB,CAAEmf,aAGN,CAQA,GACE7iB,EAAMyf,cACLxK,GA64HP,SAA0BpP,EAAaC,GACrC,GAAID,EAAEtF,WAAauF,EAAEvF,UAAYsF,EAAErF,SAAWsF,EAAEtF,OAC9C,OAAO,EAGT,GAAe,KAAXqF,EAAEpF,KAEJ,MAAkB,KAAXqF,EAAErF,KACJ,GAAIoF,EAAEpF,OAASqF,EAAErF,KAEtB,OAAO,EACF,GAAe,KAAXqF,EAAErF,KAEX,OAAO,EAKT,OAAO,CACT,CA/5HM0jB,CAAiBnkB,EAAMH,SAAUA,MAC/ByT,GAAQA,EAAKc,YAAcJ,GAAiBV,EAAKc,WAAWhD,aAG9D,YADA2R,GAAmBljB,EAAU,CAAE4G,WAAW,CAAEoc,cAK9C7B,EAA8B,IAAIpT,gBAClC,IAMI4H,EANAlD,EAAUsJ,GACZhP,EAAK3K,QACLpC,EACAmhB,EAA4BjT,OAC5BuF,GAAQA,EAAKc,YAIf,GAAId,GAAQA,EAAK6I,aAKf3G,EAAsB,CACpB8G,GAAoB7V,GAAS/B,MAAMG,GACnC,CAAEiI,KAAM7I,EAAWP,MAAOA,MAAO4P,EAAK6I,oBAEnC,GACL7I,GACAA,EAAKc,YACLJ,GAAiBV,EAAKc,WAAWhD,YACjC,CAEA,IAAIqE,QAyFRlG,eACE+C,EACAzS,EACAuU,EACA3N,EACA2d,EACA9Q,QAAgD,IAAhDA,IAAAA,EAAmD,CAAA,GAKnD,IA8CI9K,EA3CJ,GANA6b,KAIA/B,GAAY,CAAEnE,WADGE,GAAwBxe,EAAUuU,IACvB,CAAEyO,WAA8B,IAAnBvP,EAAKuP,YAE1CuB,EAAY,CACd,IAAIE,QAAuBC,GACzB9d,EACA5G,EAASU,SACT+R,EAAQvE,QAEV,GAA4B,YAAxBuW,EAAexX,KACjB,MAAO,CAAE0X,gBAAgB,GACpB,GAA4B,UAAxBF,EAAexX,KAAkB,CAC1C,IAAI4H,WAAEA,EAAUhR,MAAEA,GAAU+gB,GAC1B5kB,EAASU,SACT+jB,GAEF,MAAO,CACL7d,QAAS6d,EAAeI,eACxBlP,oBAAqB,CACnBd,EACA,CACE5H,KAAM7I,EAAWP,MACjBA,UAIR,CAAO,IAAK4gB,EAAe7d,QAAS,CAClC,IAAIwd,gBAAEA,EAAevgB,MAAEA,EAAKgB,MAAEA,GAAUwf,GACtCrkB,EAASU,UAEX,MAAO,CACLkG,QAASwd,EACTzO,oBAAqB,CACnB9Q,EAAMG,GACN,CACEiI,KAAM7I,EAAWP,MACjBA,UAIR,CACE+C,EAAU6d,EAAe7d,OAE7B,CAIA,IAAIke,EAAcjN,GAAejR,EAAS5G,GAE1C,GAAK8kB,EAAYjgB,MAAMxC,QAAWyiB,EAAYjgB,MAAMyR,KAS7C,CAWL,GAFA3N,SARoBoc,GAClB,SACA5kB,EACAsS,EACA,CAACqS,GACDle,EACA,OAEeke,EAAYjgB,MAAMG,IAE/ByN,EAAQvE,OAAOc,QACjB,MAAO,CAAE2V,gBAAgB,EAE7B,MAtBEhc,EAAS,CACPsE,KAAM7I,EAAWP,MACjBA,MAAOgQ,GAAuB,IAAK,CACjCf,OAAQL,EAAQK,OAChBpS,SAAUV,EAASU,SACnB6W,QAASuN,EAAYjgB,MAAMG,MAmBjC,GAAIuX,GAAiB5T,GAAS,CAC5B,IAAI3F,EACJ,GAAIyQ,GAAwB,MAAhBA,EAAKzQ,QACfA,EAAUyQ,EAAKzQ,YACV,CASLA,EALe2Y,GACbhT,EAAO8S,SAASjL,QAAQzB,IAAI,YAC5B,IAAI9L,IAAIwP,EAAQjP,KAChBiC,KAEqBtF,EAAMH,SAASU,SAAWP,EAAMH,SAASW,MAClE,CAKA,aAJMqkB,GAAwBvS,EAAS9J,GAAQ,EAAM,CACnD4L,aACAvR,YAEK,CAAE2hB,gBAAgB,EAC3B,CAEA,GAAIjI,GAAiB/T,GACnB,MAAMkL,GAAuB,IAAK,CAAE5G,KAAM,iBAG5C,GAAI4I,GAAclN,GAAS,CAGzB,IAAI6T,EAAgBC,GAAoB7V,EAASke,EAAYjgB,MAAMG,IAWnE,OAJ+B,KAA1ByO,GAAQA,EAAKzQ,WAChB2e,EAAgBC,EAAcle,MAGzB,CACLkD,UACA+O,oBAAqB,CAAC6G,EAAc3X,MAAMG,GAAI2D,GAElD,CAEA,MAAO,CACL/B,UACA+O,oBAAqB,CAACmP,EAAYjgB,MAAMG,GAAI2D,GAEhD,CAhO6Bsc,CACvBxS,EACAzS,EACAyT,EAAKc,WACL3N,EACAsa,EAASF,OACT,CAAEhe,QAASyQ,EAAKzQ,QAASggB,cAG3B,GAAIpN,EAAa+O,eACf,OAKF,GAAI/O,EAAaD,oBAAqB,CACpC,IAAK4B,EAAS5O,GAAUiN,EAAaD,oBACrC,GACEE,GAAclN,IACdoI,EAAqBpI,EAAO9E,QACJ,MAAxB8E,EAAO9E,MAAM0M,OAWb,OATA4Q,EAA8B,UAE9B+B,GAAmBljB,EAAU,CAC3B4G,QAASgP,EAAahP,QACtBM,WAAY,CAAE,EACdmP,OAAQ,CACNkB,CAACA,GAAU5O,EAAO9E,QAK1B,CAEA+C,EAAUgP,EAAahP,SAAWA,EAClC+O,EAAsBC,EAAaD,oBACnCuO,EAAoB3F,GAAqBve,EAAUyT,EAAKc,YACxDyO,GAAY,EAEZ9B,EAASF,QAAS,EAGlBvO,EAAUsJ,GACRhP,EAAK3K,QACLqQ,EAAQjP,IACRiP,EAAQvE,OAEZ,CAGA,IAAIyW,eACFA,EACA/d,QAASse,EAAche,WACvBA,EAAUmP,OACVA,SA6KJ3G,eACE+C,EACAzS,EACA4G,EACA2d,EACAJ,EACA5P,EACA4Q,EACAniB,EACAoiB,EACApC,EACArN,GAGA,IAAIuO,EACFC,GAAsB5F,GAAqBve,EAAUuU,GAInD8Q,EACF9Q,GACA4Q,GACA9G,GAA4B6F,GAQ1BoB,IACDrD,GACCtP,EAAOwN,qBAAwBiF,GAOnC,GAAIb,EAAY,CACd,GAAIe,EAA6B,CAC/B,IAAIjI,EAAakI,GAAqB5P,GACtC8M,GAAWhiB,EAAA,CAEP6d,WAAY4F,QACO5e,IAAf+X,EAA2B,CAAEA,cAAe,CAAE,GAEpD,CACE2F,aAGN,CAEA,IAAIyB,QAAuBC,GACzB9d,EACA5G,EAASU,SACT+R,EAAQvE,QAGV,GAA4B,YAAxBuW,EAAexX,KACjB,MAAO,CAAE0X,gBAAgB,GACpB,GAA4B,UAAxBF,EAAexX,KAAkB,CAC1C,IAAI4H,WAAEA,EAAUhR,MAAEA,GAAU+gB,GAC1B5kB,EAASU,SACT+jB,GAEF,MAAO,CACL7d,QAAS6d,EAAeI,eACxB3d,WAAY,CAAE,EACdmP,OAAQ,CACNxB,CAACA,GAAahR,GAGpB,CAAO,IAAK4gB,EAAe7d,QAAS,CAClC,IAAI/C,MAAEA,EAAKugB,gBAAEA,EAAevf,MAAEA,GAAUwf,GACtCrkB,EAASU,UAEX,MAAO,CACLkG,QAASwd,EACTld,WAAY,CAAE,EACdmP,OAAQ,CACN,CAACxR,EAAMG,IAAKnB,GAGlB,CACE+C,EAAU6d,EAAe7d,OAE7B,CAEA,IAAI8O,EAAciK,GAAsBG,GACnChH,EAAezB,GAAwBpC,GAC1ClI,EAAK3K,QACLjC,EACAyG,EACAye,EACArlB,EACA2S,EAAOwN,sBAA4C,IAArBiF,EAC9BzS,EAAO0N,+BACPjL,EACAC,EACAC,EACAC,GACAC,GACAC,GACAC,EACAjQ,EACAkQ,GAeF,GATA6P,IACGjO,KACG3Q,GAAWA,EAAQqC,MAAM+L,GAAMA,EAAEnQ,MAAMG,KAAOuS,MAC/CuB,GAAiBA,EAAc7P,MAAM+L,GAAMA,EAAEnQ,MAAMG,KAAOuS,MAG/D6K,KAA4BD,GAGC,IAAzBrJ,EAAc3S,QAAgD,IAAhCkR,EAAqBlR,OAAc,CACnE,IAAIsf,EAAkBC,KAgBtB,OAfAxC,GACEljB,EAAQS,EAAA,CAENmG,UACAM,WAAY,CAAE,EAEdmP,OACEV,GAAuBE,GAAcF,EAAoB,IACrD,CAAE,CAACA,EAAoB,IAAKA,EAAoB,GAAG9R,OACnD,MACHuZ,GAAuBzH,GACtB8P,EAAkB,CAAE9N,SAAU,IAAI8J,IAAIthB,EAAMwX,WAAc,CAAE,GAElE,CAAEqL,cAEG,CAAE2B,gBAAgB,EAC3B,CAEA,GAAIW,EAA6B,CAC/B,IAAIK,EAAgC,CAAA,EACpC,IAAKpB,EAAY,CAEfoB,EAAQrH,WAAa4F,EACrB,IAAI7G,EAAakI,GAAqB5P,QACnBrQ,IAAf+X,IACFsI,EAAQtI,WAAaA,EAEzB,CACIhG,EAAqBlR,OAAS,IAChCwf,EAAQhO,SAyId,SACEN,GAUA,OARAA,EAAqBvP,SAAS+U,IAC5B,IAAInF,EAAUvX,EAAMwX,SAAS5I,IAAI8N,EAAGzc,KAChCwlB,EAAsBnH,QACxBnZ,EACAoS,EAAUA,EAAQtQ,UAAO9B,GAE3BnF,EAAMwX,SAASjH,IAAImM,EAAGzc,IAAKwlB,EAAoB,IAE1C,IAAInE,IAAIthB,EAAMwX,SACvB,CArJyBkO,CAA+BxO,IAEpDoL,GAAYkD,EAAS,CAAE3C,aACzB,CAEA3L,EAAqBvP,SAAS+U,IACxBqF,GAAiB1K,IAAIqF,EAAGzc,MAC1B0lB,GAAajJ,EAAGzc,KAEdyc,EAAG/O,YAILoU,GAAiBxR,IAAImM,EAAGzc,IAAKyc,EAAG/O,WAClC,IAIF,IAAIiY,EAAiCA,IACnC1O,EAAqBvP,SAASwP,GAAMwO,GAAaxO,EAAElX,OACjD+gB,GACFA,EAA4BjT,OAAO7K,iBACjC,QACA0iB,GAIJ,IAAIC,cAAEA,EAAapJ,eAAEA,SACbqJ,GACJ9lB,EACAyG,EACAkS,EACAzB,EACA5E,GAGJ,GAAIA,EAAQvE,OAAOc,QACjB,MAAO,CAAE2V,gBAAgB,GAMvBxD,GACFA,EAA4BjT,OAAO5K,oBACjC,QACAyiB,GAGJ1O,EAAqBvP,SAAS+U,GAAOqF,GAAiBjT,OAAO4N,EAAGzc,OAGhE,IAAIkQ,EAAWqN,GAAaqI,GAC5B,GAAI1V,EAIF,aAHM0U,GAAwBvS,EAASnC,EAAS3H,QAAQ,EAAM,CAC5D3F,YAEK,CAAE2hB,gBAAgB,GAI3B,GADArU,EAAWqN,GAAaf,GACpBtM,EAQF,OAJAmF,GAAiBjH,IAAI8B,EAASlQ,WACxB4kB,GAAwBvS,EAASnC,EAAS3H,QAAQ,EAAM,CAC5D3F,YAEK,CAAE2hB,gBAAgB,GAI3B,IAAIzd,WAAEA,EAAUmP,OAAEA,GAAWsG,GAC3Bxc,EACAyG,EACAkS,EACAkN,EACArQ,EACA0B,EACAuF,EACAV,IAIFA,GAAgBpU,SAAQ,CAACyT,EAAchE,KACrCgE,EAAajM,WAAWN,KAIlBA,GAAWuM,EAAahN,OAC1B2N,GAAgBjN,OAAOsI,EACzB,GACA,IAIA5E,EAAOwN,qBAAuBiF,GAAoBjlB,EAAMkW,QAC1DzM,OAAOuE,QAAQhO,EAAMkW,QAClBnN,QAAOmF,IAAA,IAAErJ,GAAGqJ,EAAA,OAAMyK,EAAc7P,MAAM+L,GAAMA,EAAEnQ,MAAMG,KAAOA,GAAG,IAC9D8C,SAAQgI,IAAsB,IAApByH,EAAS1T,GAAMiM,EACxBuG,EAASzM,OAAO5F,OAAOqS,GAAU,CAAA,EAAI,CAAEkB,CAACA,GAAU1T,GAAQ,IAIhE,IAAI4hB,EAAkBC,KAClBQ,EAAqBC,GAAqB/D,IAC1CgE,EACFX,GAAmBS,GAAsB7O,EAAqBlR,OAAS,EAEzE,OAAA1F,EAAA,CACEmG,UACAM,aACAmP,UACI+P,EAAuB,CAAEzO,SAAU,IAAI8J,IAAIthB,EAAMwX,WAAc,CAAE,EAEzE,CAxbY0O,CACR5T,EACAzS,EACA4G,EACAsa,EAASF,OACTkD,EACAzQ,GAAQA,EAAKc,WACbd,GAAQA,EAAK0R,kBACb1R,GAAQA,EAAKzQ,QACbyQ,IAAkC,IAA1BA,EAAK2R,iBACbpC,EACArN,GAGEgP,IAOJxD,EAA8B,KAE9B+B,GAAmBljB,EAAQS,EAAA,CACzBmG,QAASse,GAAkBte,GACxBwW,GAAuBzH,GAAoB,CAC9CzO,aACAmP,YAEJ,CA6ZA,SAASkP,GACP5P,GAEA,OAAIA,IAAwBE,GAAcF,EAAoB,IAIrD,CACL,CAACA,EAAoB,IAAKA,EAAoB,GAAGvO,MAE1CjH,EAAMkd,WAC8B,IAAzCzT,OAAO4Z,KAAKrjB,EAAMkd,YAAYlX,OACzB,KAEAhG,EAAMkd,gBAJV,CAOT,CA8iBA3N,eAAesV,GACbvS,EACAnC,EACAgW,EAAqBC,GAUrB,IATAhS,WACEA,EAAU4Q,kBACVA,EAAiBniB,QACjBA,QAKD,IAAAujB,EAAG,CAAA,EAAEA,EAEFjW,EAASmL,SAASjL,QAAQgH,IAAI,wBAChCpC,GAAyB,GAG3B,IAAIpV,EAAWsQ,EAASmL,SAASjL,QAAQzB,IAAI,YAC7CzP,EAAUU,EAAU,uDACpBA,EAAW2b,GACT3b,EACA,IAAIiD,IAAIwP,EAAQjP,KAChBiC,GAEF,IAAI+gB,EAAmBlmB,EAAeH,EAAMH,SAAUA,EAAU,CAC9DujB,aAAa,IAGf,GAAIhE,EAAW,CACb,IAAIkH,GAAmB,EAEvB,GAAInW,EAASmL,SAASjL,QAAQgH,IAAI,2BAEhCiP,GAAmB,OACd,GAAIxU,EAAmB5I,KAAKrJ,GAAW,CAC5C,MAAMwD,EAAMuJ,EAAK3K,QAAQQ,UAAU5C,GACnCymB,EAEEjjB,EAAIV,SAAWwc,EAAatf,SAAS8C,QAEI,MAAzC8C,EAAcpC,EAAI9C,SAAU+E,EAChC,CAEA,GAAIghB,EAMF,YALIzjB,EACFsc,EAAatf,SAASgD,QAAQhD,GAE9Bsf,EAAatf,SAASgE,OAAOhE,GAInC,CAIAmhB,EAA8B,KAE9B,IAAIuF,GACU,IAAZ1jB,GAAoBsN,EAASmL,SAASjL,QAAQgH,IAAI,mBAC9CoK,EAAc3d,QACd2d,EAAcle,MAIhB6N,WAAEA,EAAUC,WAAEA,EAAUC,YAAEA,GAAgBtR,EAAMme,YAEjD/J,IACA4Q,GACD5T,GACAC,GACAC,IAEA8C,EAAa8J,GAA4Ble,EAAMme,aAMjD,IAAI+G,EAAmB9Q,GAAc4Q,EACrC,GACE9T,EAAkCmG,IAAIlH,EAASmL,SAASlL,SACxD8U,GACAlR,GAAiBkR,EAAiB9T,kBAE5BsS,GAAgB6C,EAAuBF,EAAkB,CAC7DjS,WAAU9T,EAAA,CAAA,EACL4kB,EAAgB,CACnB7T,WAAYxR,IAGduhB,mBAAoBM,EACpBoC,qBAAsBqC,EAClBxE,OACAxc,QAED,CAGL,IAAI6e,EAAqB5F,GACvBiI,EACAjS,SAEIsP,GAAgB6C,EAAuBF,EAAkB,CAC7DrC,qBAEAgB,oBAEA5D,mBAAoBM,EACpBoC,qBAAsBqC,EAClBxE,OACAxc,GAER,CACF,CAIAoK,eAAeqV,GACb9X,EACA9M,EACAsS,EACAqG,EACAlS,EACAuS,GAEA,IAAIsB,EACAkM,EAA0C,CAAA,EAC9C,IACElM,QAAgBxB,GACdC,EACAjM,EACA9M,EACAsS,EACAqG,EACAlS,EACAuS,EACAxU,EACAF,EAYJ,CAVE,MAAO3E,GASP,OANAgZ,EAAchR,SAASkN,IACrB2R,EAAY3R,EAAEnQ,MAAMG,IAAM,CACxBiI,KAAM7I,EAAWP,MACjBA,MAAO/D,EACR,IAEI6mB,CACT,CAEA,IAAK,IAAKpP,EAAS5O,KAAWiB,OAAOuE,QAAQsM,GAC3C,GAAImD,GAAmCjV,GAAS,CAC9C,IAAI8S,EAAW9S,EAAOA,OACtBge,EAAYpP,GAAW,CACrBtK,KAAM7I,EAAWkM,SACjBmL,SAAUD,GACRC,EACAhJ,EACA8E,EACA3Q,EACAnB,EACAkN,EAAO7G,sBAGb,MACE6a,EAAYpP,SAAiBmD,GAC3B/R,GAKN,OAAOge,CACT,CAEAjX,eAAeuW,GACb9lB,EACAyG,EACAkS,EACA8N,EACAnU,GAEA,IAAIsL,EAAiB5d,EAAMyG,QAGvBigB,EAAuB9B,GACzB,SACA5kB,EACAsS,EACAqG,EACAlS,EACA,MAGEkgB,EAAwBlZ,QAAQoL,IAClC4N,EAAehiB,KAAI8K,UACjB,GAAI4H,EAAE1Q,SAAW0Q,EAAErQ,OAASqQ,EAAExJ,WAAY,CACxC,IAQInF,SARgBoc,GAClB,SACA5kB,EACA4b,GAAwBhP,EAAK3K,QAASkV,EAAEjW,KAAMiW,EAAExJ,WAAWI,QAC3D,CAACoJ,EAAErQ,OACHqQ,EAAE1Q,QACF0Q,EAAElX,MAEiBkX,EAAErQ,MAAMpC,MAAMG,IAEnC,MAAO,CAAE,CAACsS,EAAElX,KAAMuI,EACpB,CACE,OAAOiF,QAAQ+B,QAAQ,CACrB,CAAC2H,EAAElX,KAAM,CACP6M,KAAM7I,EAAWP,MACjBA,MAAOgQ,GAAuB,IAAK,CACjCnT,SAAU4W,EAAEjW,SAIpB,KAIA2kB,QAAsBa,EACtBjK,SAAwBkK,GAAuB3d,QACjD,CAACiF,EAAKP,IAAMjE,OAAO5F,OAAOoK,EAAKP,IAC/B,CACF,GAaA,aAXMD,QAAQoL,IAAI,CAChB8E,GACElX,EACAof,EACAvT,EAAQvE,OACR6P,EACA5d,EAAM+G,YAERgX,GAA8BtX,EAASgW,EAAgBgK,KAGlD,CACLZ,gBACApJ,iBAEJ,CAEA,SAAS4H,KAEPpP,GAAyB,EAIzBC,EAAwB5R,QAAQ+hB,MAGhChQ,GAAiB1N,SAAQ,CAACqC,EAAG/J,KACvB8hB,GAAiB1K,IAAIpX,KACvBkV,EAAsB9G,IAAIpO,GAC1B0lB,GAAa1lB,GACf,GAEJ,CAEA,SAAS2mB,GACP3mB,EACAsX,EACAjE,QAA6B,IAA7BA,IAAAA,EAAgC,CAAA,GAEhCtT,EAAMwX,SAASjH,IAAItQ,EAAKsX,GACxB+K,GACE,CAAE9K,SAAU,IAAI8J,IAAIthB,EAAMwX,WAC1B,CAAEqL,WAAwC,KAA5BvP,GAAQA,EAAKuP,YAE/B,CAEA,SAASgE,GACP5mB,EACAmX,EACA1T,EACA4P,QAA6B,IAA7BA,IAAAA,EAAgC,CAAA,GAEhC,IAAI+I,EAAgBC,GAAoBtc,EAAMyG,QAAS2Q,GACvD0L,GAAc7iB,GACdqiB,GACE,CACEpM,OAAQ,CACN,CAACmG,EAAc3X,MAAMG,IAAKnB,GAE5B8T,SAAU,IAAI8J,IAAIthB,EAAMwX,WAE1B,CAAEqL,WAAwC,KAA5BvP,GAAQA,EAAKuP,YAE/B,CAEA,SAASiE,GAAwB7mB,GAS/B,OARIuS,EAAOsN,oBACTqC,GAAe5R,IAAItQ,GAAMkiB,GAAevT,IAAI3O,IAAQ,GAAK,GAGrDmV,GAAgBiC,IAAIpX,IACtBmV,GAAgBtG,OAAO7O,IAGpBD,EAAMwX,SAAS5I,IAAI3O,IAAQyR,CACpC,CAEA,SAASoR,GAAc7iB,GACrB,IAAIsX,EAAUvX,EAAMwX,SAAS5I,IAAI3O,IAK/B8hB,GAAiB1K,IAAIpX,IACnBsX,GAA6B,YAAlBA,EAAQvX,OAAuBkiB,GAAe7K,IAAIpX,IAE/D0lB,GAAa1lB,GAEfoV,GAAiBvG,OAAO7O,GACxBiiB,GAAepT,OAAO7O,GACtBqV,GAAiBxG,OAAO7O,GACxBmV,GAAgBtG,OAAO7O,GACvBkV,EAAsBrG,OAAO7O,GAC7BD,EAAMwX,SAAS1I,OAAO7O,EACxB,CAiBA,SAAS0lB,GAAa1lB,GACpB,IAAI0N,EAAaoU,GAAiBnT,IAAI3O,GACtCd,EAAUwO,EAA0C1N,8BAAAA,GACpD0N,EAAW0B,QACX0S,GAAiBjT,OAAO7O,EAC1B,CAEA,SAAS8mB,GAAiB1D,GACxB,IAAK,IAAIpjB,KAAOojB,EAAM,CACpB,IACI1G,EAAcC,GADJkK,GAAW7mB,GACgBgH,MACzCjH,EAAMwX,SAASjH,IAAItQ,EAAK0c,EAC1B,CACF,CAEA,SAAS4I,KACP,IAAIyB,EAAW,GACX1B,GAAkB,EACtB,IAAK,IAAIrlB,KAAOqV,GAAkB,CAChC,IAAIiC,EAAUvX,EAAMwX,SAAS5I,IAAI3O,GACjCd,EAAUoY,EAA8BtX,qBAAAA,GAClB,YAAlBsX,EAAQvX,QACVsV,GAAiBxG,OAAO7O,GACxB+mB,EAAS1jB,KAAKrD,GACdqlB,GAAkB,EAEtB,CAEA,OADAyB,GAAiBC,GACV1B,CACT,CAEA,SAASU,GAAqBiB,GAC5B,IAAIC,EAAa,GACjB,IAAK,IAAKjnB,EAAK4E,KAAOqd,GACpB,GAAIrd,EAAKoiB,EAAU,CACjB,IAAI1P,EAAUvX,EAAMwX,SAAS5I,IAAI3O,GACjCd,EAAUoY,EAA8BtX,qBAAAA,GAClB,YAAlBsX,EAAQvX,QACV2lB,GAAa1lB,GACbiiB,GAAepT,OAAO7O,GACtBinB,EAAW5jB,KAAKrD,GAEpB,CAGF,OADA8mB,GAAiBG,GACVA,EAAWlhB,OAAS,CAC7B,CAYA,SAASmhB,GAAclnB,GACrBD,EAAMuhB,SAASzS,OAAO7O,GACtBmiB,GAAiBtT,OAAO7O,EAC1B,CAGA,SAASmnB,GAAcnnB,EAAaonB,GAClC,IAAIC,EAAUtnB,EAAMuhB,SAAS3S,IAAI3O,IAAQ0R,EAIzCxS,EACqB,cAAlBmoB,EAAQtnB,OAA8C,YAArBqnB,EAAWrnB,OACxB,YAAlBsnB,EAAQtnB,OAA4C,YAArBqnB,EAAWrnB,OACxB,YAAlBsnB,EAAQtnB,OAA4C,eAArBqnB,EAAWrnB,OACxB,YAAlBsnB,EAAQtnB,OAA4C,cAArBqnB,EAAWrnB,OACxB,eAAlBsnB,EAAQtnB,OAA+C,cAArBqnB,EAAWrnB,MAAsB,qCACjCsnB,EAAQtnB,MAAK,OAAOqnB,EAAWrnB,OAGtE,IAAIuhB,EAAW,IAAID,IAAIthB,EAAMuhB,UAC7BA,EAAShR,IAAItQ,EAAKonB,GAClB/E,GAAY,CAAEf,YAChB,CAEA,SAASgG,GAAqBC,GAQP,IARQjE,gBAC7BA,EAAetE,aACfA,EAAYiC,cACZA,GAKDsG,EACC,GAA8B,IAA1BpF,GAAiB3S,KACnB,OAKE2S,GAAiB3S,KAAO,GAC1BlQ,GAAQ,EAAO,gDAGjB,IAAIyO,EAAUV,MAAMpB,KAAKkW,GAAiBpU,YACrCyZ,EAAYC,GAAmB1Z,EAAQA,EAAQhI,OAAS,GACzDshB,EAAUtnB,EAAMuhB,SAAS3S,IAAI6Y,GAEjC,OAAIH,GAA6B,eAAlBA,EAAQtnB,WAAvB,EAQI0nB,EAAgB,CAAEnE,kBAAiBtE,eAAciC,kBAC5CuG,OADT,CAGF,CAEA,SAASvD,GAAsB3jB,GAC7B,IAAImD,EAAQgQ,GAAuB,IAAK,CAAEnT,aACtCgV,EAAciK,GAAsBG,GACpClZ,QAAEA,EAAO/B,MAAEA,GAAU2Y,GAAuB9H,GAKhD,OAFA8P,KAEO,CAAEpB,gBAAiBxd,EAAS/B,QAAOhB,QAC5C,CAEA,SAAS+gB,GACPlkB,EACA+jB,GAEA,MAAO,CACL5P,WAAY4H,GAAoBgI,EAAeI,gBAAgBhgB,MAAMG,GACrEnB,MAAOgQ,GAAuB,IAAK,CACjC5G,KAAM,kBACNvM,WACAlB,QAC0B,MAAxBilB,EAAe5gB,OAAiB,YAAa4gB,EAAe5gB,MACxD4gB,EAAe5gB,MACfkB,OAAO0f,EAAe5gB,SAGlC,CAEA,SAAS2hB,GACPsC,GAEA,IAAIC,EAA8B,GAWlC,OAVA7L,GAAgBpU,SAAQ,CAACkgB,EAAKzQ,KACvBuQ,IAAaA,EAAUvQ,KAI1ByQ,EAAIzY,SACJwY,EAAkBtkB,KAAK8T,GACvB2E,GAAgBjN,OAAOsI,GACzB,IAEKwQ,CACT,CA+BA,SAAShE,GAAa/jB,EAAoB4G,GACxC,GAAI6Z,EAAyB,CAK3B,OAJUA,EACRzgB,EACA4G,EAAQhC,KAAKoQ,GAAMhO,EAA2BgO,EAAG7U,EAAM+G,gBAE3ClH,EAASI,GACzB,CACA,OAAOJ,EAASI,GAClB,CAYA,SAASwjB,GACP5jB,EACA4G,GAEA,GAAI4Z,EAAsB,CACxB,IAAIpgB,EAAM2jB,GAAa/jB,EAAU4G,GAC7BqhB,EAAIzH,EAAqBpgB,GAC7B,GAAiB,iBAAN6nB,EACT,OAAOA,CAEX,CACA,OAAO,IACT,CAEA,SAASlH,GACPna,EACA8O,EACAhV,GAEA,GAAI0X,EAA6B,CAI/B,GAAImI,EAAiB/I,IAAI9W,GACvB,MAAO,CAAEsgB,QAAQ,EAAOpa,WAG1B,IAAKA,EAAS,CAQZ,MAAO,CAAEoa,QAAQ,EAAMpa,QAPNlB,EACfgQ,EACAhV,EACA+E,GACA,IAG4C,GAChD,CACE,GAAImE,OAAO4Z,KAAK5c,EAAQ,GAAGO,QAAQhB,OAAS,EAAG,CAU7C,MAAO,CAAE6a,QAAQ,EAAMpa,QANFlB,EACnBgQ,EACAhV,EACA+E,GACA,GAGJ,CAEJ,CAEA,MAAO,CAAEub,QAAQ,EAAOpa,QAAS,KACnC,CAiBA8I,eAAegV,GACb9d,EACAlG,EACAwN,GAEA,IAAI2W,EAAkDje,EACtD,OAAa,CACX,IAAIshB,EAAiC,MAAtBvI,EACXjK,EAAciK,GAAsBG,EACxC,UACQ3H,GACJC,EACA1X,EACAmkB,EACAnP,EACA/Q,EACAF,EACA+d,GACAtU,EAcJ,CAZE,MAAOpO,GACP,MAAO,CAAEmN,KAAM,QAASpJ,MAAO/D,EAAG+kB,iBACpC,CAAU,QAOJqD,IACFpI,EAAa,IAAIA,GAErB,CAEA,GAAI5R,EAAOc,QACT,MAAO,CAAE/B,KAAM,WAGjB,IAAIkb,EAAa5iB,EAAYmQ,EAAahV,EAAU+E,GACpD,GAAI0iB,EAEF,OADAC,GAAe1nB,EAAU6f,GAClB,CAAEtT,KAAM,UAAWrG,QAASuhB,GAGrC,IAAIE,EAAoB3iB,EACtBgQ,EACAhV,EACA+E,GACA,GAIF,IACG4iB,GACAxD,EAAe1e,SAAWkiB,EAAkBliB,QAC3C0e,EAAexe,OACb,CAAC2O,EAAG1O,IAAM0O,EAAEnQ,MAAMG,KAAOqjB,EAAmB/hB,GAAGzB,MAAMG,KAIzD,OADAojB,GAAe1nB,EAAU6f,GAClB,CAAEtT,KAAM,UAAWrG,QAAS,MAGrCie,EAAiBwD,CACnB,CACF,CAEA,SAASD,GAAe/mB,EAAcinB,GACpC,GAAIA,EAAM1Y,MAj/EkB,IAi/Ee,CACzC,IAAIvH,EAAQigB,EAAMC,SAASC,OAAOjpB,MAClC+oB,EAAMrZ,OAAO5G,EACf,CACAigB,EAAM9Z,IAAInN,EACZ,CA4EA,OAvCAwe,EAAS,CACHpa,eACF,OAAOA,CACR,EACGkN,aACF,OAAOA,CACR,EACGxS,YACF,OAAOA,CACR,EACGqE,aACF,OAAOsb,CACR,EACG/d,aACF,OAAOud,CACR,EACDmJ,WA70EF,WAiEE,GA9DAnI,EAAkBvT,EAAK3K,QAAQe,QAC7BhC,IAAgD,IAA7CkB,OAAQgf,EAAarhB,SAAEA,EAAQ2C,MAAEA,GAAOxB,EAGzC,GAAIigB,EAGF,OAFAA,SACAA,OAA8B9b,GAIhC5F,EAC4B,IAA1B6iB,GAAiB3S,MAAuB,MAATjN,EAC/B,8YAQF,IAAIilB,EAAaF,GAAsB,CACrChE,gBAAiBvjB,EAAMH,SACvBof,aAAcpf,EACdqhB,kBAGF,GAAIuG,GAAuB,MAATjlB,EAAe,CAE/B,IAAI+lB,EAA2B,IAAI9a,SAAe+B,IAChDyR,EAA8BzR,CAAO,IA0BvC,OAxBA5C,EAAK3K,QAAQ8B,IAAY,EAATvB,QAGhB4kB,GAAcK,EAAY,CACxBznB,MAAO,UACPH,WACA+R,UACEwV,GAAcK,EAAa,CACzBznB,MAAO,aACP4R,aAASzM,EACT0M,WAAO1M,EACPtF,aAKF0oB,EAAyB/Z,MAAK,IAAM5B,EAAK3K,QAAQ8B,GAAGvB,IACrD,EACDqP,QACE,IAAI0P,EAAW,IAAID,IAAIthB,EAAMuhB,UAC7BA,EAAShR,IAAIkX,EAAa9V,GAC1B2Q,GAAY,CAAEf,YAChB,GAGJ,CAEA,OAAOmC,GAAgBxC,EAAerhB,EAAS,IAI/Cuf,EAAW,EA2tJnB,SACEoJ,EACAC,GAEA,IACE,IAAIC,EAAmBF,EAAQG,eAAeC,QAC5C1W,GAEF,GAAIwW,EAAkB,CACpB,IAAIlX,EAAOjG,KAAK8I,MAAMqU,GACtB,IAAK,IAAKpZ,EAAG/E,KAAMd,OAAOuE,QAAQwD,GAAQ,CAAA,GACpCjH,GAAK+C,MAAMC,QAAQhD,IACrBke,EAAYlY,IAAIjB,EAAG,IAAInL,IAAIoG,GAAK,IAGtC,CAEA,CADA,MAAO5K,GACP,CAEJ,CA3uJMkpB,CAA0B1J,EAAcyC,GACxC,IAAIkH,EAA0BA,IA4uJpC,SACEN,EACAC,GAEA,GAAIA,EAAYhZ,KAAO,EAAG,CACxB,IAAI+B,EAAiC,CAAA,EACrC,IAAK,IAAKlC,EAAG/E,KAAMke,EACjBjX,EAAKlC,GAAK,IAAI/E,GAEhB,IACEie,EAAQG,eAAeI,QACrB7W,EACA3G,KAAKC,UAAUgG,GAOnB,CALE,MAAO9N,GACPnE,GACE,EAC8DmE,8DAAAA,OAElE,CACF,CACF,CAhwJQslB,CAA0B7J,EAAcyC,GAC1CzC,EAAajc,iBAAiB,WAAY4lB,GAC1CjH,EAA8BA,IAC5B1C,EAAahc,oBAAoB,WAAY2lB,EACjD,CAaA,OANK9oB,EAAMyf,aACTiE,GAAgBjC,EAActf,IAAKnC,EAAMH,SAAU,CACjDolB,kBAAkB,IAIfvF,CACT,EAsvEEvQ,UAruEF,SAAmBlM,GAEjB,OADAmK,EAAYiB,IAAIpL,GACT,IAAMmK,EAAY0B,OAAO7L,EAClC,EAmuEEgmB,wBAtPF,SACEC,EACAC,EACAC,GASA,GAPA/I,EAAuB6I,EACvB3I,EAAoB4I,EACpB7I,EAA0B8I,GAAU,MAK/B5I,GAAyBxgB,EAAMme,aAAehN,EAAiB,CAClEqP,GAAwB,EACxB,IAAIsH,EAAIrE,GAAuBzjB,EAAMH,SAAUG,EAAMyG,SAC5C,MAALqhB,GACFxF,GAAY,CAAEnB,sBAAuB2G,GAEzC,CAEA,MAAO,KACLzH,EAAuB,KACvBE,EAAoB,KACpBD,EAA0B,IAAI,CAElC,EA8NE+I,SA3hEF9Z,eAAe8Z,EACbhpB,EACAiT,GAEA,GAAkB,iBAAPjT,EAET,YADAuM,EAAK3K,QAAQ8B,GAAG1D,GAIlB,IAAIipB,EAAiB1W,GACnB5S,EAAMH,SACNG,EAAMyG,QACNnB,EACAkN,EAAOyN,mBACP5f,EACAmS,EAAO7G,qBACP2H,MAAAA,OAAAA,EAAAA,EAAMR,YACF,MAAJQ,OAAI,EAAJA,EAAMP,WAEJ7R,KAAEA,EAAIkT,WAAEA,EAAU1Q,MAAEA,GAAUyP,GAChCX,EAAOuN,wBACP,EACAuJ,EACAhW,GAGEiQ,EAAkBvjB,EAAMH,SACxBof,EAAe9e,EAAeH,EAAMH,SAAUqB,EAAMoS,GAAQA,EAAKtT,OAOrEif,EAAY3e,EACP2e,CAAAA,EAAAA,EACArS,EAAK3K,QAAQmB,eAAe6b,IAGjC,IAAIsK,EAAcjW,GAAwB,MAAhBA,EAAKzQ,QAAkByQ,EAAKzQ,aAAUsC,EAE5D+b,EAAgBO,EAAcle,MAEd,IAAhBgmB,EACFrI,EAAgBO,EAAc3d,SACL,IAAhBylB,GAGK,MAAdnV,GACAJ,GAAiBI,EAAWhD,aAC5BgD,EAAW/C,aAAerR,EAAMH,SAASU,SAAWP,EAAMH,SAASW,SAMnE0gB,EAAgBO,EAAc3d,SAGhC,IAAIsd,EACF9N,GAAQ,uBAAwBA,GACA,IAA5BA,EAAK8N,wBACLjc,EAEF0d,GAAkD,KAArCvP,GAAQA,EAAKsP,oBAE1B6E,EAAaF,GAAsB,CACrChE,kBACAtE,eACAiC,kBAGF,IAAIuG,EAwBJ,aAAa/D,GAAgBxC,EAAejC,EAAc,CACxD7K,aAGA+H,aAAczY,EACd0d,qBACAve,QAASyQ,GAAQA,EAAKzQ,QACtBihB,qBAAsBxQ,GAAQA,EAAKkW,wBACnC3G,cA9BAuE,GAAcK,EAAY,CACxBznB,MAAO,UACPH,SAAUof,EACVrN,UACEwV,GAAcK,EAAa,CACzBznB,MAAO,aACP4R,aAASzM,EACT0M,WAAO1M,EACPtF,SAAUof,IAGZoK,EAAShpB,EAAIiT,EACd,EACDzB,QACE,IAAI0P,EAAW,IAAID,IAAIthB,EAAMuhB,UAC7BA,EAAShR,IAAIkX,EAAa9V,GAC1B2Q,GAAY,CAAEf,YAChB,GAeN,EAk7DEkI,MA9wCF,SACExpB,EACAmX,EACAxU,EACA0Q,GAEA,GAAIgM,EACF,MAAM,IAAIhgB,MACR,oMAMAyiB,GAAiB1K,IAAIpX,IAAM0lB,GAAa1lB,GAC5C,IAAI4iB,GAAkD,KAArCvP,GAAQA,EAAKsP,oBAE1BrN,EAAciK,GAAsBG,EACpC2J,EAAiB1W,GACnB5S,EAAMH,SACNG,EAAMyG,QACNnB,EACAkN,EAAOyN,mBACPrd,EACA4P,EAAO7G,qBACPyL,EACI,MAAJ9D,OAAI,EAAJA,EAAMP,UAEJtM,EAAUrB,EAAYmQ,EAAa+T,EAAgBhkB,GAEnDyb,EAAWH,GAAcna,EAAS8O,EAAa+T,GAKnD,GAJIvI,EAASF,QAAUE,EAASta,UAC9BA,EAAUsa,EAASta,UAGhBA,EAOH,YANAogB,GACE5mB,EACAmX,EACA1D,GAAuB,IAAK,CAAEnT,SAAU+oB,IACxC,CAAEzG,cAKN,IAAI3hB,KAAEA,EAAIkT,WAAEA,EAAU1Q,MAAEA,GAAUyP,GAChCX,EAAOuN,wBACP,EACAuJ,EACAhW,GAGF,GAAI5P,EAEF,YADAmjB,GAAgB5mB,EAAKmX,EAAS1T,EAAO,CAAEmf,cAIzC,IAAI/b,EAAQ4Q,GAAejR,EAASvF,GAEpCwgB,GAAkE,KAArCpO,GAAQA,EAAK8N,oBAEtChN,GAAcJ,GAAiBI,EAAWhD,YA+BhD7B,eACEtP,EACAmX,EACAlW,EACA4F,EACA4iB,EACAtF,EACAvB,EACAzO,GAKA,SAASuV,EAAwB9U,GAC/B,IAAKA,EAAEnQ,MAAMxC,SAAW2S,EAAEnQ,MAAMyR,KAAM,CACpC,IAAIzS,EAAQgQ,GAAuB,IAAK,CACtCf,OAAQyB,EAAWhD,WACnB7Q,SAAUW,EACVkW,QAASA,IAGX,OADAyP,GAAgB5mB,EAAKmX,EAAS1T,EAAO,CAAEmf,eAChC,CACT,CACA,OAAO,CACT,CAEA,GAhBAwB,KACAhP,GAAiBvG,OAAO7O,IAenBmkB,GAAcuF,EAAwB7iB,GACzC,OAIF,IAAI8iB,EAAkB5pB,EAAMwX,SAAS5I,IAAI3O,GACzC2mB,GAAmB3mB,EA8jHvB,SACEmU,EACAwV,GAYA,MAV2C,CACzC5pB,MAAO,aACPoR,WAAYgD,EAAWhD,WACvBC,WAAY+C,EAAW/C,WACvBC,YAAa8C,EAAW9C,YACxBC,SAAU6C,EAAW7C,SACrBC,KAAM4C,EAAW5C,KACjBC,KAAM2C,EAAW3C,KACjBxK,KAAM2iB,EAAkBA,EAAgB3iB,UAAO9B,EAGnD,CA7kH4B0kB,CAAqBzV,EAAYwV,GAAkB,CACzE/G,cAGF,IAAIiH,EAAkB,IAAIlc,gBACtBmc,EAAenO,GACjBhP,EAAK3K,QACLf,EACA4oB,EAAgB/b,OAChBqG,GAGF,GAAIgQ,EAAY,CACd,IAAIE,QAAuBC,GACzBmF,EACAxoB,EACA6oB,EAAahc,QAGf,GAA4B,YAAxBuW,EAAexX,KACjB,OACK,GAA4B,UAAxBwX,EAAexX,KAAkB,CAC1C,IAAIpJ,MAAEA,GAAU+gB,GAAyBvjB,EAAMojB,GAE/C,YADAuC,GAAgB5mB,EAAKmX,EAAS1T,EAAO,CAAEmf,aAEzC,CAAO,IAAKyB,EAAe7d,QAOzB,YANAogB,GACE5mB,EACAmX,EACA1D,GAAuB,IAAK,CAAEnT,SAAUW,IACxC,CAAE2hB,cAOJ,GAAI8G,EAFJ7iB,EAAQ4Q,GADRgS,EAAiBpF,EAAe7d,QACOvF,IAGrC,MAGN,CAGA6gB,GAAiBxR,IAAItQ,EAAK6pB,GAE1B,IAAIE,EAAoBhI,GASpBvM,SARsBmP,GACxB,SACA5kB,EACA+pB,EACA,CAACjjB,GACD4iB,EACAzpB,IAE+B6G,EAAMpC,MAAMG,IAE7C,GAAIklB,EAAahc,OAAOc,QAMtB,YAHIkT,GAAiBnT,IAAI3O,KAAS6pB,GAChC/H,GAAiBjT,OAAO7O,IAQ5B,GAAIuS,EAAOsN,mBAAqB1K,GAAgBiC,IAAIpX,IAClD,GAAImc,GAAiB3G,IAAiBC,GAAcD,GAElD,YADAmR,GAAmB3mB,EAAK2c,QAAezX,QAIpC,CACL,GAAIiX,GAAiB3G,GAEnB,OADAsM,GAAiBjT,OAAO7O,GACpBgiB,GAA0B+H,OAK5BpD,GAAmB3mB,EAAK2c,QAAezX,KAGvCmQ,GAAiBjH,IAAIpO,GACrB2mB,GAAmB3mB,EAAKqe,GAAkBlK,IACnCyQ,GAAwBkF,EAActU,GAAc,EAAO,CAChEuP,kBAAmB5Q,KAMzB,GAAIsB,GAAcD,GAEhB,YADAoR,GAAgB5mB,EAAKmX,EAAS3B,EAAa/R,MAG/C,CAEA,GAAI6Y,GAAiB9G,GACnB,MAAM/B,GAAuB,IAAK,CAAE5G,KAAM,iBAK5C,IAAImS,EAAejf,EAAMme,WAAWte,UAAYG,EAAMH,SAClDoqB,EAAsBrO,GACxBhP,EAAK3K,QACLgd,EACA6K,EAAgB/b,QAEdwH,EAAciK,GAAsBG,EACpClZ,EACyB,SAA3BzG,EAAMme,WAAWne,MACboF,EAAYmQ,EAAavV,EAAMme,WAAWte,SAAUyF,GACpDtF,EAAMyG,QAEZtH,EAAUsH,EAAS,gDAEnB,IAAIyjB,IAAWlI,GACfE,GAAe3R,IAAItQ,EAAKiqB,GAExB,IAAIC,EAAc7L,GAAkBlK,EAAYqB,EAAaxO,MAC7DjH,EAAMwX,SAASjH,IAAItQ,EAAKkqB,GAExB,IAAKxR,EAAezB,GAAwBpC,GAC1ClI,EAAK3K,QACLjC,EACAyG,EACA2N,EACA6K,GACA,EACAzM,EAAO0N,+BACPjL,EACAC,EACAC,EACAC,GACAC,GACAC,GACAC,EACAjQ,EACA,CAACwB,EAAMpC,MAAMG,GAAI4Q,IAMnByB,EACGnO,QAAQ2T,GAAOA,EAAGzc,MAAQA,IAC1B0H,SAAS+U,IACR,IAAI0N,EAAW1N,EAAGzc,IACd2pB,EAAkB5pB,EAAMwX,SAAS5I,IAAIwb,GACrC3E,EAAsBnH,QACxBnZ,EACAykB,EAAkBA,EAAgB3iB,UAAO9B,GAE3CnF,EAAMwX,SAASjH,IAAI6Z,EAAU3E,GACzB1D,GAAiB1K,IAAI+S,IACvBzE,GAAayE,GAEX1N,EAAG/O,YACLoU,GAAiBxR,IAAI6Z,EAAU1N,EAAG/O,WACpC,IAGJ2U,GAAY,CAAE9K,SAAU,IAAI8J,IAAIthB,EAAMwX,YAEtC,IAAIoO,EAAiCA,IACnC1O,EAAqBvP,SAAS+U,GAAOiJ,GAAajJ,EAAGzc,OAEvD6pB,EAAgB/b,OAAO7K,iBACrB,QACA0iB,GAGF,IAAIC,cAAEA,EAAapJ,eAAEA,SACbqJ,GACJ9lB,EACAyG,EACAkS,EACAzB,EACA+S,GAGJ,GAAIH,EAAgB/b,OAAOc,QACzB,OAGFib,EAAgB/b,OAAO5K,oBACrB,QACAyiB,GAGF1D,GAAepT,OAAO7O,GACtB8hB,GAAiBjT,OAAO7O,GACxBiX,EAAqBvP,SAAS+F,GAAMqU,GAAiBjT,OAAOpB,EAAEzN,OAE9D,IAAIkQ,EAAWqN,GAAaqI,GAC5B,GAAI1V,EACF,OAAO0U,GACLoF,EACA9Z,EAAS3H,QACT,GAKJ,GADA2H,EAAWqN,GAAaf,GACpBtM,EAKF,OADAmF,GAAiBjH,IAAI8B,EAASlQ,KACvB4kB,GACLoF,EACA9Z,EAAS3H,QACT,GAKJ,IAAIzB,WAAEA,EAAUmP,OAAEA,GAAWsG,GAC3Bxc,EACAyG,EACAkS,EACAkN,OACA1gB,EACA+R,EACAuF,EACAV,IAKF,GAAI/b,EAAMwX,SAASH,IAAIpX,GAAM,CAC3B,IAAI0c,EAAcC,GAAenH,EAAaxO,MAC9CjH,EAAMwX,SAASjH,IAAItQ,EAAK0c,EAC1B,CAEAqJ,GAAqBkE,GAMQ,YAA3BlqB,EAAMme,WAAWne,OACjBkqB,EAASjI,IAET9iB,EAAUqiB,EAAe,2BACzBR,GAA+BA,EAA4B3R,QAE3D0T,GAAmB/iB,EAAMme,WAAWte,SAAU,CAC5C4G,UACAM,aACAmP,SACAsB,SAAU,IAAI8J,IAAIthB,EAAMwX,cAM1B8K,GAAY,CACVpM,SACAnP,WAAY8V,GACV7c,EAAM+G,WACNA,EACAN,EACAyP,GAEFsB,SAAU,IAAI8J,IAAIthB,EAAMwX,YAE1BvC,GAAyB,EAE7B,CAhVIoV,CACEpqB,EACAmX,EACAlW,EACA4F,EACAL,EACAsa,EAASF,OACTgC,EACAzO,IAOJiB,GAAiB9E,IAAItQ,EAAK,CAAEmX,UAASlW,SAoUvCqO,eACEtP,EACAmX,EACAlW,EACA4F,EACAL,EACA2d,EACAvB,EACAzO,GAEA,IAAIwV,EAAkB5pB,EAAMwX,SAAS5I,IAAI3O,GACzC2mB,GACE3mB,EACAqe,GACElK,EACAwV,EAAkBA,EAAgB3iB,UAAO9B,GAE3C,CAAE0d,cAGJ,IAAIiH,EAAkB,IAAIlc,gBACtBmc,EAAenO,GACjBhP,EAAK3K,QACLf,EACA4oB,EAAgB/b,QAGlB,GAAIqW,EAAY,CACd,IAAIE,QAAuBC,GACzB9d,EACAvF,EACA6oB,EAAahc,QAGf,GAA4B,YAAxBuW,EAAexX,KACjB,OACK,GAA4B,UAAxBwX,EAAexX,KAAkB,CAC1C,IAAIpJ,MAAEA,GAAU+gB,GAAyBvjB,EAAMojB,GAE/C,YADAuC,GAAgB5mB,EAAKmX,EAAS1T,EAAO,CAAEmf,aAEzC,CAAO,IAAKyB,EAAe7d,QAOzB,YANAogB,GACE5mB,EACAmX,EACA1D,GAAuB,IAAK,CAAEnT,SAAUW,IACxC,CAAE2hB,cAKJ/b,EAAQ4Q,GADRjR,EAAU6d,EAAe7d,QACOvF,EAEpC,CAGA6gB,GAAiBxR,IAAItQ,EAAK6pB,GAE1B,IAAIE,EAAoBhI,GASpBxZ,SARgBoc,GAClB,SACA5kB,EACA+pB,EACA,CAACjjB,GACDL,EACAxG,IAEmB6G,EAAMpC,MAAMG,IAM7B0X,GAAiB/T,KACnBA,QACSsV,GAAoBtV,EAAQuhB,EAAahc,QAAQ,IACxDvF,GAKAuZ,GAAiBnT,IAAI3O,KAAS6pB,GAChC/H,GAAiBjT,OAAO7O,GAG1B,GAAI8pB,EAAahc,OAAOc,QACtB,OAKF,GAAIuG,GAAgBiC,IAAIpX,GAEtB,YADA2mB,GAAmB3mB,EAAK2c,QAAezX,IAKzC,GAAIiX,GAAiB5T,GACnB,OAAIyZ,GAA0B+H,OAG5BpD,GAAmB3mB,EAAK2c,QAAezX,KAGvCmQ,GAAiBjH,IAAIpO,cACf4kB,GAAwBkF,EAAcvhB,GAAQ,IAMxD,GAAIkN,GAAclN,GAEhB,YADAqe,GAAgB5mB,EAAKmX,EAAS5O,EAAO9E,OAIvCvE,GAAWod,GAAiB/T,GAAS,mCAGrCoe,GAAmB3mB,EAAK2c,GAAepU,EAAOvB,MAChD,CA1bEqjB,CACErqB,EACAmX,EACAlW,EACA4F,EACAL,EACAsa,EAASF,OACTgC,EACAzO,GAEJ,EAurCEmW,WA96DF,WACElG,KACA/B,GAAY,CAAEjB,aAAc,YAIG,eAA3BrhB,EAAMme,WAAWne,QAOU,SAA3BA,EAAMme,WAAWne,MAUrB0jB,GACElC,GAAiBxhB,EAAMkhB,cACvBlhB,EAAMme,WAAWte,SACjB,CACEmkB,mBAAoBhkB,EAAMme,WAE1B2F,sBAAuD,IAAjCnC,IAfxB+B,GAAgB1jB,EAAMkhB,cAAelhB,EAAMH,SAAU,CACnD8jB,gCAAgC,IAiBtC,EAi5DEliB,WAAapB,GAAWuM,EAAK3K,QAAQR,WAAWpB,GAChD+C,eAAiB/C,GAAWuM,EAAK3K,QAAQmB,eAAe/C,GACxDymB,cACAhE,cApbF,SAAqC7iB,GACnC,GAAIuS,EAAOsN,kBAAmB,CAC5B,IAAI0K,GAASrI,GAAevT,IAAI3O,IAAQ,GAAK,EACzCuqB,GAAS,GACXrI,GAAerT,OAAO7O,GACtBmV,GAAgB/G,IAAIpO,IAEpBkiB,GAAe5R,IAAItQ,EAAKuqB,EAE5B,MACE1H,GAAc7iB,GAEhBqiB,GAAY,CAAE9K,SAAU,IAAI8J,IAAIthB,EAAMwX,WACxC,EAwaEiT,QA9vEF,WACMtK,GACFA,IAEE0B,GACFA,IAEFzU,EAAYsd,QACZ1J,GAA+BA,EAA4B3R,QAC3DrP,EAAMwX,SAAS7P,SAAQ,CAACqC,EAAG/J,IAAQ6iB,GAAc7iB,KACjDD,EAAMuhB,SAAS5Z,SAAQ,CAACqC,EAAG/J,IAAQknB,GAAclnB,IACnD,EAovEE0qB,WAvXF,SAAoB1qB,EAAagD,GAC/B,IAAIqkB,EAAmBtnB,EAAMuhB,SAAS3S,IAAI3O,IAAQ0R,EAMlD,OAJIyQ,GAAiBxT,IAAI3O,KAASgD,GAChCmf,GAAiB7R,IAAItQ,EAAKgD,GAGrBqkB,CACT,EAgXEH,iBACAyD,YAxDF,SACExT,EACArS,GAEA,IAAIgjB,EAAiC,MAAtBvI,EAEfnH,GACEjB,EACArS,EAHgBya,GAAsBG,EAKtCnb,EACAF,GAQEyjB,IACFpI,EAAa,IAAIA,GACjB2C,GAAY,CAAE,GAElB,EAkCEuI,0BAA2B9I,GAC3B+I,yBAA0B/O,GAG1BgP,mBAvEF,SAA4BC,GAC1BxmB,EAAW,CAAA,EACXgb,EAAqBpb,EACnB4mB,EACA1mB,OACAa,EACAX,EAEJ,GAkEOkb,CACT,wBA2BO,SACLrb,EACAiP,GAEAnU,EACEkF,EAAO2B,OAAS,EAChB,oEAGF,IAEI1B,EAFAE,EAA0B,CAAA,EAC1Bc,GAAYgO,EAAOA,EAAKhO,SAAW,OAAS,IAEhD,GAAQ,MAAJgO,GAAAA,EAAMhP,mBACRA,EAAqBgP,EAAKhP,wBACrB,SAAIgP,GAAAA,EAAMiM,oBAAqB,CAEpC,IAAIA,EAAsBjM,EAAKiM,oBAC/Bjb,EAAsBI,IAAW,CAC/BsN,iBAAkBuN,EAAoB7a,IAE1C,MACEJ,EAAqByN,EAGvB,IAAIS,EAAiClS,EAAA,CACnCqL,sBAAsB,EACtB8G,qBAAqB,GACjBa,EAAOA,EAAKd,OAAS,MAGvBmN,EAAavb,EACfC,EACAC,OACAa,EACAX,GA+MF+K,eAAe0b,EACb3Y,EACAzS,EACA4G,EACAwS,EACA2G,EACA5D,EACAkP,GAEA/rB,EACEmT,EAAQvE,OACR,wEAGF,IACE,GAAIiG,GAAiB1B,EAAQK,OAAOlI,eAAgB,CAClD,IAAIjC,QA8CV+G,eACE+C,EACA7L,EACAke,EACA1L,EACA2G,EACA5D,EACAzJ,GAEA,IAAI/J,EAEJ,GAAKmc,EAAYjgB,MAAMxC,QAAWyiB,EAAYjgB,MAAMyR,KAa7C,CAUL3N,SAToBoc,EAClB,SACAtS,EACA,CAACqS,GACDle,EACA8L,EACA0G,EACA2G,IAEe+E,EAAYjgB,MAAMG,IAE/ByN,EAAQvE,OAAOc,SACjBwD,GAA+BC,EAASC,EAAgBC,EAE5D,KA5B0D,CACxD,IAAI9O,EAAQgQ,GAAuB,IAAK,CACtCf,OAAQL,EAAQK,OAChBpS,SAAU,IAAIuC,IAAIwP,EAAQjP,KAAK9C,SAC/B6W,QAASuN,EAAYjgB,MAAMG,KAE7B,GAAI0N,EACF,MAAM7O,EAER8E,EAAS,CACPsE,KAAM7I,EAAWP,MACjBA,QAEJ,CAiBA,GAAI0Y,GAAiB5T,GAKnB,MAAM,IAAIgI,SAAS,KAAM,CACvBJ,OAAQ5H,EAAO8S,SAASlL,OACxBC,QAAS,CACP8a,SAAU3iB,EAAO8S,SAASjL,QAAQzB,IAAI,eAK5C,GAAI2N,GAAiB/T,GAAS,CAC5B,IAAI9E,EAAQgQ,GAAuB,IAAK,CAAE5G,KAAM,iBAChD,GAAIyF,EACF,MAAM7O,EAER8E,EAAS,CACPsE,KAAM7I,EAAWP,MACjBA,QAEJ,CAEA,GAAI6O,EAAgB,CAGlB,GAAImD,GAAclN,GAChB,MAAMA,EAAO9E,MAGf,MAAO,CACL+C,QAAS,CAACke,GACV5d,WAAY,CAAE,EACdmW,WAAY,CAAE,CAACyH,EAAYjgB,MAAMG,IAAK2D,EAAOvB,MAC7CiP,OAAQ,KAGRJ,WAAY,IACZoG,cAAe,CAAE,EACjBkP,cAAe,CAAE,EACjBrP,gBAAiB,KAErB,CAGA,IAAIsP,EAAgB,IAAIxP,QAAQvJ,EAAQjP,IAAK,CAC3CgN,QAASiC,EAAQjC,QACjBF,SAAUmC,EAAQnC,SAClBpC,OAAQuE,EAAQvE,SAGlB,GAAI2H,GAAclN,GAAS,CAGzB,IAAI6T,EAAgBL,EAChB2I,EACArI,GAAoB7V,EAASke,EAAYjgB,MAAMG,IAanD,OAAAvE,WAXoBgrB,EAClBD,EACA5kB,EACAwS,EACA2G,EACA5D,EACA,KACA,CAACK,EAAc3X,MAAMG,GAAI2D,IAKf,CACVsN,WAAYlF,EAAqBpI,EAAO9E,OACpC8E,EAAO9E,MAAM0M,OACQ,MAArB5H,EAAOsN,WACPtN,EAAOsN,WACP,IACJoH,WAAY,KACZkO,cAAa9qB,EAAA,GACPkI,EAAO6H,QAAU,CAAE,CAACsU,EAAYjgB,MAAMG,IAAK2D,EAAO6H,SAAY,KAGxE,CAWA,OAAA/P,WAToBgrB,EAClBD,EACA5kB,EACAwS,EACA2G,EACA5D,EACA,MAIU,CACVkB,WAAY,CACV,CAACyH,EAAYjgB,MAAMG,IAAK2D,EAAOvB,OAG7BuB,EAAOsN,WAAa,CAAEA,WAAYtN,EAAOsN,YAAe,GAAE,CAC9DsV,cAAe5iB,EAAO6H,QAClB,CAAE,CAACsU,EAAYjgB,MAAMG,IAAK2D,EAAO6H,SACjC,CAAC,GAET,CA/LyBkb,CACjBjZ,EACA7L,EACAykB,GAAcxT,GAAejR,EAAS5G,GACtCoZ,EACA2G,EACA5D,EACc,MAAdkP,GAEF,OAAO1iB,CACT,CAEA,IAAIA,QAAe8iB,EACjBhZ,EACA7L,EACAwS,EACA2G,EACA5D,EACAkP,GAEF,OAAOzQ,GAAWjS,GACdA,EAAMlI,EAAA,CAAA,EAEDkI,EAAM,CACT0U,WAAY,KACZkO,cAAe,CAAC,GAkBxB,CAhBE,MAAOzrB,GAIP,GAoxDN,SAA8B6I,GAC5B,OACY,MAAVA,GACkB,iBAAXA,GACP,SAAUA,GACV,WAAYA,IACXA,EAAOsE,OAAS7I,EAAWgD,MAAQuB,EAAOsE,OAAS7I,EAAWP,MAEnE,CA5xDU8nB,CAAqB7rB,IAAM8a,GAAW9a,EAAE6I,QAAS,CACnD,GAAI7I,EAAEmN,OAAS7I,EAAWP,MACxB,MAAM/D,EAAE6I,OAEV,OAAO7I,EAAE6I,MACX,CAGA,GA20DN,SAA4BA,GAC1B,IAAKiS,GAAWjS,GACd,OAAO,EAGT,IAAI4H,EAAS5H,EAAO4H,OAChBvQ,EAAW2I,EAAO6H,QAAQzB,IAAI,YAClC,OAAOwB,GAAU,KAAOA,GAAU,KAAmB,MAAZvQ,CAC3C,CAn1DU4rB,CAAmB9rB,GACrB,OAAOA,EAET,MAAMA,CACR,CACF,CAqJA4P,eAAe+b,EACbhZ,EACA7L,EACAwS,EACA2G,EACA5D,EACAkP,EACA1V,GAQA,IAAIjD,EAA+B,MAAd2Y,EAGrB,GACE3Y,IACC2Y,MAAAA,IAAAA,EAAYxmB,MAAM0R,UAClB8U,MAAAA,IAAAA,EAAYxmB,MAAMyR,MAEnB,MAAMzC,GAAuB,IAAK,CAChCf,OAAQL,EAAQK,OAChBpS,SAAU,IAAIuC,IAAIwP,EAAQjP,KAAK9C,SAC/B6W,QAAmB,MAAV8T,OAAU,EAAVA,EAAYxmB,MAAMG,KAI/B,IAKI8T,GALiBuS,EACjB,CAACA,GACD1V,GAAuBE,GAAcF,EAAoB,IACzDf,GAA8BhO,EAAS+O,EAAoB,IAC3D/O,GAC+BsC,QAChC8L,GAAMA,EAAEnQ,MAAM0R,QAAUvB,EAAEnQ,MAAMyR,OAInC,GAA6B,IAAzBwC,EAAc3S,OAChB,MAAO,CACLS,UAEAM,WAAYN,EAAQuC,QAClB,CAACiF,EAAK4G,IAAMpL,OAAO5F,OAAOoK,EAAK,CAAE,CAAC4G,EAAEnQ,MAAMG,IAAK,QAC/C,CAAA,GAEFqR,OACEV,GAAuBE,GAAcF,EAAoB,IACrD,CACE,CAACA,EAAoB,IAAKA,EAAoB,GAAG9R,OAEnD,KACNoS,WAAY,IACZoG,cAAe,CAAE,EACjBH,gBAAiB,MAIrB,IAAIzB,QAAgBsK,EAClB,SACAtS,EACAqG,EACAlS,EACA8L,EACA0G,EACA2G,GAGEtN,EAAQvE,OAAOc,SACjBwD,GAA+BC,EAASC,EAAgBC,GAI1D,IAAIuJ,EAAkB,IAAIuF,IACtBpH,EAAU4B,GACZrV,EACA6T,EACA9E,EACAuG,EACAC,GAIE0P,EAAkB,IAAIvnB,IACxBwU,EAAclU,KAAKqC,GAAUA,EAAMpC,MAAMG,MAQ3C,OANA4B,EAAQkB,SAASb,IACV4kB,EAAgBrU,IAAIvQ,EAAMpC,MAAMG,MACnCqV,EAAQnT,WAAWD,EAAMpC,MAAMG,IAAM,KACvC,IAGFvE,KACK4Z,EAAO,CACVzT,UACAsV,gBACEA,EAAgBtM,KAAO,EACnBhG,OAAOkiB,YAAY5P,EAAgB/N,WACnC,MAEV,CAIAuB,eAAeqV,EACb9X,EACAwF,EACAqG,EACAlS,EACA8L,EACA0G,EACA2G,GAEA,IAAItF,QAAgBxB,GAClB8G,GAAyBnH,GACzB3L,EACA,KACAwF,EACAqG,EACAlS,EACA,KACAjC,EACAF,EACA2U,GAGEuN,EAA0C,CAAA,EA6B9C,aA5BM/Y,QAAQoL,IACZpS,EAAQhC,KAAI8K,UACV,KAAMzI,EAAMpC,MAAMG,MAAMyV,GACtB,OAEF,IAAI9R,EAAS8R,EAAQxT,EAAMpC,MAAMG,IACjC,GAAI4Y,GAAmCjV,GAAS,CAG9C,MAAM6S,GAFS7S,EAAOA,OAIpB8J,EACAxL,EAAMpC,MAAMG,GACZ4B,EACAnB,EACAkN,EAAO7G,qBAEX,CACA,GAAI8O,GAAWjS,EAAOA,SAAW+J,EAG/B,MAAM/J,EAGRge,EAAY1f,EAAMpC,MAAMG,UAChB0V,GAAsC/R,EAAO,KAGlDge,CACT,CAEA,MAAO,CACL7G,aACAiM,MAriBFrc,eACE+C,EAAgBuZ,GAU0B,IAT1C5S,eACEA,EAAc+C,wBACdA,EAAuB4D,sBACvBA,QAKD,IAAAiM,EAAG,CAAA,EAAEA,EAEFxoB,EAAM,IAAIP,IAAIwP,EAAQjP,KACtBsP,EAASL,EAAQK,OACjB9S,EAAWM,EAAe,GAAIY,EAAWsC,GAAM,KAAM,WACrDoD,EAAUrB,EAAYua,EAAY9f,EAAUyF,GAGhD,IAAKmO,GAAcd,IAAsB,SAAXA,EAAmB,CAC/C,IAAIjP,EAAQgQ,GAAuB,IAAK,CAAEf,YACpClM,QAASqlB,EAAuBpnB,MAAEA,GACtC2Y,GAAuBsC,GACzB,MAAO,CACLra,WACAzF,WACA4G,QAASqlB,EACT/kB,WAAY,CAAE,EACdmW,WAAY,KACZhH,OAAQ,CACN,CAACxR,EAAMG,IAAKnB,GAEdoS,WAAYpS,EAAM0M,OAClB8L,cAAe,CAAE,EACjBkP,cAAe,CAAE,EACjBrP,gBAAiB,KAErB,CAAO,IAAKtV,EAAS,CACnB,IAAI/C,EAAQgQ,GAAuB,IAAK,CAAEnT,SAAUV,EAASU,YACvDkG,QAASwd,EAAevf,MAAEA,GAC9B2Y,GAAuBsC,GACzB,MAAO,CACLra,WACAzF,WACA4G,QAASwd,EACTld,WAAY,CAAE,EACdmW,WAAY,KACZhH,OAAQ,CACN,CAACxR,EAAMG,IAAKnB,GAEdoS,WAAYpS,EAAM0M,OAClB8L,cAAe,CAAE,EACjBkP,cAAe,CAAE,EACjBrP,gBAAiB,KAErB,CAEA,IAAIvT,QAAeyiB,EACjB3Y,EACAzS,EACA4G,EACAwS,EACA2G,GAAyB,MACG,IAA5B5D,EACA,MAEF,OAAIvB,GAAWjS,GACNA,EAMTlI,EAAA,CAAST,WAAUyF,YAAakD,EAClC,EA6dEujB,WAjcFxc,eACE+C,EAAgB0Z,GAUF,IATd5U,QACEA,EAAO6B,eACPA,EAAc2G,sBACdA,QAKD,IAAAoM,EAAG,CAAA,EAAEA,EAEF3oB,EAAM,IAAIP,IAAIwP,EAAQjP,KACtBsP,EAASL,EAAQK,OACjB9S,EAAWM,EAAe,GAAIY,EAAWsC,GAAM,KAAM,WACrDoD,EAAUrB,EAAYua,EAAY9f,EAAUyF,GAGhD,IAAKmO,GAAcd,IAAsB,SAAXA,GAAgC,YAAXA,EACjD,MAAMe,GAAuB,IAAK,CAAEf,WAC/B,IAAKlM,EACV,MAAMiN,GAAuB,IAAK,CAAEnT,SAAUV,EAASU,WAGzD,IAAIuG,EAAQsQ,EACR3Q,EAAQ2W,MAAMvI,GAAMA,EAAEnQ,MAAMG,KAAOuS,IACnCM,GAAejR,EAAS5G,GAE5B,GAAIuX,IAAYtQ,EACd,MAAM4M,GAAuB,IAAK,CAChCnT,SAAUV,EAASU,SACnB6W,YAEG,IAAKtQ,EAEV,MAAM4M,GAAuB,IAAK,CAAEnT,SAAUV,EAASU,WAGzD,IAAIiI,QAAeyiB,EACjB3Y,EACAzS,EACA4G,EACAwS,EACA2G,GAAyB,MACzB,EACA9Y,GAGF,GAAI2T,GAAWjS,GACb,OAAOA,EAGT,IAAI9E,EAAQ8E,EAAO0N,OAASzM,OAAO2e,OAAO5f,EAAO0N,QAAQ,QAAK/Q,EAC9D,QAAcA,IAAVzB,EAKF,MAAMA,EAIR,GAAI8E,EAAO0U,WACT,OAAOzT,OAAO2e,OAAO5f,EAAO0U,YAAY,GAG1C,GAAI1U,EAAOzB,WAAY,CAAA,IAAAklB,EACrB,IAAIhlB,EAAOwC,OAAO2e,OAAO5f,EAAOzB,YAAY,GAI5C,OAHIklB,OAAJA,EAAIzjB,EAAOuT,kBAAPkQ,EAAyBnlB,EAAMpC,MAAMG,MACvCoC,EAAKkL,IAA0B3J,EAAOuT,gBAAgBjV,EAAMpC,MAAMG,KAE7DoC,CACT,CAGF,EAwXF,UDv7EoC,SAACA,EAAM2F,GAGzC,YAH6C,IAAJA,IAAAA,EAAO,CAAA,GAGzC,IAAII,EAAa/F,EAFW,iBAAT2F,EAAoB,CAAEwD,OAAQxD,GAASA,EAGnE,iBAvuBO,SACLsf,EACAllB,QAEC,IAFDA,IAAAA,EAEI,CAAA,GAEJ,IAAI9F,EAAegrB,EACfhrB,EAAKmH,SAAS,MAAiB,MAATnH,IAAiBA,EAAKmH,SAAS,QACvD9I,GACE,EACA,eAAe2B,EAAf,oCACMA,EAAK2B,QAAQ,MAAO,MAD1B,qIAGsC3B,EAAK2B,QAAQ,MAAO,MAAK,MAEjE3B,EAAOA,EAAK2B,QAAQ,MAAO,OAI7B,MAAMspB,EAASjrB,EAAKqG,WAAW,KAAO,IAAM,GAEtCiE,EAAa4gB,GACZ,MAALA,EAAY,GAAkB,iBAANA,EAAiBA,EAAIxnB,OAAOwnB,GA4BtD,OAAOD,EA1BUjrB,EACd+G,MAAM,OACNxD,KAAI,CAACwE,EAASnJ,EAAOusB,KAIpB,GAHsBvsB,IAAUusB,EAAMrmB,OAAS,GAGd,MAAZiD,EAAiB,CAGpC,OAAOuC,EAAUxE,EAFJ,KAGf,CAEA,MAAMslB,EAAWrjB,EAAQnC,MAAM,oBAC/B,GAAIwlB,EAAU,CACZ,OAASrsB,EAAKssB,GAAYD,EAC1B,IAAIE,EAAQxlB,EAAO/G,GAEnB,OADAd,EAAuB,MAAbotB,GAA6B,MAATC,EAAa,aAAevsB,EAAG,WACtDuL,EAAUghB,EACnB,CAGA,OAAOvjB,EAAQpG,QAAQ,OAAQ,GAAG,IAGnCkG,QAAQE,KAAcA,IAEAnE,KAAK,IAChC,8BCmnGO,SACLT,EACA6V,EACAxW,GASA,OAPoCpD,EAAA,CAAA,EAC/B4Z,EAAO,CACVpE,WAAYlF,EAAqBlN,GAASA,EAAM0M,OAAS,IACzD8F,OAAQ,CACN,CAACgE,EAAQuS,4BAA8BpoB,EAAO,GAAGQ,IAAKnB,IAI5D,kBD3uFO,SAAuBrD,GAE5B,MAAc,KAAPA,GAAuC,KAAzBA,EAAYE,SAC7B,IACc,iBAAPF,EACPK,EAAUL,GAAIE,SACdF,EAAGE,QACT,gGAuCkC,SAAC0G,EAAM2F,QAAI,IAAJA,IAAAA,EAAO,CAAA,GAC9C,IAAIK,EAA+B,iBAATL,EAAoB,CAAEwD,OAAQxD,GAASA,EAE7DyD,EAAU,IAAIC,QAAQrD,EAAaoD,SAKvC,OAJKA,EAAQgH,IAAI,iBACfhH,EAAQE,IAAI,eAAgB,mCAGvB,IAAIC,SAASjF,KAAKC,UAAUvE,GAAK3G,EAAA,CAAA,EACnC2M,EAAY,CACfoD,YAEJ,oGAsQkDqc,CAACrpB,EAAKuJ,KACtD,IAAI0O,EAAWnL,EAAS9M,EAAKuJ,GAE7B,OADA0O,EAASjL,QAAQE,IAAI,0BAA2B,QACzC+K,CAAQ,YASwBzY,CAACQ,EAAKuJ,KAC7C,IAAI0O,EAAWnL,EAAS9M,EAAKuJ,GAE7B,OADA0O,EAASjL,QAAQE,IAAI,kBAAmB,QACjC+K,CAAQ,kEApQV,SAAiBrU,EAAS2F,GAC/B,OAAO,IAAIF,EACTzF,EACgB,iBAAT2F,EAAoB,CAAEwD,OAAQxD,GAASA,EAElD"}
\ No newline at end of file
diff --git a/router.ts b/router.ts
index 4691f002a8120945a606e693d143c11ce59bc216..d0e1d577d2615b6a76ca13ce06f72538dcd5c0d8 100644
--- a/router.ts
+++ b/router.ts
@@ -4411,9 +4411,17 @@ function getMatchesToLoad(
     : undefined;
   let shouldSkipRevalidation =
     skipActionErrorRevalidation && actionStatus && actionStatus >= 400;
+  let sawError = false;
 
   let navigationMatches = boundaryMatches.filter((match, index) => {
     let { route } = match;
+
+    // Track when we've encountered an error opn initial load so we don't try
+    // to run any loaders below that
+    if (isInitialLoad && state.errors && state.errors[route.id] !== undefined) {
+      sawError = true;
+    }
+
     if (route.lazy) {
       // We haven't loaded this route yet so we don't know if it's got a loader!
       return true;
@@ -4424,6 +4432,10 @@ function getMatchesToLoad(
     }
 
     if (isInitialLoad) {
+      if (sawError && state.loaderData[route.id] === undefined) {
+        return false;
+      }
+
       if (typeof route.loader !== "function" || route.loader.hydrate) {
         return true;
       }
